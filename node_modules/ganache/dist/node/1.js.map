{"version":3,"sources":["webpack://Ganache/../chains/ethereum/address/lib/index.js","webpack://Ganache/../chains/ethereum/block/lib/index.js","webpack://Ganache/../chains/ethereum/block/lib/src/block-params.js","webpack://Ganache/../chains/ethereum/block/lib/src/block.js","webpack://Ganache/../chains/ethereum/block/lib/src/runtime-block.js","webpack://Ganache/../chains/ethereum/block/lib/src/serialize.js","webpack://Ganache/../chains/ethereum/block/lib/src/snapshots.js","webpack://Ganache/../chains/ethereum/ethereum/lib/index.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/api.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/blockchain.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/connector.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/data-managers/account-manager.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/data-managers/block-manager.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/data-managers/blocklog-manager.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/data-managers/manager.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/data-managers/transaction-manager.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/data-managers/transaction-receipt-manager.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/database.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/cache.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/deferred.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/fork.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/handlers/base-handler.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/handlers/http-handler.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/handlers/provider-handler.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/handlers/ws-handler.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/lexicographic-key-codec.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/persistent-cache/ancestry.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/persistent-cache/helpers.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/persistent-cache/persistent-cache.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/persistent-cache/tree.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/rate-limiter/limit-counter.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/rate-limiter/rate-limiter.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/state-manager.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/forking/trie.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/hdkey.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/helpers/assert-arg-length.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/helpers/bufferify.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/helpers/filter-parsing.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/helpers/gas-estimator.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/helpers/precompiles.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/helpers/trie.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/miner/miner.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/miner/replace-from-heap.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/provider-events.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/provider.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/transaction-pool.js","webpack://Ganache/../chains/ethereum/ethereum/lib/src/wallet.js","webpack://Ganache/../chains/ethereum/options/lib/index.js","webpack://Ganache/../chains/ethereum/options/lib/src/chain-options.js","webpack://Ganache/../chains/ethereum/options/lib/src/database-options.js","webpack://Ganache/../chains/ethereum/options/lib/src/fork-options.js","webpack://Ganache/../chains/ethereum/options/lib/src/helpers.js","webpack://Ganache/../chains/ethereum/options/lib/src/index.js","webpack://Ganache/../chains/ethereum/options/lib/src/logging-options.js","webpack://Ganache/../chains/ethereum/options/lib/src/miner-options.js","webpack://Ganache/../chains/ethereum/options/lib/src/wallet-options.js","webpack://Ganache/../chains/ethereum/transaction/lib/index.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/access-lists.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/base-transaction.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/eip1559-fee-market-transaction.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/eip2930-access-list-transaction.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/hardfork.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/legacy-transaction.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/params.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/raw.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/rpc-transaction.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/runtime-transaction.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/signing.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/transaction-factory.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/transaction-receipt.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/transaction-types.js","webpack://Ganache/../chains/ethereum/transaction/lib/src/vm-transaction.js","webpack://Ganache/../chains/ethereum/utils/lib/index.js","webpack://Ganache/../chains/ethereum/utils/lib/src/errors/abort-error.js","webpack://Ganache/../chains/ethereum/utils/lib/src/errors/coded-error.js","webpack://Ganache/../chains/ethereum/utils/lib/src/errors/errors.js","webpack://Ganache/../chains/ethereum/utils/lib/src/errors/runtime-error.js","webpack://Ganache/../chains/ethereum/utils/lib/src/index.js","webpack://Ganache/../chains/ethereum/utils/lib/src/things/account.js","webpack://Ganache/../chains/ethereum/utils/lib/src/things/blocklogs.js","webpack://Ganache/../chains/ethereum/utils/lib/src/things/tags.js","webpack://Ganache/../chains/ethereum/utils/lib/src/things/trace-data.js","webpack://Ganache/../chains/ethereum/utils/lib/src/things/trace-storage-map.js","webpack://Ganache/../chains/ethereum/utils/lib/src/types/debug-storage.js","webpack://Ganache/../chains/ethereum/utils/lib/src/types/extract-values-from-types.js","webpack://Ganache/../chains/ethereum/utils/lib/src/types/filters.js","webpack://Ganache/../chains/ethereum/utils/lib/src/types/hex-datatypes.js","webpack://Ganache/../chains/ethereum/utils/lib/src/types/shh.js","webpack://Ganache/../chains/ethereum/utils/lib/src/types/subscriptions.js","webpack://Ganache/../chains/ethereum/utils/lib/src/types/trace-transaction.js","webpack://Ganache/../chains/ethereum/utils/lib/src/types/tuple-from-union.js","webpack://Ganache/../chains/filecoin/options/lib/index.js","webpack://Ganache/../chains/filecoin/options/lib/src/chain-options.js","webpack://Ganache/../chains/filecoin/options/lib/src/database-options.js","webpack://Ganache/../chains/filecoin/options/lib/src/helpers.js","webpack://Ganache/../chains/filecoin/options/lib/src/index.js","webpack://Ganache/../chains/filecoin/options/lib/src/logging-options.js","webpack://Ganache/../chains/filecoin/options/lib/src/miner-options.js","webpack://Ganache/../chains/filecoin/options/lib/src/wallet-options.js","webpack://Ganache/../colors/lib/index.js","webpack://Ganache/../colors/lib/src/index.js","webpack://Ganache/../core/lib/index.js","webpack://Ganache/../core/lib/src/connector-loader.js","webpack://Ganache/../core/lib/src/options/index.js","webpack://Ganache/../core/lib/src/options/server-options.js","webpack://Ganache/../core/lib/src/server.js","webpack://Ganache/../core/lib/src/servers/http-server.js","webpack://Ganache/../core/lib/src/servers/utils/content-types.js","webpack://Ganache/../core/lib/src/servers/utils/http-response-codes.js","webpack://Ganache/../core/lib/src/servers/utils/websocket-close-codes.js","webpack://Ganache/../core/lib/src/servers/ws-server.js","webpack://Ganache//home/runner/work/ganache/ganache/src/packages/core/node_modules/@trufflesuite/uws-js-unofficial/binaries|sync|/^\\.\\/uws_.*\\.node$/","webpack://Ganache/../flavors/lib/index.js","webpack://Ganache/../flavors/lib|sync","webpack://Ganache/../options/lib/index.js","webpack://Ganache/../options/lib/src/base.js","webpack://Ganache/../options/lib/src/constants.js","webpack://Ganache/../options/lib/src/create.js","webpack://Ganache/../options/lib/src/definition.js","webpack://Ganache/../options/lib/src/exclusive.js","webpack://Ganache/../promise-queue/lib/index.js","webpack://Ganache/../promise-queue/lib/src/entry.js","webpack://Ganache/../rlp/lib/index.js","webpack://Ganache/../secp256k1/lib/index.js","webpack://Ganache/../utils/lib/index.js","webpack://Ganache/../utils/lib/src/common.js","webpack://Ganache/../utils/lib/src/things/json-rpc/json-rpc-base-types.js","webpack://Ganache/../utils/lib/src/things/json-rpc/json-rpc-data.js","webpack://Ganache/../utils/lib/src/things/json-rpc/json-rpc-quantity.js","webpack://Ganache/../utils/lib/src/things/jsonrpc.js","webpack://Ganache/../utils/lib/src/things/promievent.js","webpack://Ganache/../utils/lib/src/things/subscription.js","webpack://Ganache/../utils/lib/src/types/api.js","webpack://Ganache/../utils/lib/src/types/connector.js","webpack://Ganache/../utils/lib/src/types/index.js","webpack://Ganache/../utils/lib/src/types/provider.js","webpack://Ganache/../utils/lib/src/utils/bigint-to-buffer.js","webpack://Ganache/../utils/lib/src/utils/buffer-to-bigint.js","webpack://Ganache/../utils/lib/src/utils/buffer-to-key.js","webpack://Ganache/../utils/lib/src/utils/constants.js","webpack://Ganache/../utils/lib/src/utils/executor.js","webpack://Ganache/../utils/lib/src/utils/find-insert-position.js","webpack://Ganache/../utils/lib/src/utils/has-own.js","webpack://Ganache/../utils/lib/src/utils/heap.js","webpack://Ganache/../utils/lib/src/utils/index.js","webpack://Ganache/../utils/lib/src/utils/keccak.js","webpack://Ganache/../utils/lib/src/utils/random-number-generator.js","webpack://Ganache/../utils/lib/src/utils/request-coordinator.js","webpack://Ganache/../utils/lib/src/utils/uint-to-buffer.js","webpack://Ganache/../utils/lib/src/utils/unref.js"],"names":["Object","defineProperty","exports","value","Address","utils_1","Data","constructor","super","ByteLength","__createBinding","this","create","o","m","k","k2","undefined","enumerable","get","__exportStar","p","prototype","hasOwnProperty","call","BlockParams","INITIAL_BASE_FEE_PER_GAS","ELASTICITY","BASE_FEE_MAX_CHANGE_DENOMINATOR","Block","ethereum_transaction_1","rlp_1","runtime_block_1","utils_2","block_params_1","serialized","common","_common","deserialized","decode","_raw","_rawTransactions","totalDifficulty","header","makeHeader","_rawTransactionMetaData","_size","Quantity","from","toNumber","hash","_hash","keccak","encode","getTransactions","map","raw","index","extra","toBuffer","number","TransactionFactory","fromDatabaseTx","toJSON","includeFullTransactions","txFn","getTxFn","hashBuffer","jsonTxs","tx","updateEffectiveGasPrice","baseFeePerGas","size","transactions","uncles","include","rawHeader","txs","extraTxs","block","parentHeader","nextBaseFee","parentGasTarget","gasLimit","toBigInt","parentGasUsed","gasUsed","adjustedFeeDelta","blocks","maxPossibleBaseFee","calcNextBaseFeeBigInt","parentBlock","RuntimeBlock","getBlockSize","ethereumjs_util_1","serialize_1","block_1","BnExtra","BN","buf","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","timestamp","extraData","mixHash","nonce","length","coinbase","previousBlockTotalDifficulty","serializeBaseFeePerGas","ts","coinbaseBuffer","BUFFER_ZERO","finalize","transactionsTrie","receiptTrie","bloom","storageKeys","KECCAK256_RLP_ARRAY","BUFFER_EMPTY","BUFFER_32_ZERO","BUFFER_8_ZERO","forEach","push","serialize","serializedStart","encodeRange","serializedLength","encodeLength","middle","ending","uintToBuffer","digest","output","_getId","_filters","_subscriptions","_options","_blockchain","_wallet","__decorate","decorators","target","key","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","i","__classPrivateFieldSet","receiver","privateMap","has","TypeError","set","__classPrivateFieldGet","__importDefault","mod","__esModule","ethereum_utils_1","ethereum_block_1","eth_sig_util_1","wallet_1","gas_estimator_1","assert_arg_length_1","filter_parsing_1","ethereum_address_1","miner_1","async","autofillDefaultTransactionValues","eth_estimateGas","transaction","blockchain","options","gas","isNull","defaultLimit","defaultTransactionGasLimit","RPCQUANTITY_EMPTY","Tag","LATEST","gasPrice","defaultGasPrice","maxFeePerGas","latest","calcNBlocksMaxBaseFee","version","CLIENT_VERSION","PROTOCOL_VERSION","RPC_MODULES","eth","net","rpc","web3","evm","personal","assertExceptionalTransactions","errors","baseError","data","execException","VM_EXCEPTIONS","toString","VM_EXCEPTION","message","err","Error","join","EthereumApi","wallet","id","Map","dbName","arg","vmErrorsOnRPCResponse","chain","mine","Capacity","FillBlock","address","buffer","stateManager","vm","account","getAccount","toArrayLike","putAccount","Empty","seconds","milliseconds","Math","floor","increaseTime","time","t","getTime","setTime","snapshotId","revert","snapshot","duration","unlockUnknownAccount","toLowerCase","lowerAddress","knownAccounts","lockAccount","threads","legacyInstamine","resume","pause","bytes","Buffer","networkId","RPCQUANTITY_ZERO","blockNumber","generateVM","copy","Promise","resolve","reject","fromRpc","callGasLimit","runArgs","toVmTransaction","skipBalance","skipNonce","default","result","gasEstimate","catch","_","getByHash","blockNum","getEffectiveNumber","rawBlock","getRawByBlockNumber","rawTransactions","getNumberFromHash","parseInt","uncleIndex","filterId","powHash","hashRate","clientID","isStarted","addresses","chainId","accounts","getBalance","getCode","position","blockStateRoot","trie","setContext","posBuff","paddedPosBuff","allocUnsafe","fill","slice","addressBuf","addressData","addressStateRoot","transactionHash","transactionPool","find","transactionReceipts","dataHash","txHash","transactionPromise","receiptPromise","blockPromise","then","receipt","all","blockTime","logging","logger","log","fromString","isKnownAccount","isUnlockedAccount","unlockedAccounts","bind","secretKey","queueTransaction","signAndHash","privateKey","messageHash","hashPersonalMessage","v","s","ecsign","toRpcSig","typedData","eth_signTypedData_v4","types","EIP712Domain","domain","primaryType","signTypedData_v4","eth_subscribe","subscriptionName","subscriptions","subscription","promiEvent","PromiEvent","unsubscribe","on","emit","type","JSON","parse","stringify","topics","parseFilterDetails","blockLogs","filter","CodedError","JsonRpcErrorCode","METHOD_NOT_FOUND","subscriptionId","delete","updates","FilterTypes","pendingTransaction","fromBlock","toBlock","parseFilterRange","eth_getLogs","getLogs","getNonce","input","baseFeePerGasBigInt","calcNextBaseFee","hasGasPrice","isActivatedEIP","hasMaxFeePerGas","hasMaxPriorityFeePerGas","maxPriorityFeePerGas","BigInt","a","tip","simulatedTransaction","to","simulateTransaction","traceTransaction","blockHash","transactionIndex","contractAddress","startKey","maxResult","storageRangeAt","passphrase","newAccount","createRandomAccount","strAddress","encryptedKeyFile","encrypt","encryptedKeyFiles","add","rawKey","createAccountFromPrivateKey","unlockAccount","decrypt","postData","WeakMap","assertArgLength","_state","_miner","_blockBeingSavedPromise","_timer","_emitStepEvent","_database","_instamine","_saveNewBlock","_emitNewBlock","_getTransactionLogOutput","_handleNewBlockData","_readyNextBlock","_isPaused","_commitAccounts","_initializeGenesisBlock","_timeAdjustment","_currentTime","_deleteBlockData","_snapshots","_traceTransaction","_prepareNextBlock","__setModuleDefault","__importStar","Status","os_1","database_1","emittery_1","common_1","vm_1","exceptions_1","account_manager_1","block_manager_1","blocklog_manager_1","transaction_manager_1","state_manager_1","index_1","trie_1","trie_2","precompiles_1","transaction_receipt_manager_1","provider_events_1","mcl_wasm_1","mclInitPromise","init","BLS12_381","setMapToMode","IRTF","verifyOrderG1","verifyOrderG2","makeTrie","db","root","fallback","ForkTrie","GanacheTrie","Blockchain","Typed","starting","batch","blockHeader","blockNumberQ","BlockLogs","timestampStr","Date","logOutput","serializeForDb","getReceipt","encodedReceipt","append","put","hashedKey","putBlock","EOL","blockInfo","process","nextTick","error","str","reason","blockData","previousBlock","previousHeader","previousNumber","blockGasLimit","started","maxTransactions","onlyOneBlock","nextBlock","paused","createVmFromStateTrie","stateTrie","allowUnlimitedContractSize","activatePrecompile","getBlock","state","activatePrecompiles","ForkStateManager","DefaultStateManager","_isInitialized","initialAccounts","fallbackBlock","minerOptions","checkpoint","acc","_cache","touchAccount","commit","genesis","KECCAK256_RLP","BUFFER_256_ZERO","rawBlockNumber","now","blocksToDelete","revertMetaData","del","snaps","unsubscribeFromBlocks","newBlock","keys","currentDepth","storageStack","storage","structLogs","TraceData","TraceDataFactory","transactionEventContext","stepListener","event","next","makeStepEvent","gasLeft","gasUsedPreviousStep","memory","disableMemory","stack","disableStack","stackItem","structLog","depth","gasCost","op","opcode","name","pc","disableStorage","eventDepth","pop","TraceStorageMap","getContractStorage","flush","l","database","ejsContractAddress","context","runTx","removeListener","returnValue","targetBlock","uncleHeaders","equals","instamine","console","info","initialize","fork","createCommon","hardfork","forCustomChain","KNOWN_CHAINIDS","comment","blockIndexes","firstBlockTime","earliest","txPool","minerOpts","executables","nullResolved","mineAll","Single","wait","unref","setTimeout","once","clearListeners","e","stopping","stop","_threads","snapshots","timeAdjustment","current","rawValue","valueOf","snapshotIndex","Number","clear","currentHash","snapshotBlock","snapshotHeader","snapshotHash","splice","blockPromises","blockList","setStateRootSync","_trie","_storageTries","status","hasToAddress","toBuf","calculateIntrinsicGas","transactionContext","ganacheStepEvent","caller","warmPrecompiles","addWarmedAddress","fromAccount","iaddn","txCost","balance","isub","runCall","execResult","runState","programCounter","exceptionError","VmError","ERROR","OUT_OF_GAS","RuntimeError","RETURN_TYPES","RETURN_VALUE","transactionHashBuffer","txIndex","contractAddressBuffer","nextKey","storageTrie","startKeyBuffer","compare","b","createReadStream","findInsertPosition","getStorageKeys","toggleStepEvent","enable","clearTimeout","removeAllListeners","close","stopped","_provider","_handle","Connector","Provider","provider_1","bufferify_1","providerOptions","executor","BUFFERIFY_THRESHOLD","payload","connection","method","isHttp","METHOD_NOT_SUPPORTED","params","_requestRaw","PARSE_ERROR","handle","Array","isArray","promises","format","results","makeError","makeResponse","json","bufferify","formatError","disconnect","AccountManager","getRaw","Account","fromBuffer","trieCopy","DATA_EMPTY","codeHash","KECCAK256_NULL","_blockIndexes","manager_1","EMPTY_BUFFER","BlockManager","base","fromFallback","tagOrBlockNumber","isValidForkBlockNumber","request","rawFromJSON","bm","updateTaggedBlocks","blockExtra","txExtra","typedTx","toEthRawTransaction","getBlockByTag","tag","normalize","PENDING","EARLIEST","numBuf","secondaryKey","createValueStream","limit","reverse","BlockLogManager","res","fromJSON","logs","toBlockNumber","parseFilter","pendingLogsPromises","fromBlockNumber","blockLogsRange","filteredBlockLogs","_Type","Manager","_queue","_paused","_resumer","_resolver","transaction_pool_1","promise_queue_1","TransactionManager","factory","insertion","prepareTransaction","drain","isBusy","TransactionReceiptManager","TransactionReceipt","RPCQUANTITY_ONE","cumulativeGasUsed","topic","fromValues","_cleanupDirectory","_closed","_rootStore","_cleanup","tmp_promise_1","levelup_1","leveldown_1","subleveldown_1","encoding_down_1","setGracefulCleanup","tmpOptions","prefix","unsafeCleanup","noop","Database","directory","levelupOptions","keyEncoding","valueEncoding","store","dbPath","dirInfo","dir","path","cleanup","leveldownOpts","open","fn","rootDb","originalPut","originalDel","prom","ret","write","wasClosed","ForkCache","cache_1","_lookupAccount","rlp","fromRlpSerializedAccount","Deferred","deferred","promise","_abortController","_handler","_accounts","_hardfork","_setCommonFromChain","_setBlockDataFromChainAndOptions","_syncAccounts","Fork","abort_controller_1","http_handler_1","ws_handler_1","provider_handler_1","persistent_cache_1","fetchNetworkId","networkIdStr","fetchBlock","chainIdPromise","defaultHardfork","latestBlock","effectiveBlockNumber","max","preLatestConfirmations","disableCache","latestBlockNumberHex","latestBlockNumberInt","fetchNonce","forkingOptions","url","protocol","WsHandler","signal","HttpHandler","provider","ProviderHandler","cacheProm","deleteCache","PersistentCache","deleteDb","_e","fetchChainId","chainIdHex","cache","initCache","setCache","abort","selectValidForkBlockNumber","BaseHandler","rate_limiter_1","lru_cache_1","abortSignal","requestCache","fireForget","Set","requestsPerSecond","userAgent","origin","limiter","WINDOW_SECONDS","valueCache","headers","password","username","isInfura","host","endsWith","setAuthHeaders","setUserHeaders","persistentCache","jwt","authorization","permitMultiAuth","userHeaders","currentScheme","split","incomingScheme","authParams","getFromMemCache","cachedRequest","cachedValue","notFound","send","memCached","diskCached","getFromSlowCache","response","aborted","AbortError","hasOwn","finally","code","JSONRPC_PREFIX","http_1","https_1","base_handler_1","deferred_1","accept","_request","agent","Agent","keepAlive","scheduling","handleLengthedResponse","offset","messageLength","end","handleChunkedResponse","chunk","concat","hostname","port","pathname","search","requestOptions","queueRequest","req","isNaN","resStr","shortStr","msg","startsWith","warn","jsonrpc","strParams","ws_1","inFlightRequests","binaryType","connect","onclose","addEventListener","onmessage","onMessage","messageId","onopen","onerror","parts","totalLength","pieces","part","lengthBuffer","encoded","lengthLength","Ancestry","tree_1","parent","cacheLock","knownAncestors","closestKnownAncestor","resolver","node","Tree","deserialize","strKey","loadNextAncestor","getBlockByNumber","findClosestDescendants","findClosestAncestor","findRelated","resolveTargetAndClosestAncestor","setDbVersion","getBlockNumberFromParams","readStream","values","pair","height","candidateHeight","decodeKey","upTo","generator","gte","lt","encodeKey","first","return","recordedVersion","targetHeight","targetHash","closestAncestor","previousClosestAncestor","earliestBlock","earliestHash","earliestNumber","fs_1","env_paths_1","lexico","ancestry_1","helpers_1","_reBalancePromise","dbSuffix","getDbDirectory","destroy","rs","ancestorDb","tree","collection","keyHex","parentKeyHex","descendants","closestKnownDescendants","suffix","mkdir","recursive","cacheDb","ancestry","atomicBatch","findIndex","allKnownDescendants","ancestorsDescendants","descendantKey","descendantHeight","descendantValue","descendantNode","descendantRawBlock","reBalanceDescendantTree","startSize","maybeDescendant","some","parentTree","isOpen","bufKey","start","gt","hashBuf","_height","_key","dbKey","children","timeSince","LimitCounter","windowLength","counters","evict","lastEvict","updatedAt","increment","currentWindow","previousWindow","curr","prev","semaphore_1","limit_counter_1","sleep","ms","timer","removeEventListener","RateLimiter","requestLimit","windowSizeMs","sem","take","mustBackoff","counter","limitCounter","currWindow","prevWindow","currCount","prevCount","rate","nextCount","nextLimit","schedule","leave","LIMIT_EXCEEDED","backoffSeconds","backoff_seconds","allowed_rps","stateManager_1","opts","checkpoints","_getStorageTrie","checkpointDb_1","DELETED_VALUE","MetadataSingletons","LEVELDOWN_OPTIONS","isEqualKey","encodedKey","decodedKey","keyAddress","deletedKey","isPreForkBlock","accountFromFallback","codeProm","codeHex","storageFromFallback","compressed","replace","forkBlockNumber","metadata","CheckpointDB","metadataDb","_root","val","startBlockNumber","endBlockNumber","_leveldb","stream","createKeyStream","createDelKey","selfAddress","encodedKeyStr","keyValueMap","entries","lte","lock","findPath","_deleteNode","delKey","metaDataPutPromise","keyWasDeleted","includeCheckpoints","secureTrie","isCheckpoint","deriveFromIndex","deriveFromPath","createAccountFromSeed","createAccountGeneratorFromSeedAndPath","crypto_1","secp256k1_1","HARDENED_OFFSET","MASTER_SECRET","seedBuffer","I","createHmac","update","chainCode","publicKey","makePublicKey","fullPath","child","test","hardened","childIndex","deriveChild","publicKeyCreate","hdPath","SHARED_BUFFER_4","isHardened","indexBuffer","writeUInt32BE","privateKeyLength","dataLength","IL","newPrivK","privateKeyTweakAdd","min","propertyKey","descriptor","original","apply","PARTS","SQUARE_BRACKET_PAIR","SQUARE_BRACKET_OPEN","SQUARE_BRACKET_CLOSE","CURLY_BRACKET_PAIR","CURLY_BRACKET_OPEN","CURLY_BRACKET_CLOSE","COMMA","QUOTE_PAIR","COLON","NULL","_EMPTY","toStr","stringToQuotedBuffer","utf8Write","nameOrIndex","numberToBuffer","isBuffer","bufferToQuotedBuffer","arrayToBuffer","chunkified","objectToBuffer","obj","yieldedOpen","yieldPrefix","quotedKey","latestBlockNumber","bn","STIPEND","check","opname","isCall","isCallOrCallcode","isCreate","isTerminator","binSearch","callback","MAX","gasRefund","startingGas","range","lo","hi","isEnoughGas","vmerr","muln","addn","mid","divn","exactimate","steps","sysOps","allOps","preCompile","preCompileCheck","precompileCallDepth","collect","clone","isPrecompile","done","ops","systemOps","stepTracker","Context","fee","cost","sixtyFloorths","intermediateCost","sub","callingFee","compositeContext","addGas","gtn","iadd","setStart","setStop","getCost","transfer","ctx","addSixtyFloorth","sixtyFloorth","addRange","finalizeRange","isZero","innerCost","estimate","actualUsed","sysops","opIndex","cursor","currentIndex","getTotal","SERIALIZED_PRECOMPILE","Uint8Array","PRECOMPILED_ACCOUNT","accountCache","makeAccount","merkle_patricia_tree_1","SecureTrie","_currentlyExecutingPrice","_origins","_pending","_isBusy","_currentBlockBaseFeePerGas","_executables","_vm","_createBlock","_priced","_mine","_mineTxs","_runTx","_removeBestAndOrigin","_reset","_setPricedHeap","_updatePricedHeap","_setCurrentBlockBaseFeePerGas","replace_from_heap_1","updateBloom","blockBloom","sortByPrice","effectiveGasPrice","refresher","item","Miner","createBlock","Heap","lastBlock","runtimeBlock","pending","inProgress","keepMining","priced","blockTransactions","BaseTrie","finalizedBlockData","numTransactions","blockGasLeft","blockGasUsed","best","peek","locked","txKey","fillFromResult","bitvector","pendingOrigin","removeBest","Params","TRANSACTION_GAS","emitBlockProm","refresh","errorMessage","TRANSACTION_HASH","origins","mapping","price","replaceFromHeap","source","replaceBest","normalizeEvent","originalMemory","memoryLength","sharedBuffer","codeAddress","memoryWordCount","returnStack","_api","_executor","_send","_logRequest","_legacySendPayloads","_legacySendPayload","api_1","ethereum_options_1","lodash_clonedeep_1","blockchain_1","fork_1","EthereumProvider","off","arg1","arg2","verbose","payloads","mainError","responses","EthereumOptionsConfig","parseCoinbase","hookEventSystem","onChange","listenerCount","listenerAdded","eventName","listenerRemoved","getOptions","getInitialAccounts","unlocked","sendAsync","args","rawResult","execute","_priceBump","_accountPromises","_validateTransaction","TriageOption","shouldReplace","replacee","replacerNonce","replacerGasPrice","priceBump","thisPricePremium","UNDERPRICED","TRANSACTION_REJECTED","byNonce","TransactionPool","GAS_LIMIT","INVALID_INPUT","INTRINSIC_GAS_TOO_LOW","txNonce","transactorNoncePromise","highestNonce","queuedOriginTransactions","transactionPlacement","FutureQueue","executableOriginTransactions","newGasPrice","pendingArray","array","pendingTx","ReplacesPendingExecutable","REPLACED","pendingTxNonce","Executable","transactor","transactorNonce","queuedArray","queuedTx","ReplacesFutureTransaction","fakePrivateKey","ACCOUNT_ZERO","nextExpectedNonce","nextTx","arr","_randomRng","_randomBytes","_initializeAccounts","_lockAccount","hdkey_1","bip39_1","seedrandom_1","keccak_1","SCRYPT_PARAMS","dklen","n","CIPHER","scrypt","derivedKey","SHARED_BUFFER","uncompressedPublicKeyToAddress","uncompressedPublicKey","publicKeyConvert","asUUID","uuid","Wallet","lockTimers","rand","makeAccountAtIndex","mnemonicToSeedSync","mnemonic","balanceParts","defaultBalance","significand","fractionalStr","fractional","magnitude","defaultBalanceInWei","WEI","etherInWei","accountsLength","givenAccounts","createAccount","numberOfAccounts","totalAccounts","alea","givenUnlockedAccounts","ul","addressOrIndex","indexOf","isSafeInteger","accountsCache","secure","accountKeysPath","fileData","private_keys","writeFileSync","random","salt","iv","N","cipher","createCipheriv","ciphertext","final","mac","crypto","cipherparams","kdf","kdfParams","keyfile","crypt","localMac","createDecipheriv","privateToAddress","seed","acct","existingTimer","durationMs","timeout","ChainOptions","cliDescription","legacyName","cliType","asyncRequestProcessing","defaultDescription","cliAliases","rawInput","cliChoices","DatabaseOptions","disableInCLI","conflicts","ForkOptions","url_1","MAX_BLOCK_NUMBER","MAX_SAFE_INTEGER","reColonSplit","coerceHeaders","ALLOWED_PROTOCOLS","URL","lastIndex","lastIndexOf","substr","asNum","_blockNumber","includes","conjunction","last","arrayToOxfordList","implies","cliCoerce","reduce","EthereumDefaults","chain_options_1","database_options_1","logging_options_1","miner_options_1","wallet_options_1","fork_options_1","options_1","LoggingOptions","MinerOptions","WalletOptions","OptionsConfig","debug","quiet","toBigIntOrString","rawType","unseededRng","randomAlphaNumericString","alphabet","alphabetLength","rng","text","accountString","config","deterministic","DeterministicSeedPhrase","entropyToMnemonic","notVeryRandomBytes","AccessLists","tx_1","params_1","accessList","AccessListJSON","bufferAccessList","slots","accessListStorageKeyCost","ACCESS_LIST_STORAGE_KEY_GAS","accessListAddressCost","ACCESS_LIST_ADDRESS_GAS","isAccessList","newAccessList","addressBuffer","storageItems","storageKeysLength","jsonItem","dataFeeEIP2930","BaseTransaction","MAX_UINT64","TRANSACTION_CREATION","byteLength","TRANSACTION_DATA_NON_ZERO_GAS","TRANSACTION_DATA_ZERO_GAS","nonZeroBytes","zeroBytes","setExtra","EIP1559FeeMarketTransaction","runtime_transaction_1","access_lists_1","signing_1","CAPABILITIES","RuntimeTransaction","accessListData","getAccessListData","accessListJSON","encodedData","encodedSignature","computeIntrinsics","chainIdBN","validateAndSetSignature","sender","getSenderAddress","getBaseFee","getUpfrontCost","baseFee","maxPriorityFeePerGasBN","maxFeePerGasBN","gasLimitBN","valueBN","mul","supports","capability","typeBuf","sig","msgHash","object","signature","recid","ecdsaSign","computeIntrinsicsFeeMarketTx","EIP2930AccessListTransaction","accessListDataFee","computeIntrinsicsAccessListTx","LegacyTransaction","ethereumjs_util_2","computeIntrinsicsLegacyTx","hasPartialSignature","toValidLengthAddress","base_transaction_1","transaction_receipt_1","fieldName","ONE_BUFFER","finalizer","userFrom","finalized","txAndExtraData","vmResult","createdAddress","_event","computeFromAddress","ecdsaRecover","isValidSigRecovery","copyOrFill","targetStart","numZeroes","endZeroes","sourceOffset","recovery","_ecdsaRecover","rBuf","sBuf","partialRlp","eip155V","extras","epilogue","senderPubKey","TransactionType","legacy_transaction_1","eip2930_access_list_transaction_1","eip1559_fee_market_transaction_1","txData","txType","fromTxData","Legacy","EIP2930AccessList","EIP1559AccessList","toEIP1559","INVALID_PARAMS","typeOfRPC","_fromData","typeOfRaw","typeOf","_gasUsed","_init","STATUSES","decoded","blockLog","captureStackTraceExtended","codedError","writable","configurable","captureStackTrace","nonEnumerableProperty","NONCE_TOO_LOW","INVALID_SENDER","errors_1","ethereumjs_abi_1","coded_error_1","REVERT_REASON","returnType","rawDecode","Symbol","_logs","filterByTopic","expectedTopics","logTopics","every","expectedTopic","logPosition","expectedTopicSet","logTopic","logIndex","removed","iterator","logToJSON","expectedAddresses","_Tag","toUpperCase","PREFIXES","traceDataLookup","bufferToMinHexKey","existing","lengthDiff","FilecoinDefaults","FilecoinOptionsConfig","src_1","src_2","ipfsHost","ipfsPort","TruffleColors","porsche","turquoise","server","_DefaultServerOptions","ServerStatus","Server","connector_loader_1","server_1","server_2","Ganache","connector","flavors_1","flavors_2","flavor","DefaultFlavor","requestCoordinator","RequestCoordinator","Executor","GetConnector","connectPromise","serverOptionsConfig","serverDefaults","server_options_1","ServerOptions","ws","wsBinary","rpcEndpoint","FilecoinFlavorName","_providerOptions","_status","_app_1","_httpServer","_listenSocket_1","_connector","_websocketServer","_initializer","shim","aggregate_error_1","uws_js_unofficial_1","_cfg","ws_server_1","http_server_1","providerAndServerOptions","unknown","ready","loader","_app","App","listen","callbackIsFunction","closing","openingOrOpen","opening","allSettled","listenSocket","closed","promiseResults","closingOrClosed","_listenSocket","us_listen_socket_close","_handlePost","_handleOptions","content_types_1","http_response_codes_1","util_1","prepareCORSResponseHeaders","getHeader","acrh","writeHeader","sendResponse","statusCode","contentType","writeHeaders","cork","writeStatus","HttpServer","app","onAborted","onData","isLast","BAD_REQUEST","PLAIN","isGeneratorObject","OK","datum","NO_CONTENT","post","IM_A_TEAPOT","any","connectionHeader","NOT_FOUND","ContentTypes","HttpResponseCodes","WebSocketCloseCodes","_connections","MAX_PAYLOAD_SIZE","websocket_close_codes_1","WebsocketServer","connections","autoBinary","maxPayloadLength","idleTimeout","isBinary","useBinary","resultEmitter","resultEmitterPromiEvent","dispose","localData","shouldCompress","sendFirstFragment","sendFragment","sendLastFragment","CLOSE_NORMAL","webpackContext","webpackContextResolve","__webpack_require__","webpackContextKeys","module","DefaultOptionsByName","EthereumFlavorName","ethereum_1","filecoin_options_1","colors_1","chalk_1","NEED_HELP","COMMUNITY_LINK","f","eval","exit","webpackEmptyContext","_defaults","_namespaces","checkForConflicts","namespace","suppliedOptions","conflict","defaults","out","def","namespaceOptions","propDefinition","normalized","_tryResolve","_tryResolveChain","entry_1","PromiseQueue","queue","entry","shift","resolved","cancelledQueue","mixin","for","Entry","onSetteled","_onSetteled","getLength","enc","encodedLength","encLength","len","hexLength","lLength","firstByte","items","count","ranges","lengthEncodedLength","j","path_1","secp256k1","nodeRequire","dirname","nodeGypBuild","Secp256k1","makeRequest","jsonrpc_1","promievent_1","toBigIntBE","toBufferBE","bigint_buffer_1","BaseJsonRpcType","toBuffers","toStrings","bufCache","strCache","constants_1","inspect","self","toStringTag","bigIntToBuffer","fixedValue","_depth","json_rpc_base_types_1","json_rpc_base_types_2","validateByteLength","byteLengths","strLength","padBy","repeat","_nullable","nullable","q","bigInt","bufferToBigInt","details","getOwnPropertyNames","PromiEvent_1","emitteryMethods","methodName","onrejected","onAny","eventData","uint_to_buffer_1","_bigIntToBuffer","bigIntByteLength","readUIntBE","view","padded","DataView","byteOffset","getBigUint64","latin1Slice","hexSlice","HEX_MAP","json_rpc_data_1","json_rpc_quantity_1","_requestCoordinator","has_own_1","api","__proto__","comp","insertPosition","step","_hasOwn","prop","less","down","up","element","newLength","newValue","fix","remove","swap","i0","j1","j2","heap","instance","absorb","squeeze","_finalized","RandomNumberGenerator","entropy","getNumber","upperExclusiveBound","getNumbers","numbers","getBuffer","_process","runningTasks","thisArgument","argumentsList","MAX_UINT32","num","uintWideToBuf","hiLsb","six","five","lsb","two","one","uint32ToBuf","second","third"],"mappings":"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","file":"1.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nclass Address extends utils_1.Data {\n    /**\n     *\n     * @param value\n     * @param byteLength the exact length the value represents when encoded as\n     * Ethereum JSON-RPC DATA.\n     */\n    constructor(value) {\n        super(value, Address.ByteLength);\n    }\n    static from(value) {\n        return new Address(value);\n    }\n}\nexports.Address = Address;\nAddress.ByteLength = 20;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/block\"), exports);\n__exportStar(require(\"./src/runtime-block\"), exports);\n__exportStar(require(\"./src/snapshots\"), exports);\n__exportStar(require(\"./src/serialize\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// NOTE these params may need to be changed at each hardfork\n// they can be tracked here: https://github.com/ethereumjs/ethereumjs-vm/blob/master/packages/common/src/hardforks/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockParams = void 0;\nexports.BlockParams = {\n    /**\n     *  Base fee per gas for blocks without a parent containing a base fee per gas.\n     */\n    INITIAL_BASE_FEE_PER_GAS: 1000000000n,\n    /**\n     * Divisor used to set a block's target gas usage.\n     */\n    ELASTICITY: 2n,\n    /**\n     * Divisor used to limit the amount the base fee per gas can change from one block to another.\n     */\n    BASE_FEE_MAX_CHANGE_DENOMINATOR: 8n\n};\n//# sourceMappingURL=block-params.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Block = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst runtime_block_1 = require(\"./runtime-block\");\nconst utils_2 = require(\"@ganache/utils\");\nconst block_params_1 = require(\"./block-params\");\nclass Block {\n    constructor(serialized, common) {\n        this._common = common;\n        if (serialized) {\n            const deserialized = rlp_1.decode(serialized);\n            this._raw = deserialized[0];\n            this._rawTransactions = deserialized[1] || [];\n            // TODO: support actual uncle data (needed for forking!)\n            // Issue: https://github.com/trufflesuite/ganache/issues/786\n            // const uncles = deserialized[2];\n            const totalDifficulty = deserialized[3];\n            this.header = runtime_block_1.makeHeader(this._raw, totalDifficulty);\n            this._rawTransactionMetaData = deserialized[4] || [];\n            this._size = utils_1.Quantity.from(deserialized[5]).toNumber();\n        }\n    }\n    hash() {\n        return (this._hash || (this._hash = utils_1.Data.from(utils_2.keccak(rlp_1.encode(this._raw)), 32)));\n    }\n    getTransactions() {\n        const common = this._common;\n        return this._rawTransactions.map((raw, index) => {\n            const [from, hash] = this._rawTransactionMetaData[index];\n            const extra = [\n                from,\n                hash,\n                this.hash().toBuffer(),\n                this.header.number.toBuffer(),\n                utils_1.Quantity.from(index).toBuffer()\n            ];\n            return ethereum_transaction_1.TransactionFactory.fromDatabaseTx(raw, common, extra);\n        });\n    }\n    toJSON(includeFullTransactions = false) {\n        const hash = this.hash();\n        const txFn = this.getTxFn(includeFullTransactions);\n        const hashBuffer = hash.toBuffer();\n        const header = this.header;\n        const number = header.number.toBuffer();\n        const common = this._common;\n        const jsonTxs = this._rawTransactions.map((raw, index) => {\n            const [from, hash] = this._rawTransactionMetaData[index];\n            const extra = [\n                from,\n                hash,\n                hashBuffer,\n                number,\n                utils_1.Quantity.from(index).toBuffer()\n            ];\n            const tx = ethereum_transaction_1.TransactionFactory.fromDatabaseTx(raw, common, extra);\n            // we could either parse the raw data to check if the tx is type 2,\n            // get the maxFeePerGas and maxPriorityFeePerGas, use those to calculate\n            // the effectiveGasPrice and add it to `extra` above, or we can just\n            // leave it out of extra and update the effectiveGasPrice after like this\n            tx.updateEffectiveGasPrice(header.baseFeePerGas);\n            return txFn(tx);\n        });\n        return {\n            hash,\n            ...header,\n            size: utils_1.Quantity.from(this._size),\n            transactions: jsonTxs,\n            uncles: [] // this.value.uncleHeaders.map(function(uncleHash) {return to.hex(uncleHash)})\n        };\n    }\n    getTxFn(include = false) {\n        if (include) {\n            return (tx) => tx.toJSON(this._common);\n        }\n        else {\n            return (tx) => tx.hash;\n        }\n    }\n    static fromParts(rawHeader, txs, totalDifficulty, extraTxs, size, common) {\n        const block = new Block(null, common);\n        block._raw = rawHeader;\n        block._rawTransactions = txs;\n        block.header = runtime_block_1.makeHeader(rawHeader, totalDifficulty);\n        block._rawTransactionMetaData = extraTxs;\n        block._size = size;\n        return block;\n    }\n    static calcNextBaseFeeBigInt(parentHeader) {\n        let nextBaseFee;\n        const header = parentHeader;\n        const parentGasTarget = header.gasLimit.toBigInt() / block_params_1.BlockParams.ELASTICITY;\n        const parentGasUsed = header.gasUsed.toBigInt();\n        const baseFeePerGas = header.baseFeePerGas\n            ? header.baseFeePerGas.toBigInt()\n            : block_params_1.BlockParams.INITIAL_BASE_FEE_PER_GAS;\n        if (parentGasTarget === parentGasUsed) {\n            // If the parent gasUsed is the same as the target, the baseFee remains unchanged.\n            nextBaseFee = baseFeePerGas;\n        }\n        else if (parentGasUsed > parentGasTarget) {\n            // If the parent block used more gas than its target, the baseFee should increase.\n            const gasUsedDelta = parentGasUsed - parentGasTarget;\n            const adjustedFeeDelta = (baseFeePerGas * gasUsedDelta) /\n                parentGasTarget /\n                block_params_1.BlockParams.BASE_FEE_MAX_CHANGE_DENOMINATOR;\n            if (adjustedFeeDelta > 1n) {\n                nextBaseFee = baseFeePerGas + adjustedFeeDelta;\n            }\n            else {\n                nextBaseFee = baseFeePerGas + 1n;\n            }\n        }\n        else {\n            // Otherwise if the parent block used less gas than its target, the baseFee should decrease.\n            const gasUsedDelta = parentGasTarget - parentGasUsed;\n            const adjustedFeeDelta = (baseFeePerGas * gasUsedDelta) /\n                parentGasTarget /\n                block_params_1.BlockParams.BASE_FEE_MAX_CHANGE_DENOMINATOR;\n            nextBaseFee = baseFeePerGas - adjustedFeeDelta;\n        }\n        return nextBaseFee;\n    }\n    static calcNBlocksMaxBaseFee(blocks, parentHeader) {\n        const { BASE_FEE_MAX_CHANGE_DENOMINATOR } = block_params_1.BlockParams;\n        let maxPossibleBaseFee = this.calcNextBaseFeeBigInt(parentHeader);\n        // we must calculate each future block's max base fee individually because\n        // each block's base fee must be appropriately \"floored\" (Math.floor) before\n        // the following block's base fee is calculated. If we don't do this we'll\n        // end up with compounding rounding errors.\n        // FYI: the more performant, but rounding error-prone, way is:\n        // return lastMaxBlockBaseFee + (lastMaxBlockBaseFee * ((BASE_FEE_MAX_CHANGE_DENOMINATOR-1)**(blocks-1)) / ((BASE_FEE_MAX_CHANGE_DENOMINATOR)**(blocks-1)))\n        while (--blocks) {\n            maxPossibleBaseFee +=\n                maxPossibleBaseFee / BASE_FEE_MAX_CHANGE_DENOMINATOR;\n        }\n        return maxPossibleBaseFee;\n    }\n    static calcNextBaseFee(parentBlock) {\n        const header = parentBlock.header;\n        if (header.baseFeePerGas === undefined) {\n            return undefined;\n        }\n        else {\n            return this.calcNextBaseFeeBigInt(header);\n        }\n    }\n}\nexports.Block = Block;\n/**\n *  Base fee per gas for blocks without a parent containing a base fee per gas.\n */\nBlock.INITIAL_BASE_FEE_PER_GAS = block_params_1.BlockParams.INITIAL_BASE_FEE_PER_GAS;\n//# sourceMappingURL=block.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RuntimeBlock = exports.makeHeader = exports.getBlockSize = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst serialize_1 = require(\"./serialize\");\nconst block_1 = require(\"./block\");\n/**\n * BN, but with an extra `buf` property that caches the original Buffer value\n * we pass in.\n */\nclass BnExtra extends ethereumjs_util_1.BN {\n    constructor(number) {\n        super(number, 10, \"be\");\n        this.buf = number;\n    }\n}\n/**\n * Returns the size of the serialized data as it would have been calculated had\n * we stored things geth does, i.e., `totalDfficulty` is not usually stored in\n * the block header.\n *\n * @param serialized\n * @param totalDifficulty\n */\nfunction getBlockSize(serialized, totalDifficulty) {\n    return serialized.length - totalDifficulty.length;\n}\nexports.getBlockSize = getBlockSize;\nfunction makeHeader(raw, totalDifficulty) {\n    return {\n        parentHash: utils_1.Data.from(raw[0], 32),\n        sha3Uncles: utils_1.Data.from(raw[1], 32),\n        miner: utils_1.Data.from(raw[2], 20),\n        stateRoot: utils_1.Data.from(raw[3], 32),\n        transactionsRoot: utils_1.Data.from(raw[4], 32),\n        receiptsRoot: utils_1.Data.from(raw[5], 32),\n        logsBloom: utils_1.Data.from(raw[6], 256),\n        difficulty: utils_1.Quantity.from(raw[7], false),\n        number: utils_1.Quantity.from(raw[8], false),\n        gasLimit: utils_1.Quantity.from(raw[9], false),\n        gasUsed: utils_1.Quantity.from(raw[10], false),\n        timestamp: utils_1.Quantity.from(raw[11], false),\n        extraData: utils_1.Data.from(raw[12]),\n        mixHash: utils_1.Data.from(raw[13], 32),\n        nonce: utils_1.Data.from(raw[14], 8),\n        totalDifficulty: utils_1.Quantity.from(totalDifficulty, false),\n        baseFeePerGas: raw[15] === undefined ? undefined : utils_1.Quantity.from(raw[15], false)\n    };\n}\nexports.makeHeader = makeHeader;\n/**\n * A minimal block that can be used by the EVM to run transactions.\n */\nclass RuntimeBlock {\n    constructor(number, parentHash, coinbase, gasLimit, gasUsed, timestamp, difficulty, previousBlockTotalDifficulty, baseFeePerGas) {\n        this.serializeBaseFeePerGas = true;\n        const ts = timestamp.toBuffer();\n        const coinbaseBuffer = coinbase.toBuffer();\n        this.header = {\n            parentHash: parentHash.toBuffer(),\n            coinbase: { buf: coinbaseBuffer, toBuffer: () => coinbaseBuffer },\n            number: new BnExtra(number.toBuffer()),\n            difficulty: new BnExtra(difficulty.toBuffer()),\n            totalDifficulty: utils_1.Quantity.from(previousBlockTotalDifficulty.toBigInt() + difficulty.toBigInt()).toBuffer(),\n            gasLimit: new BnExtra(gasLimit),\n            gasUsed: new BnExtra(gasUsed),\n            timestamp: new BnExtra(ts),\n            baseFeePerGas: baseFeePerGas === undefined\n                ? new BnExtra(utils_1.BUFFER_ZERO)\n                : new BnExtra(utils_1.Quantity.from(baseFeePerGas).toBuffer())\n        };\n        // When forking we might get a block that doesn't have a baseFeePerGas value,\n        // but EIP-1559 might be active on our chain. We need to keep track on if\n        // we should serialize the baseFeePerGas value or not based on that info.\n        // this will be removed as part of https://github.com/trufflesuite/ganache/pull/1537\n        if (baseFeePerGas === undefined)\n            this.serializeBaseFeePerGas = false;\n    }\n    /**\n     * Returns the serialization of all block data, the hash of the block header,\n     * and a map of the hashed and raw storage keys\n     */\n    finalize(transactionsTrie, receiptTrie, bloom, stateRoot, gasUsed, extraData, transactions, storageKeys) {\n        const { header } = this;\n        const rawHeader = [\n            header.parentHash,\n            ethereumjs_util_1.KECCAK256_RLP_ARRAY,\n            header.coinbase.buf,\n            stateRoot,\n            transactionsTrie,\n            receiptTrie,\n            bloom,\n            header.difficulty.buf,\n            header.number.buf,\n            header.gasLimit.buf,\n            gasUsed === 0n ? utils_1.BUFFER_EMPTY : utils_1.Quantity.from(gasUsed).toBuffer(),\n            header.timestamp.buf,\n            extraData.toBuffer(),\n            utils_1.BUFFER_32_ZERO,\n            utils_1.BUFFER_8_ZERO // nonce\n        ];\n        if (this.serializeBaseFeePerGas && header.baseFeePerGas !== undefined) {\n            rawHeader[15] = header.baseFeePerGas.buf;\n        }\n        const { totalDifficulty } = header;\n        const txs = [];\n        const extraTxs = [];\n        transactions.forEach(tx => {\n            txs.push(tx.raw);\n            extraTxs.push([tx.from.toBuffer(), tx.hash.toBuffer()]);\n        });\n        const { serialized, size } = serialize_1.serialize([\n            rawHeader,\n            txs,\n            [],\n            totalDifficulty,\n            extraTxs\n        ]);\n        // make a new block, but pass `null` so it doesn't do the extra\n        // deserialization work since we already have everything in a deserialized\n        // state here. We'll just set it ourselves by reaching into the \"_private\"\n        // fields.\n        const block = new block_1.Block(null, \n        // TODO(hack)!\n        transactions.length > 0 ? transactions[0].common : null);\n        block._raw = rawHeader;\n        block._rawTransactions = txs;\n        block.header = makeHeader(rawHeader, totalDifficulty);\n        block.serializeBaseFeePerGas = rawHeader[15] === undefined;\n        block._rawTransactionMetaData = extraTxs;\n        block._size = size;\n        return {\n            block,\n            serialized,\n            storageKeys,\n            transactions\n        };\n    }\n}\nexports.RuntimeBlock = RuntimeBlock;\n//# sourceMappingURL=runtime-block.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serialize = void 0;\nconst rlp_1 = require(\"@ganache/rlp\");\nconst utils_1 = require(\"@ganache/utils\");\nfunction serialize(raw) {\n    const serializedStart = rlp_1.encodeRange(raw, 0, 3);\n    const serializedLength = serializedStart.length;\n    const ethereumRawBlockSize = rlp_1.encodeLength(serializedLength, 192).length;\n    const size = ethereumRawBlockSize + serializedLength;\n    const middle = rlp_1.encodeRange(raw, 3, 2);\n    const ending = rlp_1.encode(utils_1.uintToBuffer(size));\n    return {\n        serialized: rlp_1.digest([serializedStart.output, middle.output, [ending]], serializedLength + middle.length + ending.length),\n        size\n    };\n}\nexports.serialize = serialize;\n//# sourceMappingURL=serialize.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=snapshots.js.map","\"use strict\";\n/*!\n * @ganache/ethereum\n *\n * @author David Murdoch <david@trufflesuite.com> (https://davidmurdoch.com)\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/connector\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _getId, _filters, _subscriptions, _options, _blockchain, _wallet;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//#region Imports\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereum_block_1 = require(\"@ganache/ethereum-block\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst eth_sig_util_1 = require(\"eth-sig-util\");\nconst utils_1 = require(\"@ganache/utils\");\nconst wallet_1 = __importDefault(require(\"./wallet\"));\nconst gas_estimator_1 = __importDefault(require(\"./helpers/gas-estimator\"));\nconst assert_arg_length_1 = require(\"./helpers/assert-arg-length\");\nconst filter_parsing_1 = require(\"./helpers/filter-parsing\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst miner_1 = require(\"./miner/miner\");\nasync function autofillDefaultTransactionValues(tx, eth_estimateGas, transaction, blockchain, options) {\n    if (tx.gas.isNull()) {\n        const defaultLimit = options.miner.defaultTransactionGasLimit;\n        if (defaultLimit === utils_1.RPCQUANTITY_EMPTY) {\n            // if the default limit is `RPCQUANTITY_EMPTY` use a gas estimate\n            tx.gas = await eth_estimateGas(transaction, ethereum_utils_1.Tag.LATEST);\n        }\n        else {\n            tx.gas = defaultLimit;\n        }\n    }\n    if (\"gasPrice\" in tx && tx.gasPrice.isNull()) {\n        tx.gasPrice = options.miner.defaultGasPrice;\n    }\n    if (\"maxFeePerGas\" in tx && tx.maxFeePerGas.isNull()) {\n        const block = blockchain.blocks.latest;\n        tx.maxFeePerGas = utils_1.Quantity.from(ethereum_block_1.Block.calcNBlocksMaxBaseFee(3, block.header));\n    }\n}\n// Read in the current ganache version from core's package.json\nconst { version } = { \"version\": \"7.0.0-alpha.1\" };\n//#endregion\n//#region Constants\nconst CLIENT_VERSION = `Ganache/v${version}/EthereumJS TestRPC/v${version}/ethereum-js`;\nconst PROTOCOL_VERSION = utils_1.Data.from(\"0x3f\");\nconst RPC_MODULES = {\n    eth: \"1.0\",\n    net: \"1.0\",\n    rpc: \"1.0\",\n    web3: \"1.0\",\n    evm: \"1.0\",\n    personal: \"1.0\"\n};\n//#endregion\n//#region helpers\nfunction assertExceptionalTransactions(transactions) {\n    let baseError = null;\n    let errors;\n    const data = {};\n    transactions.forEach(transaction => {\n        if (transaction.execException) {\n            if (baseError) {\n                baseError = ethereum_utils_1.VM_EXCEPTIONS;\n                errors.push(`${transaction.hash.toString()}: ${transaction.execException}\\n`);\n                data[transaction.execException.data.hash] =\n                    transaction.execException.data;\n            }\n            else {\n                baseError = ethereum_utils_1.VM_EXCEPTION;\n                errors = [transaction.execException.message];\n                data[transaction.execException.data.hash] =\n                    transaction.execException.data;\n            }\n        }\n    });\n    if (baseError) {\n        const err = new Error(baseError + errors.join(\"\\n\"));\n        err.data = data;\n        throw err;\n    }\n}\n//#endregion helpers\nclass EthereumApi {\n    /**\n     * This is the Ethereum API that the provider interacts with.\n     * The only methods permitted on the prototype are the supported json-rpc\n     * methods.\n     * @param options\n     * @param wallet\n     * @param emitter\n     */\n    constructor(options, wallet, blockchain) {\n        _getId.set(this, (id => () => utils_1.Quantity.from(++id))(0));\n        _filters.set(this, new Map());\n        _subscriptions.set(this, new Map());\n        _options.set(this, void 0);\n        _blockchain.set(this, void 0);\n        _wallet.set(this, void 0);\n        __classPrivateFieldSet(this, _options, options);\n        __classPrivateFieldSet(this, _wallet, wallet);\n        __classPrivateFieldSet(this, _blockchain, blockchain);\n    }\n    //#region db\n    /**\n     * Stores a string in the local database.\n     *\n     * @param dbName - Database name.\n     * @param key - Key name.\n     * @param value - String to store.\n     * @returns returns true if the value was stored, otherwise false.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"db_putString\", [\"testDb\", \"testKey\", \"testValue\"] ));\n     * ```\n     */\n    async db_putString(dbName, key, value) {\n        return false;\n    }\n    /**\n     * Returns string from the local database.\n     *\n     * @param dbName - Database name.\n     * @param key - Key name.\n     * @returns The previously stored string.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"db_getString\", [\"testDb\", \"testKey\"] ));\n     * ```\n     */\n    async db_getString(dbName, key) {\n        return \"\";\n    }\n    /**\n     * Stores binary data in the local database.\n     *\n     * @param dbName - Database name.\n     * @param key - Key name.\n     * @param data - Data to store.\n     * @returns true if the value was stored, otherwise false.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"db_putHex\", [\"testDb\", \"testKey\", \"0x0\"] ));\n     * ```\n     */\n    async db_putHex(dbName, key, data) {\n        return false;\n    }\n    /**\n     * Returns binary data from the local database.\n     *\n     * @param dbName - Database name.\n     * @param key - Key name.\n     * @returns The previously stored data.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"db_getHex\", [\"testDb\", \"testKey\"] ));\n     * ```\n     */\n    async db_getHex(dbName, key) {\n        return \"0x00\";\n    }\n    //#endregion\n    //#region bzz\n    /**\n     * Returns the kademlia table in a readable table format.\n     * @returns Returns the kademlia table in a readable table format.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"bzz_hive\"));\n     * ```\n     */\n    async bzz_hive() {\n        return [];\n    }\n    /**\n     * Returns details about the swarm node.\n     * @returns Returns details about the swarm node.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"bzz_info\"));\n     * ```\n     */\n    async bzz_info() {\n        return [];\n    }\n    async evm_mine(arg) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const vmErrorsOnRPCResponse = __classPrivateFieldGet(this, _options).chain.vmErrorsOnRPCResponse;\n        // Since `typeof null === \"object\"` we have to guard against that\n        if (arg !== null && typeof arg === \"object\") {\n            let { blocks, timestamp } = arg;\n            if (blocks == null) {\n                blocks = 1;\n            }\n            // TODO(perf): add an option to mine a bunch of blocks in a batch so\n            // we can save them all to the database in one go.\n            // Developers like to move the blockchain forward by thousands of blocks\n            // at a time and doing this would make it way faster\n            for (let i = 0; i < blocks; i++) {\n                const transactions = await blockchain.mine(miner_1.Capacity.FillBlock, timestamp, true);\n                if (vmErrorsOnRPCResponse) {\n                    assertExceptionalTransactions(transactions);\n                }\n            }\n        }\n        else {\n            const transactions = await blockchain.mine(miner_1.Capacity.FillBlock, arg, true);\n            if (vmErrorsOnRPCResponse) {\n                assertExceptionalTransactions(transactions);\n            }\n        }\n        return \"0x0\";\n    }\n    /**\n     * Sets the given account's nonce to the specified value. Mines a new block\n     * before returning.\n     *\n     * Warning: this will result in an invalid state tree.\n     *\n     * @param address - The account address to update.\n     * @param nonce - The nonce value to be set.\n     * @returns `true` if it worked, otherwise `false`.\n     * @example\n     * ```javascript\n     * const nonce = \"0x3e8\";\n     * const [address] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const result = await provider.send(\"evm_setAccountNonce\", [address, nonce] );\n     * console.log(result);\n     * ```\n     */\n    async evm_setAccountNonce(address, nonce) {\n        // TODO: the effect of this function could happen during a block mine operation, which would cause all sorts of\n        // issues. We need to figure out a good way of timing this.\n        const buffer = ethereum_address_1.Address.from(address).toBuffer();\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const stateManager = blockchain.vm.stateManager;\n        const account = await stateManager.getAccount({ buf: buffer });\n        account.nonce = {\n            toArrayLike: () => utils_1.Quantity.from(nonce).toBuffer()\n        };\n        await stateManager.putAccount({ buf: buffer }, account);\n        // TODO: do we need to mine a block here? The changes we're making really don't make any sense at all\n        // and produce an invalid trie going forward.\n        await blockchain.mine(miner_1.Capacity.Empty);\n        return true;\n    }\n    /**\n     * Jump forward in time by the given amount of time, in seconds.\n     * @param seconds Number of seconds to jump forward in time by. Must be greater than or equal to `0`.\n     * @returns Returns the total time adjustment, in seconds.\n     * @example\n     * ```javascript\n     * const seconds = 10;\n     * const timeAdjustment = await provider.send(\"evm_increaseTime\", [seconds] );\n     * console.log(timeAdjustment);\n     * ```\n     */\n    async evm_increaseTime(seconds) {\n        const milliseconds = (typeof seconds === \"number\"\n            ? seconds\n            : utils_1.Quantity.from(seconds).toNumber()) * 1000;\n        return Math.floor(__classPrivateFieldGet(this, _blockchain).increaseTime(milliseconds) / 1000);\n    }\n    /**\n     * Sets the internal clock time to the given timestamp.\n     *\n     * Warning: This will allow you to move *backwards* in time, which may cause\n     * new blocks to appear to be mined before old blocks. This is will result in\n     * an invalid state.\n     *\n     * @param time JavaScript timestamp (millisecond precision).\n     * @returns The amount of *seconds* between the given timestamp and now.\n     * @example\n     * ```javascript\n     * const currentDate = Date.now();\n     * setTimeout(async () => {\n     *   const time = await provider.send(\"evm_setTime\", [currentDate] );\n     *   console.log(time); // should be about two seconds ago\n     * }, 1000);\n     * ```\n     */\n    async evm_setTime(time) {\n        let t;\n        switch (typeof time) {\n            case \"object\":\n                t = time.getTime();\n                break;\n            case \"number\":\n                t = time;\n                break;\n            default:\n                t = utils_1.Quantity.from(time).toNumber();\n                break;\n        }\n        return Math.floor(__classPrivateFieldGet(this, _blockchain).setTime(t) / 1000);\n    }\n    /**\n     * Revert the state of the blockchain to a previous snapshot. Takes a single\n     * parameter, which is the snapshot id to revert to. This deletes the given\n     * snapshot, as well as any snapshots taken after (e.g.: reverting to id 0x1\n     * will delete snapshots with ids 0x1, 0x2, etc.)\n     *\n     * @param snapshotId The snapshot id to revert.\n     * @returns `true` if a snapshot was reverted, otherwise `false`.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.send(\"eth_accounts\");\n     * const startingBalance = BigInt(await provider.send(\"eth_getBalance\", [from] ));\n     *\n     * // take a snapshot\n     * const snapshotId = await provider.send(\"evm_snapshot\");\n     *\n     * // send value to another account (over-simplified example)\n     * await provider.send(\"eth_subscribe\", [\"newHeads\"] );\n     * await provider.send(\"eth_sendTransaction\", [{from, to, value: \"0xffff\"}] );\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * // ensure balance has updated\n     * const newBalance = await provider.send(\"eth_getBalance\", [from] );\n     * assert(BigInt(newBalance) < startingBalance);\n     *\n     * // revert the snapshot\n     * const isReverted = await provider.send(\"evm_revert\", [snapshotId] );\n     * assert(isReverted);\n     * console.log({isReverted: isReverted});\n     *\n     * // ensure balance has reverted\n     * const endingBalance = await provider.send(\"eth_getBalance\", [from] );\n     * const isBalanceReverted = assert.strictEqual(BigInt(endingBalance), startingBalance);\n     * console.log({isBalanceReverted: isBalanceReverted});\n     * ```\n     */\n    async evm_revert(snapshotId) {\n        return __classPrivateFieldGet(this, _blockchain).revert(utils_1.Quantity.from(snapshotId));\n    }\n    /**\n     * Snapshot the state of the blockchain at the current block. Takes no\n     * parameters. Returns the id of the snapshot that was created. A snapshot can\n     * only be reverted once. After a successful `evm_revert`, the same snapshot\n     * id cannot be used again. Consider creating a new snapshot after each\n     * `evm_revert` if you need to revert to the same point multiple times.\n     *\n     * @returns The hex-encoded identifier for this snapshot.\n     *\n     * @example\n     * ```javascript\n     * const provider = ganache.provider();\n     * const [from, to] = await provider.send(\"eth_accounts\");\n     * const startingBalance = BigInt(await provider.send(\"eth_getBalance\", [from] ));\n     *\n     * // take a snapshot\n     * const snapshotId = await provider.send(\"evm_snapshot\");\n     *\n     * // send value to another account (over-simplified example)\n     * await provider.send(\"eth_subscribe\", [\"newHeads\"] );\n     * await provider.send(\"eth_sendTransaction\", [{from, to, value: \"0xffff\"}] );\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * // ensure balance has updated\n     * const newBalance = await provider.send(\"eth_getBalance\", [from] );\n     * assert(BigInt(newBalance) < startingBalance);\n     *\n     * // revert the snapshot\n     * const isReverted = await provider.send(\"evm_revert\", [snapshotId] );\n     * assert(isReverted);\n     *\n     * // ensure balance has reverted\n     * const endingBalance = await provider.send(\"eth_getBalance\", [from] );\n     * const isBalanceReverted = assert.strictEqual(BigInt(endingBalance), startingBalance);\n     * console.log({isBalanceReverted: isBalanceReverted});\n     * ```\n     */\n    async evm_snapshot() {\n        return utils_1.Quantity.from(__classPrivateFieldGet(this, _blockchain).snapshot());\n    }\n    /**\n     * Unlocks any unknown account.\n     *\n     * Note: accounts known to the `personal` namespace and accounts returned by\n     * `eth_accounts` cannot be unlocked using this method.\n     *\n     * @param address The address of the account to unlock.\n     * @param duration (Default: disabled) Duration in seconds how long the account\n     * should remain unlocked for. Set to 0 to disable automatic locking.\n     * @returns `true` if the account was unlocked successfully, `false` if the\n     * account was already unlocked. Throws an error if the account could not be\n     * unlocked.\n     * @example\n     * ```javascript\n     * const address = \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\";\n     * const result = await provider.send(\"evm_unlockUnknownAccount\", [address] );\n     * console.log(result);\n     * ```\n     */\n    async evm_unlockUnknownAccount(address, duration = 0) {\n        return __classPrivateFieldGet(this, _wallet).unlockUnknownAccount(address.toLowerCase(), duration);\n    }\n    /**\n     * Locks any unknown account.\n     *\n     * Note: accounts known to the `personal` namespace and accounts returned by\n     * `eth_accounts` cannot be locked using this method.\n     *\n     * @param address The address of the account to lock.\n     * @returns `true` if the account was locked successfully, `false` if the\n     * account was already locked. Throws an error if the account could not be\n     * locked.\n     * @example\n     * ```javascript\n     * const address = \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\";\n     * const result = await provider.send(\"evm_lockUnknownAccount\", [address] );\n     * console.log(result);\n     * ```\n     */\n    async evm_lockUnknownAccount(address) {\n        const lowerAddress = address.toLowerCase();\n        // if this is a known account we can't unlock it this way\n        if (__classPrivateFieldGet(this, _wallet).knownAccounts.has(lowerAddress)) {\n            throw new Error(\"cannot lock known/personal account\");\n        }\n        return __classPrivateFieldGet(this, _wallet).lockAccount(lowerAddress);\n    }\n    //#endregion evm\n    //#region miner\n    /**\n     * Resume the CPU mining process with the given number of threads.\n     *\n     * Note: `threads` is ignored.\n     * @param threads Number of threads to resume the CPU mining process with.\n     * @returns `true`.\n     * @example\n     * ```javascript\n     * await provider.send(\"miner_stop\");\n     * // check that eth_mining returns false\n     * console.log(await provider.send(\"eth_mining\"));\n     * await provider.send(\"miner_start\");\n     * // check that eth_mining returns true\n     * console.log(await provider.send(\"eth_mining\"));\n     * ```\n     */\n    async miner_start(threads = 1) {\n        if (__classPrivateFieldGet(this, _options).miner.legacyInstamine === true) {\n            const transactions = await __classPrivateFieldGet(this, _blockchain).resume(threads);\n            if (transactions != null && __classPrivateFieldGet(this, _options).chain.vmErrorsOnRPCResponse) {\n                assertExceptionalTransactions(transactions);\n            }\n        }\n        else {\n            __classPrivateFieldGet(this, _blockchain).resume(threads);\n        }\n        return true;\n    }\n    /**\n     * Stop the CPU mining operation.\n     * @returns `true`.\n     * @example\n     * ```javascript\n     * // check that eth_mining returns true\n     * console.log(await provider.send(\"eth_mining\"));\n     * await provider.send(\"miner_stop\");\n     * // check that eth_mining returns false\n     * console.log(await provider.send(\"eth_mining\"));\n     * ```\n     */\n    async miner_stop() {\n        __classPrivateFieldGet(this, _blockchain).pause();\n        return true;\n    }\n    /**\n     * Sets the default accepted gas price when mining transactions.\n     * Any transactions that don't specify a gas price will use this amount.\n     * Transactions that are below this limit are excluded from the mining process.\n     * @param number Default accepted gas price.\n     * @returns `true`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"miner_setGasPrice\", [300000] ));\n     * ```\n     */\n    async miner_setGasPrice(number) {\n        __classPrivateFieldGet(this, _options).miner.defaultGasPrice = utils_1.Quantity.from(number);\n        return true;\n    }\n    /**\n     * Sets the etherbase, where mining rewards will go.\n     * @param address The address where the mining rewards will go.\n     * @returns `true`.\n     * @example\n     * ```javascript\n     * const [account] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * console.log(await provider.send(\"miner_setEtherbase\", [account] ));\n     * ```\n     */\n    async miner_setEtherbase(address) {\n        __classPrivateFieldGet(this, _blockchain).coinbase = ethereum_address_1.Address.from(address);\n        return true;\n    }\n    /**\n     * Set the extraData block header field a miner can include.\n     * @param extra The `extraData` to include.\n     * @returns If successfully set returns `true`, otherwise returns an error.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"miner_setExtra\", [\"0x0\"] ));\n     * ```\n     */\n    async miner_setExtra(extra) {\n        const bytes = utils_1.Data.from(extra);\n        const length = bytes.toBuffer().length;\n        if (length > 32) {\n            throw new Error(`extra exceeds max length. ${length} > 32`);\n        }\n        __classPrivateFieldGet(this, _options).miner.extraData = bytes;\n        return true;\n    }\n    //#endregion\n    //#region web3\n    /**\n     * Returns the current client version.\n     * @returns The current client version.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"web3_clientVersion\"));\n     * ```\n     */\n    async web3_clientVersion() {\n        return CLIENT_VERSION;\n    }\n    /**\n     * Returns Keccak-256 (not the standardized SHA3-256) of the given data.\n     * @param data - the data to convert into a SHA3 hash.\n     * @returns The SHA3 result of the given string.\n     * @example\n     * ```javascript\n     * const data = \"hello trufflers\";\n     * const sha3 = await provider.send(\"web3_sha3\", [data] );\n     * console.log(sha3);\n     * ```\n     */\n    async web3_sha3(data) {\n        return utils_1.Data.from(utils_1.keccak(Buffer.from(data)));\n    }\n    //#endregion\n    //#region net\n    /**\n     * Returns the current network id.\n     * @returns The current network id. This value should NOT be JSON-RPC\n     * Quantity/Data encoded.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"net_version\"));\n     * ```\n     */\n    async net_version() {\n        return __classPrivateFieldGet(this, _options).chain.networkId.toString();\n    }\n    /**\n     * Returns `true` if client is actively listening for network connections.\n     * @returns `true` when listening, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"net_listening\"));\n     * ```\n     */\n    async net_listening() {\n        return true;\n    }\n    /**\n     * Returns number of peers currently connected to the client.\n     * @returns Number of connected peers.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"net_peerCount\"));\n     * ```\n     */\n    async net_peerCount() {\n        return utils_1.RPCQUANTITY_ZERO;\n    }\n    //#endregion\n    //#region eth\n    // TODO: example doesn't return correct value\n    /**\n     * Generates and returns an estimate of how much gas is necessary to allow the\n     * transaction to complete. The transaction will not be added to the\n     * blockchain. Note that the estimate may be significantly more than the\n     * amount of gas actually used by the transaction, for a variety of reasons\n     * including EVM mechanics and node performance.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction The transaction call object as seen in source.\n     * @param blockNumber Integer block number, or the string \"latest\", \"earliest\"\n     *  or \"pending\".\n     *\n     * @returns The amount of gas used.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const gasEstimate = await provider.request({ method: \"eth_estimateGas\", params: [{ from, to }, \"latest\" ] });\n     * console.log(gasEstimate);\n     * ```\n     */\n    async eth_estimateGas(transaction, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const blocks = blockchain.blocks;\n        const parentBlock = await blocks.get(blockNumber);\n        const parentHeader = parentBlock.header;\n        const options = __classPrivateFieldGet(this, _options);\n        const generateVM = () => {\n            return blockchain.vm.copy();\n        };\n        return new Promise((resolve, reject) => {\n            const { coinbase } = blockchain;\n            const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n            if (tx.from == null) {\n                tx.from = coinbase;\n            }\n            if (tx.gas.isNull()) {\n                // eth_estimateGas isn't subject to regular transaction gas limits\n                tx.gas = options.miner.callGasLimit;\n            }\n            const block = new ethereum_block_1.RuntimeBlock(utils_1.Quantity.from((parentHeader.number.toBigInt() || 0n) + 1n), parentHeader.parentHash, parentHeader.miner, tx.gas.toBuffer(), parentHeader.gasUsed.toBuffer(), parentHeader.timestamp, options.miner.difficulty, parentHeader.totalDifficulty, 0n // no baseFeePerGas for estimates\n            );\n            const runArgs = {\n                tx: tx.toVmTransaction(),\n                block,\n                skipBalance: true,\n                skipNonce: true\n            };\n            gas_estimator_1.default(generateVM, runArgs, (err, result) => {\n                if (err)\n                    return reject(err);\n                resolve(utils_1.Quantity.from(result.gasEstimate.toArrayLike(Buffer)));\n            });\n        });\n    }\n    /**\n     * Returns the current ethereum protocol version.\n     * @returns The current ethereum protocol version.\n     * @example\n     * ```javascript\n     * const version = await provider.request({ method: \"eth_protocolVersion\", params: [] });\n     * console.log(version);\n     * ```\n     */\n    async eth_protocolVersion() {\n        return PROTOCOL_VERSION;\n    }\n    /**\n     * Returns an object containing data about the sync status or `false` when not syncing.\n     *\n     * @returns An object with sync status data or `false`, when not syncing.\n     *\n     * * `startingBlock`: {bigint} The block at which the import started (will\n     *     only be reset, after the sync reached his head).\n     * * `currentBlock`: {bigint} The current block, same as `eth_blockNumber`.\n     * * `highestBlock`: {bigint} The estimated highest block.\n     *\n     * @example\n     * ```javascript\n     * const result = await provider.request({ method: \"eth_syncing\", params: [] });\n     * console.log(result);\n     * ```\n     */\n    async eth_syncing() {\n        return false;\n    }\n    /**\n     * Returns the client coinbase address.\n     * @returns The current coinbase address.\n     * @example\n     * ```javascript\n     * const coinbaseAddress = await provider.request({ method: \"eth_coinbase\" });\n     * console.log(coinbaseAddress);\n     * ```\n     */\n    async eth_coinbase() {\n        return __classPrivateFieldGet(this, _blockchain).coinbase;\n    }\n    /**\n     * Returns information about a block by block number.\n     * @param number Integer of a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the\n     * default block parameter.\n     * @param transactions If `true` it returns the full transaction objects, if `false` only the hashes of the\n     * transactions.\n     * @returns The block, `null` if the block doesn't exist.\n     *\n     * * `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n     * * `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n     * * `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n     * * `miner`: `DATA`, 20 Bytes -  Address of the miner.\n     * * `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n     * * `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n     * * `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n     * * `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n     * * `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n     * * `number`: `QUANTITY` - The block number. `null` when pending.\n     * * `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n     * * `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n     * * `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n     * * `extraData`: `DATA` - Extra data for the block.\n     * * `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n     * * `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n     * * `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n     * * `size`: `QUANTITY` - Integer the size of the block in bytes.\n     * * `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n     * * `uncles`: `Array` - Array of uncle hashes.\n     *\n     * @example\n     * ```javascript\n     * const block = await provider.request({ method: \"eth_getBlockByNumber\", params: [\"0x0\", false] });\n     * console.log(block);\n     * ```\n     */\n    async eth_getBlockByNumber(number, transactions = false) {\n        const block = await __classPrivateFieldGet(this, _blockchain).blocks\n            .get(number)\n            .catch(_ => null);\n        return block ? block.toJSON(transactions) : null;\n    }\n    /**\n     * Returns information about a block by block hash.\n     * @param hash Hash of a block.\n     * @param transactions If `true` it returns the full transaction objects, if `false` only the hashes of the\n     * transactions.\n     * @returns The block, `null` if the block doesn't exist.\n     *\n     * * `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n     * * `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n     * * `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n     * * `miner`: `DATA`, 20 Bytes -  Address of the miner.\n     * * `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n     * * `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n     * * `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n     * * `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n     * * `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n     * * `number`: `QUANTITY` - The block number. `null` when pending.\n     * * `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n     * * `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n     * * `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n     * * `extraData`: `DATA` - Extra data for the block.\n     * * `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n     * * `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n     * * `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n     * * `size`: `QUANTITY` - Integer the size of the block in bytes.\n     * * `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n     * * `uncles`: `Array` - Array of uncle hashes.\n     *\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const block = await provider.request({ method: \"eth_getBlockByHash\", params: [txReceipt.blockHash, true] });\n     * console.log(block);\n     * ```\n     */\n    async eth_getBlockByHash(hash, transactions = false) {\n        const block = await __classPrivateFieldGet(this, _blockchain).blocks\n            .getByHash(hash)\n            .catch(_ => null);\n        return block ? block.toJSON(transactions) : null;\n    }\n    /**\n     * Returns the number of transactions in a block from a block matching the given block number.\n     * @param number Integer of a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the\n     * default block parameter.\n     * @returns Integer of the number of transactions in the block.\n     * @example\n     * ```javascript\n     * const txCount = await provider.request({ method: \"eth_getBlockTransactionCountByNumber\", params: [\"0x0\"] });\n     * console.log(txCount);\n     * ```\n     */\n    async eth_getBlockTransactionCountByNumber(blockNumber) {\n        const { blocks } = __classPrivateFieldGet(this, _blockchain);\n        const blockNum = blocks.getEffectiveNumber(blockNumber);\n        const rawBlock = await blocks.getRawByBlockNumber(blockNum);\n        if (!rawBlock)\n            return null;\n        const [, rawTransactions] = rlp_1.decode(rawBlock);\n        return utils_1.Quantity.from(rawTransactions.length);\n    }\n    /**\n     * Returns the number of transactions in a block from a block matching the given block hash.\n     * @param hash Hash of a block.\n     * @returns Number of transactions in the block.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const txCount = await provider.request({ method: \"eth_getBlockTransactionCountByHash\", params: [txReceipt.blockHash] });\n     * console.log(txCount);\n     * ```\n     */\n    async eth_getBlockTransactionCountByHash(hash) {\n        const { blocks } = __classPrivateFieldGet(this, _blockchain);\n        const blockNum = await blocks.getNumberFromHash(hash);\n        if (!blockNum)\n            return null;\n        const rawBlock = await blocks.getRawByBlockNumber(utils_1.Quantity.from(blockNum));\n        if (!rawBlock)\n            return null;\n        const [, rawTransactions] = rlp_1.decode(rawBlock);\n        return utils_1.Quantity.from(rawTransactions.length);\n    }\n    /**\n     * Returns a list of available compilers.\n     * @returns List of available compilers.\n     * @example\n     * ```javascript\n     * const compilers = await provider.send(\"eth_getCompilers\");\n     * console.log(compilers);\n     * ```\n     */\n    async eth_getCompilers() {\n        return [];\n    }\n    /**\n     * Returns information about a transaction by block hash and transaction index position.\n     * @param hash Hash of a block.\n     * @param index Integer of the transaction index position.\n     * @returns The transaction object or `null` if no transaction was found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - The transaction hash.\n     * * `nonce`: `QUANTITY` - The number of transactions made by the sender prior to this one.\n     * * `blockHash`: `DATA`, 32 Bytes - The hash of the block the transaction is in. `null` when pending.\n     * * `blockNumber`: `QUANTITY` - The number of the block the transaction is in. `null` when pending.\n     * * `transactionIndex`: `QUANTITY` - The index position of the transaction in the block.\n     * * `from`: `DATA`, 20 Bytes - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 Bytes - The address the transaction is sent to.\n     * * `value`: `QUANTITY` - The value transferred in wei.\n     * * `gas`: `QUANTITY` - The gas provided by the sender.\n     * * `gasPrice`: `QUANTITY` - The price of gas in wei.\n     * * `input`: `DATA` - The data sent along with the transaction.\n     * * `v`: `QUANTITY` - ECDSA recovery id.\n     * * `r`: `DATA`, 32 Bytes - ECDSA signature r.\n     * * `s`: `DATA`, 32 Bytes - ECDSA signature s.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const { blockHash, transactionIndex } = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     *\n     * const tx = await provider.request({ method: \"eth_getTransactionByBlockHashAndIndex\", params: [ blockHash, transactionIndex ] });\n     * console.log(tx);\n     * ```\n     */\n    async eth_getTransactionByBlockHashAndIndex(hash, index) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const block = await blockchain.blocks\n            .getByHash(hash)\n            .catch(_ => null);\n        if (!block)\n            return null;\n        const transactions = block.getTransactions();\n        return transactions[parseInt(utils_1.Quantity.from(index).toString(), 10)].toJSON(blockchain.common);\n    }\n    /**\n     * Returns information about a transaction by block number and transaction index position.\n     * @param number A block number, or the string \"earliest\", \"latest\" or \"pending\".\n     * @param index Integer of the transaction index position.\n     * @returns The transaction object or `null` if no transaction was found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - The transaction hash.\n     * * `nonce`: `QUANTITY` - The number of transactions made by the sender prior to this one.\n     * * `blockHash`: `DATA`, 32 Bytes - The hash of the block the transaction is in. `null` when pending.\n     * * `blockNumber`: `QUANTITY` - The number of the block the transaction is in. `null` when pending.\n     * * `transactionIndex`: `QUANTITY` - The index position of the transaction in the block.\n     * * `from`: `DATA`, 20 Bytes - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 Bytes - The address the transaction is sent to.\n     * * `value`: `QUANTITY` - The value transferred in wei.\n     * * `gas`: `QUANTITY` - The gas provided by the sender.\n     * * `gasPrice`: `QUANTITY` - The price of gas in wei.\n     * * `input`: `DATA` - The data sent along with the transaction.\n     * * `v`: `QUANTITY` - ECDSA recovery id.\n     * * `r`: `DATA`, 32 Bytes - ECDSA signature r.\n     * * `s`: `DATA`, 32 Bytes - ECDSA signature s.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const { transactionIndex } = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     *\n     * const tx = await provider.request({ method: \"eth_getTransactionByBlockNumberAndIndex\", params: [ \"latest\", transactionIndex ] });\n     * console.log(tx);\n     * ```\n     */\n    async eth_getTransactionByBlockNumberAndIndex(number, index) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const block = await blockchain.blocks.get(number).catch(_ => null);\n        if (!block)\n            return null;\n        const transactions = block.getTransactions();\n        return transactions[parseInt(utils_1.Quantity.from(index).toString(), 10)].toJSON(blockchain.common);\n    }\n    /**\n     * Returns the number of uncles in a block from a block matching the given block hash.\n     * @param hash Hash of a block.\n     * @returns The number of uncles in a block.\n     * @example\n     * ```javascript\n     * const blockHash = await provider.send(\"eth_getBlockByNumber\", [\"latest\"] );\n     * const uncleCount = await provider.send(\"eth_getUncleCountByBlockHash\", [blockHash] );\n     * console.log(uncleCount);\n     * ```\n     */\n    async eth_getUncleCountByBlockHash(hash) {\n        return utils_1.RPCQUANTITY_ZERO;\n    }\n    /**\n     * Returns the number of uncles in a block from a block matching the given block hash.\n     * @param blockNumber A block number, or the string \"earliest\", \"latest\" or \"pending\".\n     * @returns The number of uncles in a block.\n     * @example\n     * ```javascript\n     * const uncleCount = await provider.send(\"eth_getUncleCountByBlockNumber\", [\"latest\"] );\n     * console.log(uncleCount);\n     * ```\n     */\n    async eth_getUncleCountByBlockNumber(blockNumber) {\n        return utils_1.RPCQUANTITY_ZERO;\n    }\n    /**\n     * Returns information about a uncle of a block by hash and uncle index position.\n     *\n     * @param hash Hash of a block.\n     * @param index The uncle's index position.\n     * @returns A block object or `null` when no block is found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n     * * `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n     * * `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n     * * `miner`: `DATA`, 20 Bytes -  Address of the miner.\n     * * `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n     * * `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n     * * `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n     * * `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n     * * `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n     * * `number`: `QUANTITY` - The block number. `null` when pending.\n     * * `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n     * * `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n     * * `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n     * * `extraData`: `DATA` - Extra data for the block.\n     * * `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n     * * `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n     * * `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n     * * `size`: `QUANTITY` - Integer the size of the block in bytes.\n     * * `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n     * * `uncles`: `Array` - Array of uncle hashes.\n     *\n     * @example\n     * ```javascript\n     * const blockHash = await provider.send(\"eth_getBlockByNumber\", [\"latest\"] );\n     * const block = await provider.send(\"eth_getUncleByBlockHashAndIndex\", [blockHash, \"0x0\"] );\n     * console.log(block);\n     * ```\n     */\n    async eth_getUncleByBlockHashAndIndex(hash, index) {\n        return null;\n    }\n    /**\n     * Returns information about a uncle of a block by hash and uncle index position.\n     *\n     * @param blockNumber A block number, or the string \"earliest\", \"latest\" or \"pending\".\n     * @param uncleIndex The uncle's index position.\n     * @returns A block object or `null` when no block is found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n     * * `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n     * * `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n     * * `miner`: `DATA`, 20 Bytes -  Address of the miner.\n     * * `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n     * * `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n     * * `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n     * * `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n     * * `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n     * * `number`: `QUANTITY` - The block number. `null` when pending.\n     * * `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n     * * `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n     * * `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n     * * `extraData`: `DATA` - Extra data for the block.\n     * * `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n     * * `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n     * * `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n     * * `size`: `QUANTITY` - Integer the size of the block in bytes.\n     * * `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n     * * `uncles`: `Array` - Array of uncle hashes.\n     *\n     * @example\n     * ```javascript\n     * const block = await provider.send(\"eth_getUncleByBlockNumberAndIndex\", [\"latest\", \"0x0\"] );\n     * console.log(block);\n     * ```\n     */\n    async eth_getUncleByBlockNumberAndIndex(blockNumber, uncleIndex) {\n        return null;\n    }\n    /**\n     * Returns: An Array with the following elements\n     * 1: `DATA`, 32 Bytes - current block header pow-hash\n     * 2: `DATA`, 32 Bytes - the seed hash used for the DAG.\n     * 3: `DATA`, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n     *\n     * @param filterId A filter id.\n     * @returns The hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"eth_getWork\", [\"0x0\"] ));\n     *  ```\n     */\n    async eth_getWork(filterId) {\n        return [];\n    }\n    /**\n     * Used for submitting a proof-of-work solution.\n     *\n     * @param nonce The nonce found (64 bits).\n     * @param powHash The header's pow-hash (256 bits).\n     * @param digest The mix digest (256 bits).\n     * @returns `true` if the provided solution is valid, otherwise `false`.\n     * @example\n     * ```javascript\n     * const nonce = \"0xe0df4bd14ab39a71\";\n     * const powHash = \"0x0000000000000000000000000000000000000000000000000000000000000001\";\n     * const digest = \"0xb2222a74119abd18dbcb7d1f661c6578b7bbeb4984c50e66ed538347f606b971\";\n     * const result = await provider.request({ method: \"eth_submitWork\", params: [nonce, powHash, digest] });\n     * console.log(result);\n     * ```\n     */\n    async eth_submitWork(nonce, powHash, digest) {\n        return false;\n    }\n    /**\n     * Used for submitting mining hashrate.\n     *\n     * @param hashRate A hexadecimal string representation (32 bytes) of the hash rate.\n     * @param clientID A random hexadecimal(32 bytes) ID identifying the client.\n     * @returns `true` if submitting went through succesfully and `false` otherwise.\n     * @example\n     * ```javascript\n     * const hashRate = \"0x0000000000000000000000000000000000000000000000000000000000000001\";\n     * const clientId = \"0xb2222a74119abd18dbcb7d1f661c6578b7bbeb4984c50e66ed538347f606b971\";\n     * const result = await provider.request({ method: \"eth_submitHashrate\", params: [hashRate, clientId] });\n     * console.log(result);\n     * ```\n     */\n    async eth_submitHashrate(hashRate, clientID) {\n        return false;\n    }\n    /**\n     * Returns `true` if client is actively mining new blocks.\n     * @returns returns `true` if the client is mining, otherwise `false`.\n     * @example\n     * ```javascript\n     * const isMining = await provider.request({ method: \"eth_mining\", params: [] });\n     * console.log(isMining);\n     * ```\n     */\n    async eth_mining() {\n        // we return the blockchain's started state\n        return __classPrivateFieldGet(this, _blockchain).isStarted();\n    }\n    /**\n     * Returns the number of hashes per second that the node is mining with.\n     * @returns Number of hashes per second.\n     * @example\n     * ```javascript\n     * const hashrate = await provider.request({ method: \"eth_hashrate\", params: [] });\n     * console.log(hashrate);\n     * ```\n     */\n    async eth_hashrate() {\n        return utils_1.RPCQUANTITY_ZERO;\n    }\n    /**\n     * Returns the current price per gas in wei.\n     * @returns Integer of the current gas price in wei.\n     * @example\n     * ```javascript\n     * const gasPrice = await provider.request({ method: \"eth_gasPrice\", params: [] });\n     * console.log(gasPrice);\n     * ```\n     */\n    async eth_gasPrice() {\n        return __classPrivateFieldGet(this, _options).miner.defaultGasPrice;\n    }\n    /**\n     * Returns a list of addresses owned by client.\n     * @returns Array of 20 Bytes - addresses owned by the client.\n     * @example\n     * ```javascript\n     * const accounts = await provider.request({ method: \"eth_accounts\", params: [] });\n     * console.log(accounts);\n     * ```\n     */\n    async eth_accounts() {\n        return __classPrivateFieldGet(this, _wallet).addresses;\n    }\n    /**\n     * Returns the number of the most recent block.\n     * @returns The current block number the client is on.\n     * @example\n     * ```javascript\n     * const blockNumber = await provider.request({ method: \"eth_blockNumber\" });\n     * console.log(blockNumber);\n     * ```\n     */\n    async eth_blockNumber() {\n        return __classPrivateFieldGet(this, _blockchain).blocks.latest.header.number;\n    }\n    /**\n     * Returns the currently configured chain id, a value used in\n     * replay-protected transaction signing as introduced by EIP-155.\n     * @returns The chain id as a string.\n     * @EIP [155 – Simple replay attack protection](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md)\n     *\n     * @example\n     * ```javascript\n     * const chainId = await provider.send(\"eth_chainId\");\n     * console.log(chainId);\n     * ```\n     */\n    async eth_chainId() {\n        return utils_1.Quantity.from(__classPrivateFieldGet(this, _options).chain.chainId);\n    }\n    /**\n     * Returns the balance of the account of given address.\n     * @param address Address to check for balance.\n     * @param blockNumber Integer block number, or the string \"latest\", \"earliest\"\n     *  or \"pending\".\n     *\n     * @returns Integer of the account balance in wei.\n     *\n     * @example\n     * ```javascript\n     * const accounts = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const balance = await provider.request({ method: \"eth_getBalance\", params: [accounts[0], \"latest\"] });\n     * console.log(balance);\n     * ```\n     */\n    async eth_getBalance(address, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        return __classPrivateFieldGet(this, _blockchain).accounts.getBalance(ethereum_address_1.Address.from(address), blockNumber);\n    }\n    /**\n     * Returns code at a given address.\n     *\n     * @param address Address.\n     * @param blockNumber Integer block number, or the string \"latest\", \"earliest\" or \"pending\".\n     * @returns The code from the given address.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const code = await provider.request({ method: \"eth_getCode\", params: [txReceipt.contractAddress, \"latest\"] });\n     * console.log(code);\n     * ```\n     */\n    async eth_getCode(address, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const { accounts } = __classPrivateFieldGet(this, _blockchain);\n        return accounts.getCode(ethereum_address_1.Address.from(address), blockNumber);\n    }\n    /**\n     * Returns the value from a storage position at a given address.\n     * @param address Address of the storage.\n     * @param position Integer of the position in the storage.\n     * @param blockNumber Integer block number, or the string \"latest\", \"earliest\"\n     *  or \"pending\".\n     * @returns The value in storage at the requested position.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const storageValue = await provider.request({ method: \"eth_getStorageAt\", params: [txReceipt.contractAddress, \"0x0\", \"latest\"] });\n     * console.log(storageValue);\n     * ```\n     */\n    async eth_getStorageAt(address, position, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const blockNum = blockchain.blocks.getEffectiveNumber(blockNumber);\n        const block = await blockchain.blocks.getRawByBlockNumber(blockNum);\n        if (!block)\n            throw new Error(\"header not found\");\n        const [[, , , blockStateRoot]] = rlp_1.decode(block);\n        const trie = blockchain.trie.copy(false);\n        trie.setContext(blockStateRoot, null, blockNum);\n        const posBuff = utils_1.Quantity.from(position).toBuffer();\n        const length = posBuff.length;\n        let paddedPosBuff;\n        if (length < 32) {\n            // storage locations are 32 bytes wide, so we need to expand any value\n            // given to 32 bytes.\n            paddedPosBuff = Buffer.allocUnsafe(32).fill(0);\n            posBuff.copy(paddedPosBuff, 32 - length);\n        }\n        else if (length === 32) {\n            paddedPosBuff = posBuff;\n        }\n        else {\n            // if the position value we're passed is > 32 bytes, truncate it. This is\n            // what geth does.\n            paddedPosBuff = posBuff.slice(-32);\n        }\n        const addressBuf = ethereum_address_1.Address.from(address).toBuffer();\n        const addressData = await trie.get(addressBuf);\n        // An address's stateRoot is stored in the 3rd rlp entry\n        const addressStateRoot = rlp_1.decode(addressData)[2];\n        trie.setContext(addressStateRoot, addressBuf, blockNum);\n        const value = await trie.get(paddedPosBuff);\n        return utils_1.Data.from(rlp_1.decode(value));\n    }\n    /**\n     * Returns the information about a transaction requested by transaction hash.\n     *\n     * @param transactionHash Hash of a transaction.\n     * @returns The transaction object or `null` if no transaction was found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - The transaction hash.\n     * * `nonce`: `QUANTITY` - The number of transactions made by the sender prior to this one.\n     * * `blockHash`: `DATA`, 32 Bytes - The hash of the block the transaction is in. `null` when pending.\n     * * `blockNumber`: `QUANTITY` - The number of the block the transaction is in. `null` when pending.\n     * * `transactionIndex`: `QUANTITY` - The index position of the transaction in the block.\n     * * `from`: `DATA`, 20 Bytes - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 Bytes - The address the transaction is sent to.\n     * * `value`: `QUANTITY` - The value transferred in wei.\n     * * `gas`: `QUANTITY` - The gas provided by the sender.\n     * * `gasPrice`: `QUANTITY` - The price of gas in wei.\n     * * `input`: `DATA` - The data sent along with the transaction.\n     * * `v`: `QUANTITY` - ECDSA recovery id.\n     * * `r`: `DATA`, 32 Bytes - ECDSA signature r.\n     * * `s`: `DATA`, 32 Bytes - ECDSA signature s.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const tx = await provider.request({ method: \"eth_getTransactionByHash\", params: [ txHash ] });\n     * console.log(tx);\n     * ```\n     */\n    async eth_getTransactionByHash(transactionHash) {\n        const { transactions } = __classPrivateFieldGet(this, _blockchain);\n        const hashBuffer = utils_1.Data.from(transactionHash).toBuffer();\n        // we must check the database before checking the pending cache, because the\n        // cache is updated _after_ the transaction is already in the database, and\n        // the database contains block info whereas the pending cache doesn't.\n        const transaction = await transactions.get(hashBuffer);\n        if (transaction === null) {\n            // if we can't find it in the list of pending transactions, check the db!\n            const tx = transactions.transactionPool.find(hashBuffer);\n            return tx ? tx.toJSON(__classPrivateFieldGet(this, _blockchain).common) : null;\n        }\n        else {\n            return transaction.toJSON(__classPrivateFieldGet(this, _blockchain).common);\n        }\n    }\n    /**\n     * Returns the receipt of a transaction by transaction hash.\n     *\n     * Note: The receipt is not available for pending transactions.\n     *\n     * @param transactionHash Hash of a transaction.\n     * @returns Returns the receipt of a transaction by transaction hash.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [ txHash ] });\n     * console.log(txReceipt);\n     * ```\n     */\n    async eth_getTransactionReceipt(transactionHash) {\n        const { transactions, transactionReceipts, blocks, common } = __classPrivateFieldGet(this, _blockchain);\n        const dataHash = utils_1.Data.from(transactionHash);\n        const txHash = dataHash.toBuffer();\n        const transactionPromise = transactions.get(txHash);\n        const receiptPromise = transactionReceipts.get(txHash);\n        const blockPromise = transactionPromise.then(t => t ? blocks.get(t.blockNumber.toBuffer()) : null);\n        const [transaction, receipt, block] = await Promise.all([\n            transactionPromise,\n            receiptPromise,\n            blockPromise\n        ]);\n        if (transaction) {\n            return receipt.toJSON(block, transaction, common);\n        }\n        // if we are performing non-legacy instamining, then check to see if the\n        // transaction is pending so as to warn about the v7 breaking change\n        const options = __classPrivateFieldGet(this, _options);\n        if (options.miner.blockTime <= 0 &&\n            options.miner.legacyInstamine !== true &&\n            __classPrivateFieldGet(this, _blockchain).isStarted()) {\n            const tx = __classPrivateFieldGet(this, _blockchain).transactions.transactionPool.find(txHash);\n            if (tx != null) {\n                options.logging.logger.log(\" > Ganache `eth_getTransactionReceipt` notice: the transaction with hash\\n\" +\n                    ` > \\`${dataHash.toString()}\\` has not\\n` +\n                    \" > yet been mined.\" +\n                    \" See https://trfl.io/v7-instamine for additional information.\");\n            }\n        }\n        return null;\n    }\n    /**\n     * Creates new message call transaction or a contract creation, if the data field contains code.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction - The transaction call object as seen in source.\n     * @returns The transaction hash.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * console.log(txHash);\n     * ```\n     */\n    async eth_sendTransaction(transaction) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n        if (tx.from == null) {\n            throw new Error(\"from not found; is required\");\n        }\n        const fromString = tx.from.toString();\n        const wallet = __classPrivateFieldGet(this, _wallet);\n        const isKnownAccount = wallet.knownAccounts.has(fromString);\n        const isUnlockedAccount = wallet.unlockedAccounts.has(fromString);\n        if (!isUnlockedAccount) {\n            const msg = isKnownAccount\n                ? \"authentication needed: password or unlock\"\n                : \"sender account not recognized\";\n            throw new Error(msg);\n        }\n        await autofillDefaultTransactionValues(tx, this.eth_estimateGas.bind(this), transaction, blockchain, __classPrivateFieldGet(this, _options));\n        if (isUnlockedAccount) {\n            const secretKey = wallet.unlockedAccounts.get(fromString);\n            return blockchain.queueTransaction(tx, secretKey);\n        }\n        else {\n            return blockchain.queueTransaction(tx);\n        }\n    }\n    /**\n     * Signs a transaction that can be submitted to the network at a later time using `eth_sendRawTransaction`.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction - The transaction call object as seen in source.\n     * @returns The raw, signed transaction.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const signedTx = await provider.request({ method: \"eth_signTransaction\", params: [{ from, to }] });\n     * console.log(signedTx)\n     * ```\n     */\n    async eth_signTransaction(transaction) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n        if (tx.from == null) {\n            throw new Error(\"from not found; is required\");\n        }\n        const fromString = tx.from.toString();\n        const wallet = __classPrivateFieldGet(this, _wallet);\n        const isKnownAccount = wallet.knownAccounts.has(fromString);\n        const isUnlockedAccount = wallet.unlockedAccounts.has(fromString);\n        if (!isUnlockedAccount) {\n            const msg = isKnownAccount\n                ? \"authentication needed: password or unlock\"\n                : \"sender account not recognized\";\n            throw new Error(msg);\n        }\n        const secretKey = wallet.unlockedAccounts.get(fromString).toBuffer();\n        tx.signAndHash(secretKey);\n        return utils_1.Data.from(tx.serialized).toString();\n    }\n    /**\n     * Creates new message call transaction or a contract creation for signed transactions.\n     * @param transaction The signed transaction data.\n     * @returns The transaction hash.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const signedTx = await provider.request({ method: \"eth_signTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * const txHash = await provider.send(\"eth_sendRawTransaction\", [signedTx] );\n     * console.log(txHash);\n     * ```\n     */\n    async eth_sendRawTransaction(transaction) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const tx = ethereum_transaction_1.TransactionFactory.fromString(transaction, blockchain.common);\n        return blockchain.queueTransaction(tx);\n    }\n    /**\n     * The sign method calculates an Ethereum specific signature with:\n     * `sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + message.length + message)))`.\n     *\n     * By adding a prefix to the message makes the calculated signature\n     * recognizable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data\n     *  (e.g. transaction) and use the signature to impersonate the victim.\n     *\n     * Note the address to sign with must be unlocked.\n     *\n     * @param address Address to sign with.\n     * @param message Message to sign.\n     * @returns Signature - a hex encoded 129 byte array\n     * starting with `0x`. It encodes the `r`, `s`, and `v` parameters from\n     * appendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n     *  in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n     * 64...128 the `s` parameter, and the last byte the `v` parameter. Note\n     * that the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).\n     * @example\n     * ```javascript\n     * const [account] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const msg = \"0x307866666666666666666666\";\n     * const signature = await provider.request({ method: \"eth_sign\", params: [account, msg] });\n     * console.log(signature);\n     * ```\n     */\n    async eth_sign(address, message) {\n        const account = ethereum_address_1.Address.from(address).toString().toLowerCase();\n        const privateKey = __classPrivateFieldGet(this, _wallet).unlockedAccounts.get(account);\n        if (privateKey == null) {\n            throw new Error(\"cannot sign data; no private key\");\n        }\n        const chainId = __classPrivateFieldGet(this, _options).chain.chainId;\n        const messageHash = ethereumjs_util_1.hashPersonalMessage(utils_1.Data.from(message).toBuffer());\n        const { v, r, s } = ethereumjs_util_1.ecsign(messageHash, privateKey.toBuffer(), chainId);\n        return ethereumjs_util_1.toRpcSig(v, r, s, chainId);\n    }\n    /**\n     * Identical to eth_signTypedData_v4.\n     *\n     * @param address Address of the account that will sign the messages.\n     * @param typedData Typed structured data to be signed.\n     * @returns Signature. As in `eth_sign`, it is a hex encoded 129 byte array\n     * starting with `0x`. It encodes the `r`, `s`, and `v` parameters from\n     * appendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n     *  in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n     * 64...128 the `s` parameter, and the last byte the `v` parameter. Note\n     * that the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).\n     * @EIP [712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md)\n     * @example\n     * ```javascript\n     * const [account] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const typedData = {\n     *  types: {\n     *    EIP712Domain: [\n     *      { name: 'name', type: 'string' },\n     *      { name: 'version', type: 'string' },\n     *      { name: 'chainId', type: 'uint256' },\n     *      { name: 'verifyingContract', type: 'address' },\n     *    ],\n     *    Person: [\n     *      { name: 'name', type: 'string' },\n     *      { name: 'wallet', type: 'address' }\n     *    ],\n     *    Mail: [\n     *      { name: 'from', type: 'Person' },\n     *      { name: 'to', type: 'Person' },\n     *      { name: 'contents', type: 'string' }\n     *    ],\n     *  },\n     *  primaryType: 'Mail',\n     *  domain: {\n     *    name: 'Ether Mail',\n     *    version: '1',\n     *    chainId: 1,\n     *    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n     *  },\n     *  message: {\n     *    from: {\n     *      name: 'Cow',\n     *      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n     *    },\n     *    to: {\n     *      name: 'Bob',\n     *      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n     *    },\n     *    contents: 'Hello, Bob!',\n     *  },\n     * };\n     * const signature = await provider.request({ method: \"eth_signTypedData\", params: [account, typedData] });\n     * console.log(signature);\n     * ```\n     */\n    async eth_signTypedData(address, typedData) {\n        return this.eth_signTypedData_v4(address, typedData);\n    }\n    /**\n     *\n     * @param address Address of the account that will sign the messages.\n     * @param typedData Typed structured data to be signed.\n     * @returns Signature. As in `eth_sign`, it is a hex encoded 129 byte array\n     * starting with `0x`. It encodes the `r`, `s`, and `v` parameters from\n     * appendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n     *  in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n     * 64...128 the `s` parameter, and the last byte the `v` parameter. Note\n     * that the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).\n     * @EIP [712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md)\n     * @example\n     * ```javascript\n     * const [account] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const typedData = {\n     *  types: {\n     *    EIP712Domain: [\n     *      { name: 'name', type: 'string' },\n     *      { name: 'version', type: 'string' },\n     *      { name: 'chainId', type: 'uint256' },\n     *      { name: 'verifyingContract', type: 'address' },\n     *    ],\n     *    Person: [\n     *      { name: 'name', type: 'string' },\n     *      { name: 'wallet', type: 'address' }\n     *    ],\n     *    Mail: [\n     *      { name: 'from', type: 'Person' },\n     *      { name: 'to', type: 'Person' },\n     *      { name: 'contents', type: 'string' }\n     *    ],\n     *  },\n     *  primaryType: 'Mail',\n     *  domain: {\n     *    name: 'Ether Mail',\n     *    version: '1',\n     *    chainId: 1,\n     *    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n     *  },\n     *  message: {\n     *    from: {\n     *      name: 'Cow',\n     *      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n     *    },\n     *    to: {\n     *      name: 'Bob',\n     *      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n     *    },\n     *    contents: 'Hello, Bob!',\n     *  },\n     * };\n     * const signature = await provider.request({ method: \"eth_signTypedData_v4\", params: [account, typedData] });\n     * console.log(signature);\n     * ```\n     */\n    async eth_signTypedData_v4(address, typedData) {\n        const account = ethereum_address_1.Address.from(address).toString().toLowerCase();\n        const privateKey = __classPrivateFieldGet(this, _wallet).unlockedAccounts.get(account);\n        if (privateKey == null) {\n            throw new Error(\"cannot sign data; no private key\");\n        }\n        if (typeof typedData === \"string\") {\n            throw new Error(\"cannot sign data; string sent, expected object\");\n        }\n        if (!typedData.types) {\n            throw new Error(\"cannot sign data; types missing\");\n        }\n        if (!typedData.types.EIP712Domain) {\n            throw new Error(\"cannot sign data; EIP712Domain definition missing\");\n        }\n        if (!typedData.domain) {\n            throw new Error(\"cannot sign data; domain missing\");\n        }\n        if (!typedData.primaryType) {\n            throw new Error(\"cannot sign data; primaryType missing\");\n        }\n        if (!typedData.message) {\n            throw new Error(\"cannot sign data; message missing\");\n        }\n        return eth_sig_util_1.signTypedData_v4(privateKey.toBuffer(), { data: typedData });\n    }\n    eth_subscribe(subscriptionName, options) {\n        const subscriptions = __classPrivateFieldGet(this, _subscriptions);\n        switch (subscriptionName) {\n            case \"newHeads\": {\n                const subscription = __classPrivateFieldGet(this, _getId).call(this);\n                const promiEvent = utils_1.PromiEvent.resolve(subscription);\n                const unsubscribe = __classPrivateFieldGet(this, _blockchain).on(\"block\", (block) => {\n                    const value = block;\n                    const header = value.header;\n                    const result = {\n                        logsBloom: header.logsBloom,\n                        miner: header.miner,\n                        difficulty: header.difficulty,\n                        totalDifficulty: header.totalDifficulty,\n                        extraData: header.extraData,\n                        gasLimit: header.gasLimit,\n                        gasUsed: header.gasUsed,\n                        hash: block.hash(),\n                        mixHash: block.header.mixHash,\n                        nonce: header.nonce,\n                        number: header.number,\n                        parentHash: header.parentHash,\n                        receiptsRoot: header.receiptsRoot,\n                        stateRoot: header.stateRoot,\n                        timestamp: header.timestamp,\n                        transactionsRoot: header.transactionsRoot,\n                        sha3Uncles: header.sha3Uncles\n                    };\n                    if (header.baseFeePerGas !== undefined) {\n                        result.baseFeePerGas = header.baseFeePerGas;\n                    }\n                    // TODO: move the JSON stringification closer to where the message\n                    // is actually sent to the listener\n                    promiEvent.emit(\"message\", {\n                        type: \"eth_subscription\",\n                        data: {\n                            result: JSON.parse(JSON.stringify(result)),\n                            subscription: subscription.toString()\n                        }\n                    });\n                });\n                subscriptions.set(subscription.toString(), unsubscribe);\n                return promiEvent;\n            }\n            case \"logs\": {\n                const subscription = __classPrivateFieldGet(this, _getId).call(this);\n                const promiEvent = utils_1.PromiEvent.resolve(subscription);\n                const { addresses, topics } = options\n                    ? filter_parsing_1.parseFilterDetails(options)\n                    : { addresses: [], topics: [] };\n                const unsubscribe = __classPrivateFieldGet(this, _blockchain).on(\"blockLogs\", (blockLogs) => {\n                    // TODO: move the JSON stringification closer to where the message\n                    // is actually sent to the listener\n                    const result = JSON.parse(JSON.stringify([...blockLogs.filter(addresses, topics)]));\n                    promiEvent.emit(\"message\", {\n                        type: \"eth_subscription\",\n                        data: {\n                            result,\n                            subscription: subscription.toString()\n                        }\n                    });\n                });\n                subscriptions.set(subscription.toString(), unsubscribe);\n                return promiEvent;\n            }\n            case \"newPendingTransactions\": {\n                const subscription = __classPrivateFieldGet(this, _getId).call(this);\n                const promiEvent = utils_1.PromiEvent.resolve(subscription);\n                const unsubscribe = __classPrivateFieldGet(this, _blockchain).on(\"pendingTransaction\", (transaction) => {\n                    const result = transaction.hash.toString();\n                    promiEvent.emit(\"message\", {\n                        type: \"eth_subscription\",\n                        data: {\n                            result,\n                            subscription: subscription.toString()\n                        }\n                    });\n                });\n                subscriptions.set(subscription.toString(), unsubscribe);\n                return promiEvent;\n            }\n            case \"syncing\": {\n                // ganache doesn't sync, so doing nothing is perfectly valid.\n                const subscription = __classPrivateFieldGet(this, _getId).call(this);\n                const promiEvent = utils_1.PromiEvent.resolve(subscription);\n                __classPrivateFieldGet(this, _subscriptions).set(subscription.toString(), () => { });\n                return promiEvent;\n            }\n            default:\n                throw new ethereum_utils_1.CodedError(`no \\\"${subscriptionName}\\\" subscription in eth namespace`, utils_1.JsonRpcErrorCode.METHOD_NOT_FOUND);\n        }\n    }\n    /**\n     * Cancel a subscription to a particular event. Returns a boolean indicating\n     * if the subscription was successfully cancelled.\n     *\n     * @param subscriptionId The ID of the subscription to unsubscribe to.\n     * @returns `true` if subscription was cancelled successfully, otherwise `false`.\n     * @example\n     * ```javascript\n     * const subscriptionId = await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const result = await provider.request({ method: \"eth_unsubscribe\", params: [subscriptionId] });\n     * console.log(result);\n     * ```\n     */\n    async eth_unsubscribe(subscriptionId) {\n        const subscriptions = __classPrivateFieldGet(this, _subscriptions);\n        const unsubscribe = subscriptions.get(subscriptionId);\n        if (unsubscribe) {\n            subscriptions.delete(subscriptionId);\n            unsubscribe();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Creates a filter in the node, to notify when a new block arrives. To check\n     * if the state has changed, call `eth_getFilterChanges`.\n     *\n     * @returns A filter id.\n     * @example\n     * ```javascript\n     * const filterId = await provider.request({ method: \"eth_newBlockFilter\", params: [] });\n     * console.log(filterId);\n     * ```\n     */\n    async eth_newBlockFilter() {\n        const unsubscribe = __classPrivateFieldGet(this, _blockchain).on(\"block\", (block) => {\n            value.updates.push(block.hash());\n        });\n        const value = {\n            updates: [],\n            unsubscribe,\n            filter: null,\n            type: ethereum_utils_1.FilterTypes.block\n        };\n        const filterId = __classPrivateFieldGet(this, _getId).call(this);\n        __classPrivateFieldGet(this, _filters).set(filterId.toString(), value);\n        return filterId;\n    }\n    /**\n     * Creates a filter in the node, to notify when new pending transactions\n     * arrive. To check if the state has changed, call `eth_getFilterChanges`.\n     *\n     * @returns A filter id.\n     * @example\n     * ```javascript\n     * const filterId = await provider.request({ method: \"eth_newPendingTransactionFilter\", params: [] });\n     * console.log(filterId);\n     * ```\n     */\n    async eth_newPendingTransactionFilter() {\n        const unsubscribe = __classPrivateFieldGet(this, _blockchain).on(\"pendingTransaction\", (transaction) => {\n            value.updates.push(transaction.hash);\n        });\n        const value = {\n            updates: [],\n            unsubscribe,\n            filter: null,\n            type: ethereum_utils_1.FilterTypes.pendingTransaction\n        };\n        const filterId = __classPrivateFieldGet(this, _getId).call(this);\n        __classPrivateFieldGet(this, _filters).set(filterId.toString(), value);\n        return filterId;\n    }\n    /**\n     * Creates a filter object, based on filter options, to notify when the state\n     * changes (logs). To check if the state has changed, call\n     * `eth_getFilterChanges`.\n     *\n     * If the from `fromBlock` or `toBlock` option are equal to \"latest\" the\n     * filter continually append logs for whatever block is seen as latest at the\n     * time the block was mined, not just for the block that was \"latest\" when the\n     * filter was created.\n     *\n     * ### A note on specifying topic filters:\n     * Topics are order-dependent. A transaction with a log with topics [A, B]\n     * will be matched by the following topic filters:\n     *  * `[]` “anything”\n     *  * `[A]` “A in first position (and anything after)”\n     *  * `[null, B]` “anything in first position AND B in second position (and\n     * anything after)”\n     *  * `[A, B]` “A in first position AND B in second position (and anything\n     * after)”\n     *  * `[[A, B], [A, B]]` “(A OR B) in first position AND (A OR B) in second\n     * position (and anything after)”\n     *\n     * Filter options:\n     * * `fromBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * * `toBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * * `address`: `DATA | Array` (optional) - Contract address or a list of addresses from which the logs should originate.\n     * * `topics`: `Array of DATA` (optional) - Array of 32 Bytes `DATA` topcis. Topics are order-dependent. Each topic can also\n     * be an array of `DATA` with \"or\" options.\n     *\n     * @param filter The filter options as seen in source.\n     *\n     * @returns A filter id.\n     * @example\n     * ```javascript\n     * const filterId = await provider.request({ method: \"eth_newFilter\", params: [] });\n     * console.log(filterId);\n     * ```\n     */\n    async eth_newFilter(filter) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        if (filter == null)\n            filter = {};\n        const { addresses, topics } = filter_parsing_1.parseFilterDetails(filter || {});\n        const unsubscribe = blockchain.on(\"blockLogs\", (blockLogs) => {\n            const blockNumber = blockLogs.blockNumber;\n            // every time we get a blockLogs message we re-check what the filter's\n            // range is. We do this because \"latest\" isn't the latest block at the\n            // time the filter was set up, rather it is the actual latest *mined*\n            // block (that is: not pending)\n            const { fromBlock, toBlock } = filter_parsing_1.parseFilterRange(filter, blockchain);\n            if (fromBlock <= blockNumber && toBlock >= blockNumber) {\n                value.updates.push(...blockLogs.filter(addresses, topics));\n            }\n        });\n        const value = { updates: [], unsubscribe, filter, type: ethereum_utils_1.FilterTypes.log };\n        const filterId = __classPrivateFieldGet(this, _getId).call(this);\n        __classPrivateFieldGet(this, _filters).set(filterId.toString(), value);\n        return filterId;\n    }\n    /**\n     * Polling method for a filter, which returns an array of logs, block hashes,\n     * or transaction hashes, depending on the filter type, which occurred since\n     * last poll.\n     *\n     * @param filterId The filter id.\n     * @returns An array of logs, block hashes, or transaction hashes, depending\n     * on the filter type, which occurred since last poll.\n     *\n     * For filters created with `eth_newBlockFilter` the return are block hashes (`DATA`, 32 Bytes).\n     *\n     * For filters created with `eth_newPendingTransactionFilter` the return are transaction hashes (`DATA`, 32 Bytes).\n     *\n     * For filters created with `eth_newFilter` the return are log objects with the following parameters:\n     * * `removed`: `TAG` - `true` when the log was removed, `false` if its a valid log.\n     * * `logIndex`: `QUANTITY` - Integer of the log index position in the block. `null` when pending.\n     * * `transactionIndex`: `QUANTITY` - Integer of the transactions index position. `null` when pending.\n     * * `transactionHash`: `DATA`, 32 Bytes - Hash of the transaction where the log was. `null` when pending.\n     * * `blockHash`: `DATA`, 32 Bytes - Hash of the block where the log was. `null` when pending.\n     * * `blockNumber`: `QUANTITY` - The block number where the log was in. `null` when pending.\n     * * `address`: `DATA`, 20 Bytes - The address from which the log originated.\n     * * `data`: `DATA` - Contains one or more 32 Bytes non-indexed arguments of the log.\n     * * `topics`: `Array of DATA` - Array of 0 to 4 32 Bytes `DATA` of indexed log arguments.\n     *\n     * @example\n     * ```javascript\n     * // Logs.sol\n     * // // SPDX-License-Identifier: MIT\n     * // pragma solidity ^0.7.4;\n     * // contract Logs {\n     * //   event Event(uint256 indexed first, uint256 indexed second);\n     * //   constructor() {\n     * //     emit Event(1, 2);\n     * //   }\n     * //\n     * //   function logNTimes(uint8 n) public {\n     * //     for (uint8 i = 0; i < n; i++) {\n     * //       emit Event(i, i);\n     * //     }\n     * //   }\n     * // }\n     *\n     * const logsContract = \"0x608060405234801561001057600080fd5b50600260017f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a360e58061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635e19e69f14602d575b600080fd5b605960048036036020811015604157600080fd5b81019080803560ff169060200190929190505050605b565b005b60005b8160ff168160ff16101560ab578060ff168160ff167f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a38080600101915050605e565b505056fea26469706673582212201af9c13c7b00e2b628c1258d45f9f62d2aad8cd32fc32fd9515d8ad1e792679064736f6c63430007040033\";\n     * const [from] = await provider.send(\"eth_accounts\");\n     * const filterId = await provider.send(\"eth_newFilter\");\n     *\n     * const subscriptionId = await provider.send(\"eth_subscribe\", [\"newHeads\"]);\n     * await provider.send(\"eth_sendTransaction\", [{ from, data: logsContract, gas: \"0x5b8d80\" }] );\n     * await provider.once(\"message\");\n     *\n     * const changes = await provider.request({ method: \"eth_getFilterChanges\", params: [filterId] });\n     * console.log(changes);\n     *\n     * await provider.send(\"eth_unsubscribe\", [subscriptionId]);\n     * ```\n     */\n    async eth_getFilterChanges(filterId) {\n        const filter = __classPrivateFieldGet(this, _filters).get(utils_1.Quantity.from(filterId).toString());\n        if (filter) {\n            const updates = filter.updates;\n            filter.updates = [];\n            return updates;\n        }\n        else {\n            throw new Error(\"filter not found\");\n        }\n    }\n    /**\n     * Uninstalls a filter with given id. Should always be called when watch is\n     * no longer needed.\n     *\n     * @param filterId The filter id.\n     * @returns `true` if the filter was successfully uninstalled, otherwise\n     * `false`.\n     * @example\n     * ```javascript\n     * const filterId = await provider.request({ method: \"eth_newFilter\", params: [] });\n     * const result = await provider.request({ method: \"eth_uninstallFilter\", params: [filterId] });\n     * console.log(result);\n     * ```\n     */\n    async eth_uninstallFilter(filterId) {\n        const id = utils_1.Quantity.from(filterId).toString();\n        const filter = __classPrivateFieldGet(this, _filters).get(id);\n        if (!filter)\n            return false;\n        filter.unsubscribe();\n        return __classPrivateFieldGet(this, _filters).delete(id);\n    }\n    /**\n     * Returns an array of all logs matching filter with given id.\n     *\n     * @param filterId The filter id.\n     * @returns Array of log objects, or an empty array.\n     * @example\n     * ```javascript\n     * // Logs.sol\n     * // // SPDX-License-Identifier: MIT\n     * // pragma solidity ^0.7.4;\n     * // contract Logs {\n     * //   event Event(uint256 indexed first, uint256 indexed second);\n     * //   constructor() {\n     * //     emit Event(1, 2);\n     * //   }\n     * //\n     * //   function logNTimes(uint8 n) public {\n     * //     for (uint8 i = 0; i < n; i++) {\n     * //       emit Event(i, i);\n     * //     }\n     * //   }\n     * // }\n     *\n     * const logsContract = \"0x608060405234801561001057600080fd5b50600260017f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a360e58061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635e19e69f14602d575b600080fd5b605960048036036020811015604157600080fd5b81019080803560ff169060200190929190505050605b565b005b60005b8160ff168160ff16101560ab578060ff168160ff167f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a38080600101915050605e565b505056fea26469706673582212201af9c13c7b00e2b628c1258d45f9f62d2aad8cd32fc32fd9515d8ad1e792679064736f6c63430007040033\";\n     * const [from] = await provider.send(\"eth_accounts\");\n     * const filterId = await provider.send(\"eth_newFilter\");\n     *\n     * await provider.send(\"eth_subscribe\", [\"newHeads\"]);\n     * await provider.send(\"eth_sendTransaction\", [{ from, data: logsContract, gas: \"0x5b8d80\" }] );\n     * await provider.once(\"message\");\n     *\n     * const logs = await provider.request({ method: \"eth_getFilterLogs\", params: [filterId] });\n     * console.log(logs);\n     * ```\n     */\n    async eth_getFilterLogs(filterId) {\n        const filter = __classPrivateFieldGet(this, _filters).get(utils_1.Quantity.from(filterId).toString());\n        if (filter && filter.type === ethereum_utils_1.FilterTypes.log) {\n            return this.eth_getLogs(filter.filter);\n        }\n        else {\n            throw new Error(\"filter not found\");\n        }\n    }\n    /**\n     * Returns an array of all logs matching a given filter object.\n     *\n     * Filter options:\n     * * `fromBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * * `toBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * * `address`: `DATA | Array` (optional) - Contract address or a list of addresses from which the logs should originate.\n     * * `topics`: `Array of DATA` (optional) - Array of 32 Bytes `DATA` topcis. Topics are order-dependent. Each topic can also\n     * be an array of `DATA` with \"or\" options.\n     * * `blockHash`: `DATA`, 32 Bytes (optional) - Hash of the block to restrict logs from. If `blockHash` is present,\n     * then neither `fromBlock` or `toBlock` are allowed.\n     *\n     * @param filter The filter options as seen in source.\n     * @returns Array of log objects, or an empty array.\n     * @example\n     * ```javascript\n     * // Logs.sol\n     * // // SPDX-License-Identifier: MIT\n     * // pragma solidity ^0.7.4;\n     * // contract Logs {\n     * //   event Event(uint256 indexed first, uint256 indexed second);\n     * //   constructor() {\n     * //     emit Event(1, 2);\n     * //   }\n     * //\n     * //   function logNTimes(uint8 n) public {\n     * //     for (uint8 i = 0; i < n; i++) {\n     * //       emit Event(i, i);\n     * //     }\n     * //   }\n     * // }\n     *\n     * const logsContract = \"0x608060405234801561001057600080fd5b50600260017f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a360e58061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635e19e69f14602d575b600080fd5b605960048036036020811015604157600080fd5b81019080803560ff169060200190929190505050605b565b005b60005b8160ff168160ff16101560ab578060ff168160ff167f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a38080600101915050605e565b505056fea26469706673582212201af9c13c7b00e2b628c1258d45f9f62d2aad8cd32fc32fd9515d8ad1e792679064736f6c63430007040033\";\n     * const [from] = await provider.send(\"eth_accounts\");\n     *\n     * await provider.send(\"eth_subscribe\", [\"newHeads\"]);\n     * const txHash = await provider.send(\"eth_sendTransaction\", [{ from, data: logsContract, gas: \"0x5b8d80\" }] );\n     * await provider.once(\"message\");\n     *\n     * const { contractAddress } = await provider.send(\"eth_getTransactionReceipt\", [txHash] );\n     *\n     * const logs = await provider.request({ method: \"eth_getLogs\", params: [{ address: contractAddress }] });\n     * console.log(logs);\n     * ```\n     */\n    async eth_getLogs(filter) {\n        return __classPrivateFieldGet(this, _blockchain).blockLogs.getLogs(filter);\n    }\n    /**\n     * Returns the number of transactions sent from an address.\n     *\n     * @param address `DATA`, 20 Bytes - The address to get number of transactions sent from\n     * @param blockNumber Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * @returns Number of transactions sent from this address.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const txCount = await provider.request({ method: \"eth_getTransactionCount\", params: [ from, \"latest\" ] });\n     * console.log(txCount);\n     * ```\n     */\n    async eth_getTransactionCount(address, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        return __classPrivateFieldGet(this, _blockchain).accounts.getNonce(ethereum_address_1.Address.from(address), blockNumber);\n    }\n    /**\n     * Executes a new message call immediately without creating a transaction on the block chain.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction - The transaction call object as seen in source.\n     * @param blockNumber Integer block number, or the string \"latest\", \"earliest\"\n     *  or \"pending\".\n     *\n     * @returns The return value of executed contract.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const txObj = { from, gas: \"0x5b8d80\", gasPrice: \"0x1dfd14000\", value:\"0x0\", data: simpleSol };\n     * const result = await provider.request({ method: \"eth_call\", params: [txObj, \"latest\"] });\n     * console.log(result);\n     * ```\n     */\n    async eth_call(transaction, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const common = __classPrivateFieldGet(this, _blockchain).common;\n        const blocks = blockchain.blocks;\n        const parentBlock = await blocks.get(blockNumber);\n        const parentHeader = parentBlock.header;\n        const options = __classPrivateFieldGet(this, _options);\n        let gas;\n        if (typeof transaction.gasLimit === \"undefined\") {\n            if (typeof transaction.gas !== \"undefined\") {\n                gas = utils_1.Quantity.from(transaction.gas);\n            }\n            else {\n                // eth_call isn't subject to regular transaction gas limits by default\n                gas = options.miner.callGasLimit;\n            }\n        }\n        else {\n            gas = utils_1.Quantity.from(transaction.gasLimit);\n        }\n        let data;\n        if (typeof transaction.data === \"undefined\") {\n            if (typeof transaction.input !== \"undefined\") {\n                data = utils_1.Data.from(transaction.input);\n            }\n        }\n        else {\n            data = utils_1.Data.from(transaction.data);\n        }\n        // eth_call doesn't validate that the transaction has a sufficient\n        // \"effectiveGasPrice\". however, if `maxPriorityFeePerGas` or\n        // `maxFeePerGas` values are set, the baseFeePerGas is used to calculate\n        // the effectiveGasPrice, which is used to calculate tx costs/refunds.\n        const baseFeePerGasBigInt = ethereum_block_1.Block.calcNextBaseFee(parentBlock);\n        let gasPrice;\n        const hasGasPrice = typeof transaction.gasPrice !== \"undefined\";\n        if (!common.isActivatedEIP(1559)) {\n            gasPrice = utils_1.Quantity.from(hasGasPrice ? 0 : transaction.gasPrice);\n        }\n        else {\n            const hasMaxFeePerGas = typeof transaction.maxFeePerGas !== \"undefined\";\n            const hasMaxPriorityFeePerGas = typeof transaction.maxPriorityFeePerGas !== \"undefined\";\n            if (hasGasPrice && (hasMaxFeePerGas || hasMaxPriorityFeePerGas)) {\n                throw new Error(\"both gasPrice and (maxFeePerGas or maxPriorityFeePerGas) specified\");\n            }\n            // User specified 1559 gas fields (or none), use those\n            let maxFeePerGas = 0n;\n            let maxPriorityFeePerGas = 0n;\n            if (hasMaxFeePerGas) {\n                maxFeePerGas = BigInt(transaction.maxFeePerGas);\n            }\n            if (hasMaxPriorityFeePerGas) {\n                maxPriorityFeePerGas = BigInt(transaction.maxPriorityFeePerGas);\n            }\n            if (maxPriorityFeePerGas > 0 || maxFeePerGas > 0) {\n                const a = maxFeePerGas - baseFeePerGasBigInt;\n                const tip = a < maxPriorityFeePerGas ? a : maxPriorityFeePerGas;\n                gasPrice = utils_1.Quantity.from(baseFeePerGasBigInt + tip);\n            }\n            else {\n                gasPrice = utils_1.Quantity.from(0);\n            }\n        }\n        const block = new ethereum_block_1.RuntimeBlock(parentHeader.number, parentHeader.parentHash, blockchain.coinbase, gas.toBuffer(), parentHeader.gasUsed.toBuffer(), parentHeader.timestamp, options.miner.difficulty, parentHeader.totalDifficulty, baseFeePerGasBigInt);\n        const simulatedTransaction = {\n            gas,\n            // if we don't have a from address, our caller sut be the configured coinbase address\n            from: transaction.from == null\n                ? blockchain.coinbase\n                : ethereum_address_1.Address.from(transaction.from),\n            to: transaction.to == null ? null : ethereum_address_1.Address.from(transaction.to),\n            gasPrice,\n            value: transaction.value == null ? null : utils_1.Quantity.from(transaction.value),\n            data,\n            block\n        };\n        return blockchain.simulateTransaction(simulatedTransaction, parentBlock);\n    }\n    //#endregion\n    //#region debug\n    /**\n     * Attempt to run the transaction in the exact same manner as it was executed\n     * on the network. It will replay any transaction that may have been executed\n     * prior to this one before it will finally attempt to execute the transaction\n     * that corresponds to the given hash.\n     *\n     * In addition to the hash of the transaction you may give it a secondary\n     * optional argument, which specifies the options for this specific call.\n     * The possible options are:\n     *\n     * * `disableStorage`: \\{boolean\\} Setting this to `true` will disable storage capture (default = `false`).\n     * * `disableMemory`: \\{boolean\\} Setting this to `true` will disable memory capture (default = `false`).\n     * * `disableStack`: \\{boolean\\} Setting this to `true` will disable stack capture (default = `false`).\n     *\n     * @param transactionHash Hash of the transaction to trace.\n     * @param options - See options in source.\n     * @returns Returns the `gas`, `structLogs`, and `returnValue` for the traced transaction.\n     *\n     * The `structLogs` are an array of logs, which contains the following fields:\n     * * `depth`: The execution depth.\n     * * `error`: Information about an error, if one occurred.\n     * * `gas`: The number of gas remaining.\n     * * `gasCost`: The cost of gas in wei.\n     * * `memory`: An array containing the contract's memory data.\n     * * `op`: The current opcode.\n     * * `pc`: The current program counter.\n     * * `stack`: The EVM execution stack.\n     * * `storage`: An object containing the contract's storage data.\n     *\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const transactionTrace = await provider.request({ method: \"debug_traceTransaction\", params: [txHash] });\n     * console.log(transactionTrace);\n     * ```\n     */\n    async debug_traceTransaction(transactionHash, options) {\n        return __classPrivateFieldGet(this, _blockchain).traceTransaction(transactionHash, options || {});\n    }\n    // TODO: example doesn't return correct value\n    /**\n     * Attempts to replay the transaction as it was executed on the network and\n     * return storage data given a starting key and max number of entries to return.\n     *\n     * @param blockHash Hash of a block.\n     * @param transactionIndex Integer of the transaction index position.\n     * @param contractAddress Address of the contract.\n     * @param startKey Hash of the start key for grabbing storage entries.\n     * @param maxResult Integer of maximum number of storage entries to return.\n     * @returns Returns a storage object with the keys being keccak-256 hashes of the storage keys,\n     * and the values being the raw, unhashed key and value for that specific storage slot. Also\n     * returns a next key which is the keccak-256 hash of the next key in storage for continuous downloading.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const initialTxHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const {contractAddress} = await provider.request({ method: \"eth_getTransactionReceipt\", params: [initialTxHash] });\n     *\n     * // set value to 19\n     * const data = \"0x552410770000000000000000000000000000000000000000000000000000000000000019\";\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to: contractAddress, data }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const { blockHash, transactionIndex } = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const storage = await provider.request({ method: \"debug_storageRangeAt\", params: [blockHash, transactionIndex, contractAddress, \"0x01\", 1] });\n     * console.log(storage);\n     * ```\n     */\n    async debug_storageRangeAt(blockHash, transactionIndex, contractAddress, startKey, maxResult) {\n        return __classPrivateFieldGet(this, _blockchain).storageRangeAt(blockHash, utils_1.Quantity.from(transactionIndex).toNumber(), contractAddress, startKey, utils_1.Quantity.from(maxResult).toNumber());\n    }\n    //#endregion\n    //#region personal\n    /**\n     * Returns all the Ethereum account addresses of all keys that have been\n     * added.\n     * @returns The Ethereum account addresses of all keys that have been added.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"personal_listAccounts\"));\n     * ```\n     */\n    async personal_listAccounts() {\n        return __classPrivateFieldGet(this, _wallet).addresses;\n    }\n    // TODO: example doesn't return correct value\n    /**\n     * Generates a new account with private key. Returns the address of the new\n     * account.\n     * @param passphrase The passphrase to encrypt the private key with.\n     * @returns The new account's address.\n     * @example\n     * ```javascript\n     * const passphrase = \"passphrase\";\n     * const address = await provider.send(\"personal_newAccount\", [passphrase] );\n     * console.log(address);\n     * ```\n     */\n    async personal_newAccount(passphrase) {\n        if (typeof passphrase !== \"string\") {\n            throw new Error(\"missing value for required argument `passphrase`\");\n        }\n        const wallet = __classPrivateFieldGet(this, _wallet);\n        const newAccount = wallet.createRandomAccount();\n        const address = newAccount.address;\n        const strAddress = address.toString();\n        const encryptedKeyFile = await wallet.encrypt(newAccount.privateKey, passphrase);\n        wallet.encryptedKeyFiles.set(strAddress, encryptedKeyFile);\n        wallet.addresses.push(strAddress);\n        wallet.knownAccounts.add(strAddress);\n        return newAccount.address;\n    }\n    /**\n     * Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase.\n     *\n     * @param rawKey The raw, unencrypted private key to import.\n     * @param passphrase The passphrase to encrypt with.\n     * @returns Returns the address of the new account.\n     * @example\n     * ```javascript\n     * const rawKey = \"0x0123456789012345678901234567890123456789012345678901234567890123\";\n     * const passphrase = \"passphrase\";\n     *\n     * const address = await provider.send(\"personal_importRawKey\",[rawKey, passphrase] );\n     * console.log(address);\n     * ```\n     */\n    async personal_importRawKey(rawKey, passphrase) {\n        if (typeof passphrase !== \"string\") {\n            throw new Error(\"missing value for required argument `passphrase`\");\n        }\n        const wallet = __classPrivateFieldGet(this, _wallet);\n        const newAccount = wallet_1.default.createAccountFromPrivateKey(utils_1.Data.from(rawKey));\n        const address = newAccount.address;\n        const strAddress = address.toString();\n        const encryptedKeyFile = await wallet.encrypt(newAccount.privateKey, passphrase);\n        wallet.encryptedKeyFiles.set(strAddress, encryptedKeyFile);\n        wallet.addresses.push(strAddress);\n        wallet.knownAccounts.add(strAddress);\n        return newAccount.address;\n    }\n    /**\n     * Locks the account. The account can no longer be used to send transactions.\n     * @param address The account address to be locked.\n     * @returns Returns `true` if the account was locked, otherwise `false`.\n     * @example\n     * ```javascript\n     * const [account] = await provider.send(\"personal_listAccounts\");\n     * const isLocked = await provider.send(\"personal_lockAccount\", [account] );\n     * console.log(isLocked);\n     * ```\n     */\n    async personal_lockAccount(address) {\n        return __classPrivateFieldGet(this, _wallet).lockAccount(address.toLowerCase());\n    }\n    // TODO: example doesn't return correct value\n    /**\n     * Unlocks the account for use.\n     *\n     * The unencrypted key will be held in memory until the unlock duration\n     * expires. The unlock duration defaults to 300 seconds. An explicit duration\n     * of zero seconds unlocks the key until geth exits.\n     *\n     * The account can be used with `eth_sign` and `eth_sendTransaction` while it is\n     * unlocked.\n     * @param address - 20 Bytes - The address of the account to unlock.\n     * @param passphrase - Passphrase to unlock the account.\n     * @param duration - (default: 300) Duration in seconds how long the account\n     * should remain unlocked for. Set to 0 to disable automatic locking.\n     * @returns `true` if it worked. Throws an error or returns `false` if it did not.\n     * @example\n     * ```javascript\n     * // generate an account\n     * const passphrase = \"passphrase\";\n     * const newAccount = await provider.send(\"personal_newAccount\", [passphrase] );\n     * const isUnlocked = await provider.send(\"personal_unlockAccount\", [newAccount, passphrase] );\n     * console.log(isUnlocked);\n     * ```\n     */\n    async personal_unlockAccount(address, passphrase, duration = 300) {\n        return __classPrivateFieldGet(this, _wallet).unlockAccount(address.toLowerCase(), passphrase, duration);\n    }\n    /**\n     * Validate the given passphrase and submit transaction.\n     *\n     * The transaction is the same argument as for `eth_sendTransaction` and\n     * contains the from address. If the passphrase can be used to decrypt the\n     * private key belonging to `tx.from` the transaction is verified, signed and\n     * send onto the network. The account is not unlocked globally in the node\n     * and cannot be used in other RPC calls.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param txData - The transaction call object as seen in source.\n     * @param passphrase - The passphrase to decrpyt the private key belonging to `tx.from`.\n     * @returns The transaction hash or if unsuccessful an error.\n     * @example\n     * ```javascript\n     * const passphrase = \"passphrase\";\n     * const newAccount = await provider.send(\"personal_newAccount\", [passphrase] );\n     * const [to] = await provider.send(\"personal_listAccounts\");\n     *\n     * // use account and passphrase to send the transaction\n     * const txHash = await provider.send(\"personal_sendTransaction\", [{ from: newAccount, to, gasLimit: \"0x5b8d80\" }, passphrase] );\n     * console.log(txHash);\n     * ```\n     */\n    async personal_sendTransaction(transaction, passphrase) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n        const from = tx.from;\n        if (from == null) {\n            throw new Error(\"from not found; is required\");\n        }\n        const fromString = tx.from.toString();\n        const wallet = __classPrivateFieldGet(this, _wallet);\n        const encryptedKeyFile = wallet.encryptedKeyFiles.get(fromString);\n        if (encryptedKeyFile === undefined) {\n            throw new Error(\"no key for given address or file\");\n        }\n        await autofillDefaultTransactionValues(tx, this.eth_estimateGas.bind(this), transaction, blockchain, __classPrivateFieldGet(this, _options));\n        if (encryptedKeyFile !== null) {\n            const secretKey = await wallet.decrypt(encryptedKeyFile, passphrase);\n            return blockchain.queueTransaction(tx, utils_1.Data.from(secretKey));\n        }\n        else {\n            return blockchain.queueTransaction(tx);\n        }\n    }\n    /**\n     * Validates the given passphrase and signs a transaction that can be\n     * submitted to the network at a later time using `eth_sendRawTransaction`.\n     *\n     * The transaction is the same argument as for `eth_signTransaction` and\n     * contains the from address. If the passphrase can be used to decrypt the\n     * private key belonging to `tx.from` the transaction is verified and signed.\n     * The account is not unlocked globally in the node and cannot be used in other RPC calls.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction - The transaction call object as seen in source.\n     * @returns The raw, signed transaction.\n     * @example\n     * ```javascript\n     * const [to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const passphrase = \"passphrase\";\n     * const from = await provider.send(\"personal_newAccount\", [passphrase] );\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const signedTx = await provider.request({ method: \"personal_signTransaction\", params: [{ from, to }, passphrase] });\n     * console.log(signedTx)\n     * ```\n     */\n    async personal_signTransaction(transaction, passphrase) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n        if (tx.from == null) {\n            throw new Error(\"from not found; is required\");\n        }\n        const fromString = tx.from.toString();\n        const wallet = __classPrivateFieldGet(this, _wallet);\n        const encryptedKeyFile = wallet.encryptedKeyFiles.get(fromString);\n        if (encryptedKeyFile === undefined || encryptedKeyFile === null) {\n            throw new Error(\"no key for given address or file\");\n        }\n        const secretKey = await wallet.decrypt(encryptedKeyFile, passphrase);\n        tx.signAndHash(secretKey);\n        return utils_1.Data.from(tx.serialized).toString();\n    }\n    //#endregion\n    //#region rpc\n    /**\n     * Returns object of RPC modules.\n     * @returns RPC modules.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"rpc_modules\"));\n     * ```\n     */\n    async rpc_modules() {\n        return RPC_MODULES;\n    }\n    //endregion\n    //#region shh\n    /**\n     * Creates new whisper identity in the client.\n     *\n     * @returns - The address of the new identity.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_newIdentity\"));\n     * ```\n     */\n    async shh_newIdentity() {\n        return \"0x00\";\n    }\n    /**\n     * Checks if the client hold the private keys for a given identity.\n     *\n     * @param address - The identity address to check.\n     * @returns Returns `true` if the client holds the private key for that identity, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_hasIdentity\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_hasIdentity(address) {\n        return false;\n    }\n    /**\n     * Creates a new group.\n     *\n     * @returns The address of the new group.\n     */\n    async shh_newGroup() {\n        return \"0x00\";\n    }\n    /**\n     * Adds a whisper identity to the group.\n     *\n     * @param address - The identity address to add to a group.\n     * @returns `true` if the identity was successfully added to the group, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_addToGroup\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_addToGroup(address) {\n        return false;\n    }\n    /**\n     * Creates filter to notify, when client receives whisper message matching the filter options.\n     *\n     * @param to - (optional) Identity of the receiver. When present it will try to decrypt any incoming message\n     *  if the client holds the private key to this identity.\n     * @param topics - Array of topics which the incoming message's topics should match.\n     * @returns Returns `true` if the identity was successfully added to the group, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_newFilter\", [\"0x0\", []] ));\n     * ```\n     */\n    async shh_newFilter(to, topics) {\n        return false;\n    }\n    /**\n     * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n     * Additionally filters timeout when they aren't requested with `shh_getFilterChanges` for a period of time.\n     *\n     * @param id - The filter id. Ex: \"0x7\"\n     * @returns `true` if the filter was successfully uninstalled, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_uninstallFilter\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_uninstallFilter(id) {\n        return false;\n    }\n    /**\n     * Polling method for whisper filters. Returns new messages since the last call of this method.\n     *\n     * @param id - The filter id. Ex: \"0x7\"\n     * @returns More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_getFilterChanges\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_getFilterChanges(id) {\n        return [];\n    }\n    /**\n     * Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\n     *\n     * @param id - The filter id. Ex: \"0x7\"\n     * @returns See: `shh_getFilterChanges`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_getMessages\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_getMessages(id) {\n        return false;\n    }\n    /**\n     * Creates a whisper message and injects it into the network for distribution.\n     *\n     * @param postData\n     * @returns Returns `true` if the message was sent, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_post\", [{}] ));\n     * ```\n     */\n    async shh_post(postData) {\n        return false;\n    }\n    /**\n     * Returns the current whisper protocol version.\n     *\n     * @returns The current whisper protocol version.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_version\"));\n     * ```\n     */\n    async shh_version() {\n        return \"2\";\n    }\n}\n_getId = new WeakMap(), _filters = new WeakMap(), _subscriptions = new WeakMap(), _options = new WeakMap(), _blockchain = new WeakMap(), _wallet = new WeakMap();\n__decorate([\n    assert_arg_length_1.assertArgLength(3)\n], EthereumApi.prototype, \"db_putString\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"db_getString\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(3)\n], EthereumApi.prototype, \"db_putHex\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"db_getHex\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"bzz_hive\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"bzz_info\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0, 1)\n], EthereumApi.prototype, \"evm_mine\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"evm_setAccountNonce\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"evm_increaseTime\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0, 1)\n], EthereumApi.prototype, \"evm_setTime\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"evm_revert\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0, 1)\n], EthereumApi.prototype, \"miner_start\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"miner_stop\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"miner_setGasPrice\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"miner_setEtherbase\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"miner_setExtra\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"web3_clientVersion\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"web3_sha3\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"net_version\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"net_listening\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"net_peerCount\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1, 2)\n], EthereumApi.prototype, \"eth_estimateGas\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_protocolVersion\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_syncing\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_coinbase\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1, 2)\n], EthereumApi.prototype, \"eth_getBlockByNumber\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1, 2)\n], EthereumApi.prototype, \"eth_getBlockByHash\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getBlockTransactionCountByNumber\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getBlockTransactionCountByHash\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_getCompilers\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"eth_getTransactionByBlockHashAndIndex\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"eth_getTransactionByBlockNumberAndIndex\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getUncleCountByBlockHash\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getUncleCountByBlockNumber\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"eth_getUncleByBlockHashAndIndex\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"eth_getUncleByBlockNumberAndIndex\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getWork\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(3)\n], EthereumApi.prototype, \"eth_submitWork\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"eth_submitHashrate\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_mining\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_hashrate\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_gasPrice\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_accounts\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_blockNumber\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_chainId\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1, 2)\n], EthereumApi.prototype, \"eth_getBalance\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1, 2)\n], EthereumApi.prototype, \"eth_getCode\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2, 3)\n], EthereumApi.prototype, \"eth_getStorageAt\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getTransactionByHash\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getTransactionReceipt\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_sendTransaction\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_signTransaction\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_sendRawTransaction\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"eth_sign\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"eth_signTypedData\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"eth_signTypedData_v4\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1, 2)\n], EthereumApi.prototype, \"eth_subscribe\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_unsubscribe\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_newBlockFilter\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"eth_newPendingTransactionFilter\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0, 1)\n], EthereumApi.prototype, \"eth_newFilter\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getFilterChanges\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_uninstallFilter\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getFilterLogs\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"eth_getLogs\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1, 2)\n], EthereumApi.prototype, \"eth_getTransactionCount\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1, 2)\n], EthereumApi.prototype, \"eth_call\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"personal_listAccounts\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"personal_newAccount\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"personal_importRawKey\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"personal_lockAccount\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2, 3)\n], EthereumApi.prototype, \"personal_unlockAccount\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"personal_sendTransaction\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"personal_signTransaction\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"rpc_modules\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"shh_newIdentity\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"shh_hasIdentity\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"shh_newGroup\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"shh_addToGroup\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(2)\n], EthereumApi.prototype, \"shh_newFilter\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"shh_uninstallFilter\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"shh_getFilterChanges\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"shh_getMessages\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(1)\n], EthereumApi.prototype, \"shh_post\", null);\n__decorate([\n    assert_arg_length_1.assertArgLength(0)\n], EthereumApi.prototype, \"shh_version\", null);\nexports.default = EthereumApi;\n//# sourceMappingURL=api.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _state, _miner, _blockBeingSavedPromise, _timer, _emitStepEvent, _database, _options, _instamine, _saveNewBlock, _emitNewBlock, _getTransactionLogOutput, _handleNewBlockData, _readyNextBlock, _isPaused, _commitAccounts, _initializeGenesisBlock, _timeAdjustment, _currentTime, _deleteBlockData, _snapshots, _traceTransaction, _prepareNextBlock;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Status = void 0;\nconst os_1 = require(\"os\");\nconst miner_1 = __importStar(require(\"./miner/miner\"));\nconst database_1 = __importDefault(require(\"./database\"));\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst common_1 = __importDefault(require(\"@ethereumjs/common\"));\nconst vm_1 = __importDefault(require(\"@ethereumjs/vm\"));\nconst exceptions_1 = require(\"@ethereumjs/vm/dist/exceptions\");\nconst utils_1 = require(\"@ganache/utils\");\nconst account_manager_1 = __importDefault(require(\"./data-managers/account-manager\"));\nconst block_manager_1 = __importDefault(require(\"./data-managers/block-manager\"));\nconst blocklog_manager_1 = __importDefault(require(\"./data-managers/blocklog-manager\"));\nconst transaction_manager_1 = __importDefault(require(\"./data-managers/transaction-manager\"));\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst ethereum_block_1 = require(\"@ganache/ethereum-block\");\nconst state_manager_1 = require(\"./forking/state-manager\");\nconst index_1 = require(\"@ethereumjs/vm/dist/state/index\");\nconst trie_1 = require(\"./helpers/trie\");\nconst trie_2 = require(\"./forking/trie\");\nconst precompiles_1 = require(\"./helpers/precompiles\");\nconst transaction_receipt_manager_1 = __importDefault(require(\"./data-managers/transaction-receipt-manager\"));\nconst utils_2 = require(\"@ganache/utils\");\nconst provider_events_1 = require(\"./provider-events\");\nconst mcl_wasm_1 = __importDefault(require(\"mcl-wasm\"));\nconst mclInitPromise = mcl_wasm_1.default.init(mcl_wasm_1.default.BLS12_381).then(() => {\n    mcl_wasm_1.default.setMapToMode(mcl_wasm_1.default.IRTF); // set the right map mode; otherwise mapToG2 will return wrong values.\n    mcl_wasm_1.default.verifyOrderG1(true); // subgroup checks for G1\n    mcl_wasm_1.default.verifyOrderG2(true); // subgroup checks for G2\n});\nvar Status;\n(function (Status) {\n    // Flags\n    Status[Status[\"started\"] = 1] = \"started\";\n    Status[Status[\"starting\"] = 2] = \"starting\";\n    Status[Status[\"stopped\"] = 4] = \"stopped\";\n    Status[Status[\"stopping\"] = 8] = \"stopping\";\n    Status[Status[\"paused\"] = 16] = \"paused\"; // 0001 0000\n})(Status = exports.Status || (exports.Status = {}));\n/**\n * Sets the provided VM state manager's state root *without* first\n * checking for checkpoints or flushing the existing cache.\n *\n * Useful if you know the state manager is not in a checkpoint and its internal\n * cache is safe to discard.\n *\n * @param stateManager\n * @param stateRoot\n */\nfunction setStateRootSync(stateManager, stateRoot) {\n    stateManager._trie.root = stateRoot;\n    stateManager._cache.clear();\n    stateManager._storageTries = {};\n}\nfunction makeTrie(blockchain, db, root) {\n    if (blockchain.fallback) {\n        return new trie_2.ForkTrie(db, root ? root.toBuffer() : null, blockchain);\n    }\n    else {\n        return new trie_1.GanacheTrie(db, root ? root.toBuffer() : null, blockchain);\n    }\n}\nfunction createCommon(chainId, networkId, hardfork) {\n    const common = common_1.default.forCustomChain(\n    // if we were given a chain id that matches a real chain, use it\n    // NOTE: I don't think Common serves a purpose other than instructing the\n    // VM what hardfork is in use. But just incase things change in the future\n    // its configured \"more correctly\" here.\n    utils_1.KNOWN_CHAINIDS.has(chainId) ? chainId : 1, {\n        name: \"ganache\",\n        networkId: networkId,\n        chainId: chainId,\n        comment: \"Local test network\"\n    }, hardfork);\n    // the VM likes to listen to \"hardforkChanged\" events from common, but:\n    //  a) we don't currently support changing hardforks\n    //  b) it can cause `MaxListenersExceededWarning`.\n    // Since we don't need it we overwrite .on to make it be quiet.\n    common.on = () => { };\n    return common;\n}\nclass Blockchain extends emittery_1.default.Typed {\n    /**\n     * Initializes the underlying Database and handles synchronization between\n     * the API and the database.\n     *\n     * Emits a `ready` event once the database and all dependencies are fully\n     * initialized.\n     * @param options\n     */\n    constructor(options, coinbase, fallback) {\n        super();\n        _state.set(this, Status.starting);\n        _miner.set(this, void 0);\n        _blockBeingSavedPromise.set(this, void 0);\n        /**\n         * When not instamining (blockTime > 0) this value holds the timeout timer.\n         */\n        _timer.set(this, null);\n        /**\n         * Because step events are expensive to create and emit, CPU-wise, we do it\n         * conditionally.\n         */\n        _emitStepEvent.set(this, false);\n        _database.set(this, void 0);\n        _options.set(this, void 0);\n        _instamine.set(this, void 0);\n        _saveNewBlock.set(this, ({ block, serialized, storageKeys, transactions }) => {\n            const { blocks } = this;\n            blocks.latest = block;\n            return __classPrivateFieldGet(this, _database).batch(() => {\n                const blockHash = block.hash();\n                const blockHeader = block.header;\n                const blockNumberQ = blockHeader.number;\n                const blockNumber = blockNumberQ.toBuffer();\n                const blockLogs = ethereum_utils_1.BlockLogs.create(blockHash);\n                const timestamp = blockHeader.timestamp;\n                const timestampStr = new Date(timestamp.toNumber() * 1000).toString();\n                const logOutput = [];\n                transactions.forEach((tx, i) => {\n                    const hash = tx.hash.toBuffer();\n                    const index = utils_1.Quantity.from(i);\n                    // save transaction to the database\n                    const serialized = tx.serializeForDb(blockHash, blockNumberQ, index);\n                    this.transactions.set(hash, serialized);\n                    // save receipt to the database\n                    const receipt = tx.getReceipt();\n                    const encodedReceipt = receipt.serialize(true);\n                    this.transactionReceipts.set(hash, encodedReceipt);\n                    // collect block logs\n                    tx.getLogs().forEach(blockLogs.append.bind(blockLogs, index, tx.hash));\n                    // prepare log output\n                    logOutput.push(__classPrivateFieldGet(this, _getTransactionLogOutput).call(this, hash, receipt, blockHeader.number, timestampStr, tx.execException));\n                });\n                // save storage keys to the database\n                storageKeys.forEach(value => {\n                    this.storageKeys.put(value.hashedKey, value.key);\n                });\n                blockLogs.blockNumber = blockHeader.number;\n                // save block logs to the database\n                this.blockLogs.set(blockNumber, blockLogs.serialize());\n                // save block to the database\n                blocks.putBlock(blockNumber, blockHash, serialized);\n                // output to the log, if we have data to output\n                if (logOutput.length > 0)\n                    __classPrivateFieldGet(this, _options).logging.logger.log(logOutput.join(os_1.EOL));\n                return { block, blockLogs, transactions };\n            });\n        });\n        _emitNewBlock.set(this, async (blockInfo) => {\n            const options = __classPrivateFieldGet(this, _options);\n            const { block, blockLogs, transactions } = blockInfo;\n            // emit the block once everything has been fully saved to the database\n            transactions.forEach(transaction => {\n                transaction.finalize(\"confirmed\", transaction.execException);\n            });\n            if (__classPrivateFieldGet(this, _instamine) && options.miner.legacyInstamine) {\n                // in legacy instamine mode we must delay the broadcast of new blocks\n                await new Promise(resolve => {\n                    process.nextTick(async () => {\n                        // emit block logs first so filters can pick them up before\n                        // block listeners are notified\n                        await Promise.all([\n                            this.emit(\"blockLogs\", blockLogs),\n                            this.emit(\"block\", block)\n                        ]);\n                        resolve(void 0);\n                    });\n                });\n            }\n            else {\n                // emit block logs first so filters can pick them up before\n                // block listeners are notified\n                await Promise.all([\n                    this.emit(\"blockLogs\", blockLogs),\n                    this.emit(\"block\", block)\n                ]);\n            }\n            return blockInfo;\n        });\n        _getTransactionLogOutput.set(this, (hash, receipt, blockNumber, timestamp, error) => {\n            let str = `${os_1.EOL}  Transaction: ${utils_1.Data.from(hash)}${os_1.EOL}`;\n            const contractAddress = receipt.contractAddress;\n            if (contractAddress != null) {\n                str += `  Contract created: ${ethereum_address_1.Address.from(contractAddress)}${os_1.EOL}`;\n            }\n            str += `  Gas usage: ${utils_1.Quantity.from(receipt.raw[1]).toNumber()}\n  Block number: ${blockNumber.toNumber()}\n  Block time: ${timestamp}${os_1.EOL}`;\n            if (error) {\n                str += `  Runtime error: ${error.data.message}${os_1.EOL}`;\n                if (error.data.reason) {\n                    str += `  Revert reason: ${error.data.reason}${os_1.EOL}`;\n                }\n            }\n            return str;\n        });\n        _handleNewBlockData.set(this, async (blockData) => {\n            __classPrivateFieldSet(this, _blockBeingSavedPromise, __classPrivateFieldGet(this, _blockBeingSavedPromise).then(() => __classPrivateFieldGet(this, _saveNewBlock).call(this, blockData))\n                .then(__classPrivateFieldGet(this, _emitNewBlock)));\n            return __classPrivateFieldGet(this, _blockBeingSavedPromise);\n        });\n        _readyNextBlock.set(this, (previousBlock, timestamp) => {\n            const previousHeader = previousBlock.header;\n            const previousNumber = previousHeader.number.toBigInt() || 0n;\n            return new ethereum_block_1.RuntimeBlock(utils_1.Quantity.from(previousNumber + 1n), previousBlock.hash(), this.coinbase, __classPrivateFieldGet(this, _options).miner.blockGasLimit.toBuffer(), utils_2.BUFFER_ZERO, utils_1.Quantity.from(timestamp == null ? __classPrivateFieldGet(this, _currentTime).call(this) : timestamp), __classPrivateFieldGet(this, _options).miner.difficulty, previousHeader.totalDifficulty, ethereum_block_1.Block.calcNextBaseFee(previousBlock));\n        });\n        this.isStarted = () => {\n            return __classPrivateFieldGet(this, _state) === Status.started;\n        };\n        this.mine = async (maxTransactions, timestamp, onlyOneBlock = false) => {\n            await __classPrivateFieldGet(this, _blockBeingSavedPromise);\n            const nextBlock = __classPrivateFieldGet(this, _readyNextBlock).call(this, this.blocks.latest, timestamp);\n            return __classPrivateFieldGet(this, _miner).mine(nextBlock, maxTransactions, onlyOneBlock);\n        };\n        _isPaused.set(this, () => {\n            return (__classPrivateFieldGet(this, _state) & Status.paused) !== 0;\n        });\n        this.createVmFromStateTrie = async (stateTrie, allowUnlimitedContractSize, activatePrecompile) => {\n            const blocks = this.blocks;\n            // ethereumjs vm doesn't use the callback style anymore\n            const blockchain = {\n                getBlock: async (number) => {\n                    const block = await blocks.get(number.toBuffer()).catch(_ => null);\n                    return block ? { hash: () => block.hash().toBuffer() } : null;\n                }\n            };\n            const common = this.common;\n            const vm = new vm_1.default({\n                state: stateTrie,\n                activatePrecompiles: false,\n                common,\n                allowUnlimitedContractSize,\n                blockchain,\n                stateManager: this.fallback\n                    ? new state_manager_1.ForkStateManager({ common, trie: stateTrie })\n                    : new index_1.DefaultStateManager({ common, trie: stateTrie })\n            });\n            if (activatePrecompile) {\n                await precompiles_1.activatePrecompiles(vm.stateManager);\n                if (common.isActivatedEIP(2537)) {\n                    // BLS12-381 curve, not yet included in any supported hardforks\n                    // but probably will be in the Shanghai hardfork\n                    // TODO: remove above comment once Shanghai is supported!\n                    await mclInitPromise; // ensure that mcl is initialized!\n                }\n            }\n            // skip `vm.init`, since we don't use any of it\n            vm._isInitialized = true;\n            return vm;\n        };\n        _commitAccounts.set(this, (accounts) => {\n            return Promise.all(accounts.map(account => this.trie.put(account.address.toBuffer(), account.serialize())));\n        });\n        _initializeGenesisBlock.set(this, async (timestamp, blockGasLimit, initialAccounts) => {\n            if (this.fallback != null) {\n                const { block: fallbackBlock } = this.fallback;\n                const { miner: minerOptions } = __classPrivateFieldGet(this, _options);\n                // commit accounts, but for forking.\n                const stateManager = this.vm.stateManager;\n                await stateManager.checkpoint();\n                initialAccounts.forEach(acc => {\n                    const a = { buf: acc.address.toBuffer() };\n                    stateManager._cache.put(a, acc);\n                    stateManager.touchAccount(a);\n                });\n                await stateManager.commit();\n                // create the genesis block\n                let baseFeePerGas;\n                if (this.common.isActivatedEIP(1559)) {\n                    if (fallbackBlock.header.baseFeePerGas === undefined) {\n                        baseFeePerGas = ethereum_block_1.Block.INITIAL_BASE_FEE_PER_GAS;\n                    }\n                    else {\n                        baseFeePerGas = fallbackBlock.header.baseFeePerGas.toBigInt();\n                    }\n                }\n                const genesis = new ethereum_block_1.RuntimeBlock(utils_1.Quantity.from(fallbackBlock.header.number.toBigInt() + 1n), fallbackBlock.hash(), this.coinbase, blockGasLimit.toBuffer(), utils_2.BUFFER_ZERO, utils_1.Quantity.from(timestamp), minerOptions.difficulty, fallbackBlock.header.totalDifficulty, baseFeePerGas);\n                // store the genesis block in the database\n                const { block, serialized } = genesis.finalize(ethereumjs_util_1.KECCAK256_RLP, ethereumjs_util_1.KECCAK256_RLP, utils_1.BUFFER_256_ZERO, this.trie.root, 0n, minerOptions.extraData, [], new Map());\n                const hash = block.hash();\n                return this.blocks\n                    .putBlock(block.header.number.toBuffer(), hash, serialized)\n                    .then(_ => ({\n                    block,\n                    blockLogs: ethereum_utils_1.BlockLogs.create(hash)\n                }));\n            }\n            await __classPrivateFieldGet(this, _commitAccounts).call(this, initialAccounts);\n            // README: block `0` is weird in that a `0` _should_ be hashed as `[]`,\n            // instead of `[0]`, so we set it to `RPCQUANTITY_EMPTY` instead of\n            // `RPCQUANTITY_ZERO` here. A few lines down in this function we swap\n            // this `RPCQUANTITY_EMPTY` for `RPCQUANTITY_ZERO`. This is all so we don't\n            // have to have a \"treat empty as 0` check in every function that uses the\n            // \"latest\" block (which this genesis block will be for brief moment).\n            const rawBlockNumber = utils_1.RPCQUANTITY_EMPTY;\n            // create the genesis block\n            const baseFeePerGas = this.common.isActivatedEIP(1559)\n                ? ethereum_block_1.Block.INITIAL_BASE_FEE_PER_GAS\n                : undefined;\n            const genesis = new ethereum_block_1.RuntimeBlock(rawBlockNumber, utils_1.Data.from(utils_1.BUFFER_32_ZERO), this.coinbase, blockGasLimit.toBuffer(), utils_2.BUFFER_ZERO, utils_1.Quantity.from(timestamp), __classPrivateFieldGet(this, _options).miner.difficulty, utils_1.RPCQUANTITY_ZERO, // we start the totalDifficulty at 0\n            baseFeePerGas);\n            // store the genesis block in the database\n            const { block, serialized } = genesis.finalize(ethereumjs_util_1.KECCAK256_RLP, ethereumjs_util_1.KECCAK256_RLP, utils_1.BUFFER_256_ZERO, this.trie.root, 0n, __classPrivateFieldGet(this, _options).miner.extraData, [], new Map());\n            // README: set the block number to an actual 0 now.\n            block.header.number = utils_1.RPCQUANTITY_ZERO;\n            const hash = block.hash();\n            return this.blocks\n                .putBlock(block.header.number.toBuffer(), hash, serialized)\n                .then(_ => ({\n                block,\n                blockLogs: ethereum_utils_1.BlockLogs.create(hash)\n            }));\n        });\n        _timeAdjustment.set(this, 0);\n        /**\n         * Returns the timestamp, adjusted by the timeAdjustment offset, in seconds.\n         */\n        _currentTime.set(this, () => {\n            return Math.floor((Date.now() + __classPrivateFieldGet(this, _timeAdjustment)) / 1000);\n        });\n        _deleteBlockData.set(this, async (blocksToDelete) => {\n            // if we are forking we need to make sure we clean up the forking related\n            // metadata that isn't stored in the trie\n            if (\"revertMetaData\" in this.trie) {\n                await this.trie.revertMetaData(blocksToDelete[blocksToDelete.length - 1].header.number, blocksToDelete[0].header.number);\n            }\n            await __classPrivateFieldGet(this, _database).batch(() => {\n                const { blocks, transactions, transactionReceipts, blockLogs } = this;\n                blocksToDelete.forEach(block => {\n                    block.getTransactions().forEach(tx => {\n                        const txHash = tx.hash.toBuffer();\n                        transactions.del(txHash);\n                        transactionReceipts.del(txHash);\n                    });\n                    const blockNum = block.header.number.toBuffer();\n                    blocks.del(blockNum);\n                    blocks.del(block.hash().toBuffer());\n                    blockLogs.del(blockNum);\n                });\n            });\n        });\n        // TODO(stability): this.#snapshots is a potential unbound memory suck. Caller\n        // could call `evm_snapshot` over and over to grow the snapshot stack\n        // indefinitely. `this.#snapshots.blocks` is even worse. To solve this we\n        // might need to store in the db. An unlikely real problem, but possible.\n        _snapshots.set(this, {\n            snaps: [],\n            blocks: null,\n            unsubscribeFromBlocks: null\n        });\n        _traceTransaction.set(this, async (transaction, trie, newBlock, options, keys, contractAddress) => {\n            let currentDepth = -1;\n            const storageStack = [];\n            const blocks = this.blocks;\n            // ethereumjs vm doesn't use the callback style anymore\n            const blockchain = {\n                getBlock: async (number) => {\n                    const block = await blocks.get(number.toBuffer()).catch(_ => null);\n                    return block ? { hash: () => block.hash().toBuffer() } : null;\n                }\n            };\n            const common = this.common;\n            const vm = await vm_1.default.create({\n                state: trie,\n                activatePrecompiles: false,\n                common,\n                allowUnlimitedContractSize: this.vm.allowUnlimitedContractSize,\n                blockchain,\n                stateManager: this.fallback\n                    ? new state_manager_1.ForkStateManager({ common, trie: trie })\n                    : new index_1.DefaultStateManager({ common, trie: trie })\n            });\n            const storage = {};\n            // TODO: gas could go theoretically go over Number.MAX_SAFE_INTEGER.\n            // (Ganache v2 didn't handle this possibility either, so it hasn't been\n            // updated yet)\n            let gas = 0;\n            const structLogs = [];\n            const TraceData = ethereum_utils_1.TraceDataFactory();\n            const transactionEventContext = {};\n            const stepListener = async (event, next) => {\n                // See these docs:\n                // https://github.com/ethereum/go-ethereum/wiki/Management-APIs\n                if (__classPrivateFieldGet(this, _emitStepEvent)) {\n                    this.emit(\"ganache:vm:tx:step\", provider_events_1.makeStepEvent(transactionEventContext, event));\n                }\n                const gasLeft = event.gasLeft.toNumber();\n                const totalGasUsedAfterThisStep = transaction.gasLimit.toNumber() - gasLeft;\n                const gasUsedPreviousStep = totalGasUsedAfterThisStep - gas;\n                gas += gasUsedPreviousStep;\n                const memory = [];\n                if (options.disableMemory !== true) {\n                    // We get the memory as one large array.\n                    // Let's cut it up into 32 byte chunks as required by the spec.\n                    let index = 0;\n                    while (index < event.memory.length) {\n                        const slice = event.memory.slice(index, index + 32);\n                        memory.push(TraceData.from(Buffer.from(slice)));\n                        index += 32;\n                    }\n                }\n                const stack = [];\n                if (options.disableStack !== true) {\n                    for (const stackItem of event.stack) {\n                        stack.push(TraceData.from(stackItem.toArrayLike(Buffer)));\n                    }\n                }\n                const structLog = {\n                    depth: event.depth + 1,\n                    error: \"\",\n                    gas: gasLeft,\n                    gasCost: 0,\n                    memory,\n                    op: event.opcode.name,\n                    pc: event.pc,\n                    stack,\n                    storage: null\n                };\n                // The gas difference calculated for each step is indicative of gas consumed in\n                // the previous step. Gas consumption in the final step will always be zero.\n                if (structLogs.length) {\n                    structLogs[structLogs.length - 1].gasCost = gasUsedPreviousStep;\n                }\n                if (options.disableStorage === true) {\n                    // Add the struct log as is - nothing more to do.\n                    structLogs.push(structLog);\n                    next();\n                }\n                else {\n                    const { depth: eventDepth } = event;\n                    if (currentDepth > eventDepth) {\n                        storageStack.pop();\n                    }\n                    else if (currentDepth < eventDepth) {\n                        storageStack.push(new ethereum_utils_1.TraceStorageMap());\n                    }\n                    currentDepth = eventDepth;\n                    switch (event.opcode.name) {\n                        case \"SSTORE\": {\n                            const key = stack[stack.length - 1];\n                            const value = stack[stack.length - 2];\n                            // new TraceStorageMap() here creates a shallow clone, to prevent other steps from overwriting\n                            structLog.storage = new ethereum_utils_1.TraceStorageMap(storageStack[eventDepth]);\n                            // Tell vm to move on to the next instruction. See below.\n                            structLogs.push(structLog);\n                            next();\n                            // assign after callback because this storage change actually takes\n                            // effect _after_ this opcode executes\n                            storageStack[eventDepth].set(key, value);\n                            break;\n                        }\n                        case \"SLOAD\": {\n                            const key = stack[stack.length - 1];\n                            const result = await vm.stateManager.getContractStorage(event.address, key.toBuffer());\n                            const value = TraceData.from(result);\n                            storageStack[eventDepth].set(key, value);\n                            // new TraceStorageMap() here creates a shallow clone, to prevent other steps from overwriting\n                            structLog.storage = new ethereum_utils_1.TraceStorageMap(storageStack[eventDepth]);\n                            structLogs.push(structLog);\n                            next();\n                            break;\n                        }\n                        default:\n                            // new TraceStorageMap() here creates a shallow clone, to prevent other steps from overwriting\n                            structLog.storage = new ethereum_utils_1.TraceStorageMap(storageStack[eventDepth]);\n                            structLogs.push(structLog);\n                            next();\n                    }\n                }\n            };\n            // Don't even let the vm try to flush the block's _cache to the stateTrie.\n            // When forking some of the data that the traced function may request will\n            // exist only on the main chain. Because we pretty much lie to the VM by\n            // telling it we DO have data in our Trie, when we really don't, it gets\n            // lost during the commit phase when it traverses the \"borrowed\" datum's\n            // trie (as it may not have a valid root). Because this is a trace, and we\n            // don't need to commit the data, duck punching the `flush` method (the\n            // simplest method I could find) is fine.\n            // Remove this and you may see the infamous\n            // `Uncaught TypeError: Cannot read property 'pop' of undefined` error!\n            vm.stateManager._cache.flush = () => { };\n            // Process the block without committing the data.\n            // The vmerr key on the result appears to be removed.\n            // The previous implementation had specific error handling.\n            // It's possible we've removed handling specific cases in this implementation.\n            // e.g., the previous incantation of RuntimeError\n            await vm.stateManager.checkpoint();\n            try {\n                for (let i = 0, l = newBlock.transactions.length; i < l; i++) {\n                    const tx = newBlock.transactions[i];\n                    if (tx === transaction) {\n                        if (keys && contractAddress) {\n                            const database = __classPrivateFieldGet(this, _database);\n                            const ejsContractAddress = { buf: contractAddress };\n                            await Promise.all(keys.map(async (key) => {\n                                // get the raw key using the hashed key\n                                const rawKey = await database.storageKeys.get(key);\n                                const result = await vm.stateManager.getContractStorage(ejsContractAddress, rawKey);\n                                storage[utils_1.Data.from(key, key.length).toString()] = {\n                                    key: utils_1.Data.from(rawKey, rawKey.length),\n                                    value: utils_1.Data.from(result, 32)\n                                };\n                            }));\n                            break;\n                        }\n                        else {\n                            vm.on(\"step\", stepListener);\n                            // force the loop to break after running this transaction by setting\n                            // the current iteration past the end\n                            i = l;\n                        }\n                    }\n                    this.emit(\"ganache:vm:tx:before\", {\n                        context: transactionEventContext\n                    });\n                    await vm.runTx({ tx, block: newBlock });\n                    this.emit(\"ganache:vm:tx:after\", {\n                        context: transactionEventContext\n                    });\n                }\n                vm.removeListener(\"step\", stepListener);\n            }\n            finally {\n                await vm.stateManager.revert();\n            }\n            // send state results back\n            return {\n                gas,\n                structLogs,\n                returnValue: \"\",\n                storage\n            };\n        });\n        _prepareNextBlock.set(this, (targetBlock, parentBlock, transactionHash) => {\n            // Prepare the \"next\" block with necessary transactions\n            const newBlock = new ethereum_block_1.RuntimeBlock(utils_1.Quantity.from((parentBlock.header.number.toBigInt() || 0n) + 1n), parentBlock.hash(), parentBlock.header.miner, parentBlock.header.gasLimit.toBuffer(), utils_2.BUFFER_ZERO, \n            // make sure we use the same timestamp as the target block\n            targetBlock.header.timestamp, __classPrivateFieldGet(this, _options).miner.difficulty, parentBlock.header.totalDifficulty, ethereum_block_1.Block.calcNextBaseFee(parentBlock));\n            newBlock.transactions = [];\n            newBlock.uncleHeaders = [];\n            const transactions = targetBlock.getTransactions();\n            for (const tx of transactions) {\n                newBlock.transactions.push(tx.toVmTransaction());\n                // After including the target transaction, that's all we need to do.\n                if (tx.hash.toBuffer().equals(transactionHash)) {\n                    break;\n                }\n            }\n            return newBlock;\n        });\n        __classPrivateFieldSet(this, _options, options);\n        this.fallback = fallback;\n        const instamine = (__classPrivateFieldSet(this, _instamine, !options.miner.blockTime || options.miner.blockTime <= 0));\n        const legacyInstamine = options.miner.legacyInstamine;\n        {\n            // warnings and errors\n            if (legacyInstamine) {\n                console.info(\"Legacy instamining, where transactions are fully mined before the hash is returned, is deprecated and will be removed in the future.\");\n            }\n            if (!instamine) {\n                if (legacyInstamine) {\n                    console.info(\"Setting `legacyInstamine` to `true` has no effect when blockTime is non-zero\");\n                }\n                if (options.chain.vmErrorsOnRPCResponse) {\n                    console.info(\"Setting `vmErrorsOnRPCResponse` to `true` has no effect on transactions when blockTime is non-zero\");\n                }\n            }\n        }\n        this.coinbase = coinbase;\n        __classPrivateFieldSet(this, _database, new database_1.default(options.database, this));\n    }\n    async initialize(initialAccounts) {\n        const database = __classPrivateFieldGet(this, _database);\n        const options = __classPrivateFieldGet(this, _options);\n        const instamine = __classPrivateFieldGet(this, _instamine);\n        try {\n            let common;\n            if (this.fallback) {\n                await this.fallback.initialize();\n                await database.initialize();\n                common = this.common = this.fallback.common;\n                options.fork.blockNumber = this.fallback.blockNumber.toNumber();\n                options.chain.networkId = common.networkId();\n                options.chain.chainId = common.chainId();\n            }\n            else {\n                await database.initialize();\n                common = this.common = createCommon(options.chain.chainId, options.chain.networkId, options.chain.hardfork);\n            }\n            const blocks = (this.blocks = await block_manager_1.default.initialize(this, common, database.blockIndexes, database.blocks));\n            this.blockLogs = new blocklog_manager_1.default(database.blockLogs, this);\n            this.transactions = new transaction_manager_1.default(options.miner, common, this, database.transactions);\n            this.transactionReceipts = new transaction_receipt_manager_1.default(database.transactionReceipts, this);\n            this.accounts = new account_manager_1.default(this);\n            this.storageKeys = database.storageKeys;\n            // if we have a latest block, use it to set up the trie.\n            const { latest } = blocks;\n            {\n                let stateRoot;\n                if (latest) {\n                    __classPrivateFieldSet(this, _blockBeingSavedPromise, Promise.resolve({\n                        block: latest,\n                        blockLogs: null\n                    }));\n                    ({ stateRoot } = latest.header);\n                }\n                else {\n                    stateRoot = null;\n                }\n                this.trie = makeTrie(this, database.trie, stateRoot);\n            }\n            // create VM and listen to step events\n            this.vm = await this.createVmFromStateTrie(this.trie, options.chain.allowUnlimitedContractSize, true);\n            {\n                // create first block\n                let firstBlockTime;\n                if (options.chain.time != null) {\n                    // If we were given a timestamp, use it instead of the `_currentTime`\n                    const t = options.chain.time.getTime();\n                    firstBlockTime = Math.floor(t / 1000);\n                    this.setTime(t);\n                }\n                else {\n                    firstBlockTime = __classPrivateFieldGet(this, _currentTime).call(this);\n                }\n                // if we don't already have a latest block, create a genesis block!\n                if (!latest) {\n                    if (initialAccounts.length > 0) {\n                        await __classPrivateFieldGet(this, _commitAccounts).call(this, initialAccounts);\n                    }\n                    __classPrivateFieldSet(this, _blockBeingSavedPromise, __classPrivateFieldGet(this, _initializeGenesisBlock).call(this, firstBlockTime, options.miner.blockGasLimit, initialAccounts));\n                    blocks.earliest = blocks.latest = await __classPrivateFieldGet(this, _blockBeingSavedPromise).then(({ block }) => block);\n                }\n            }\n            {\n                // configure and start miner\n                const txPool = this.transactions.transactionPool;\n                const minerOpts = options.miner;\n                const miner = (__classPrivateFieldSet(this, _miner, new miner_1.default(minerOpts, txPool.executables, this.vm, __classPrivateFieldGet(this, _readyNextBlock))));\n                //#region re-emit miner events:\n                miner.on(\"ganache:vm:tx:before\", event => {\n                    this.emit(\"ganache:vm:tx:before\", event);\n                });\n                miner.on(\"ganache:vm:tx:step\", event => {\n                    if (!__classPrivateFieldGet(this, _emitStepEvent))\n                        return;\n                    this.emit(\"ganache:vm:tx:step\", event);\n                });\n                miner.on(\"ganache:vm:tx:after\", event => {\n                    this.emit(\"ganache:vm:tx:after\", event);\n                });\n                //#endregion\n                //#region automatic mining\n                const nullResolved = Promise.resolve(null);\n                const mineAll = (maxTransactions) => __classPrivateFieldGet(this, _isPaused).call(this) ? nullResolved : this.mine(maxTransactions);\n                if (instamine) {\n                    // insta mining\n                    // whenever the transaction pool is drained mine the txs into blocks\n                    txPool.on(\"drain\", mineAll.bind(null, miner_1.Capacity.Single));\n                }\n                else {\n                    // interval mining\n                    const wait = () => \n                    // unref, so we don't hold the chain open if nothing can interact with it\n                    utils_1.unref((__classPrivateFieldSet(this, _timer, setTimeout(next, minerOpts.blockTime * 1e3))));\n                    const next = () => mineAll(miner_1.Capacity.FillBlock).then(wait);\n                    wait();\n                }\n                //#endregion\n                miner.on(\"block\", __classPrivateFieldGet(this, _handleNewBlockData));\n                this.once(\"stop\").then(() => miner.clearListeners());\n            }\n        }\n        catch (e) {\n            // we failed to start up :-( bail!\n            __classPrivateFieldSet(this, _state, Status.stopping);\n            // ignore errors while stopping here, since we are already in an\n            // exceptional case\n            await this.stop().catch(_ => { });\n            throw e;\n        }\n        __classPrivateFieldSet(this, _state, Status.started);\n        this.emit(\"ready\");\n    }\n    pause() {\n        __classPrivateFieldSet(this, _state, __classPrivateFieldGet(this, _state) | Status.paused);\n    }\n    resume(_threads = 1) {\n        if (!__classPrivateFieldGet(this, _isPaused).call(this)) {\n            console.log(\"Warning: startMining called when miner was already started\");\n            return;\n        }\n        // toggles the `paused` bit\n        __classPrivateFieldSet(this, _state, __classPrivateFieldGet(this, _state) ^ Status.paused);\n        // if we are instamining mine a block right away\n        if (__classPrivateFieldGet(this, _instamine)) {\n            return this.mine(miner_1.Capacity.FillBlock);\n        }\n    }\n    /**\n     * @param seconds\n     * @returns the total time offset *in milliseconds*\n     */\n    increaseTime(seconds) {\n        if (seconds < 0) {\n            seconds = 0;\n        }\n        return (__classPrivateFieldSet(this, _timeAdjustment, __classPrivateFieldGet(this, _timeAdjustment) + seconds));\n    }\n    /**\n     * @param seconds\n     * @returns the total time offset *in milliseconds*\n     */\n    setTime(timestamp) {\n        return (__classPrivateFieldSet(this, _timeAdjustment, timestamp - Date.now()));\n    }\n    snapshot() {\n        const snapshots = __classPrivateFieldGet(this, _snapshots);\n        const snaps = snapshots.snaps;\n        // Subscription ids are based on the number of active snapshots. Weird? Yes.\n        // But it's the way it's been since the beginning so it just hasn't been\n        // changed. Feel free to change it so ids are unique if it bothers you\n        // enough.\n        const id = snaps.push({\n            block: this.blocks.latest,\n            timeAdjustment: __classPrivateFieldGet(this, _timeAdjustment)\n        });\n        // start listening to new blocks if this is the first snapshot\n        if (id === 1) {\n            snapshots.unsubscribeFromBlocks = this.on(\"block\", block => {\n                snapshots.blocks = {\n                    current: block.hash().toBuffer(),\n                    next: snapshots.blocks\n                };\n            });\n        }\n        __classPrivateFieldGet(this, _options).logging.logger.log(\"Saved snapshot #\" + id);\n        return id;\n    }\n    async revert(snapshotId) {\n        const rawValue = snapshotId.valueOf();\n        if (rawValue === null || rawValue === undefined) {\n            throw new Error(\"invalid snapshotId\");\n        }\n        __classPrivateFieldGet(this, _options).logging.logger.log(\"Reverting to snapshot #\" + snapshotId);\n        // snapshot ids can't be < 1, so we do a quick sanity check here\n        if (rawValue < 1n) {\n            return false;\n        }\n        const snapshots = __classPrivateFieldGet(this, _snapshots);\n        const snaps = snapshots.snaps;\n        const snapshotIndex = Number(rawValue - 1n);\n        const snapshot = snaps[snapshotIndex];\n        if (!snapshot) {\n            return false;\n        }\n        // pause processing new transactions...\n        await this.transactions.pause();\n        // then pause the miner, too.\n        await __classPrivateFieldGet(this, _miner).pause();\n        // wait for anything in the process of being saved to finish up\n        await __classPrivateFieldGet(this, _blockBeingSavedPromise);\n        // Pending transactions are always removed when you revert, even if they\n        // were present before the snapshot was created. Ideally, we'd remove only\n        // the new transactions.. but we'll leave that for another day.\n        this.transactions.clear();\n        const blocks = this.blocks;\n        const currentHash = blocks.latest.hash().toBuffer();\n        const snapshotBlock = snapshot.block;\n        const snapshotHeader = snapshotBlock.header;\n        const snapshotHash = snapshotBlock.hash().toBuffer();\n        // remove this and all stored snapshots after this snapshot\n        snaps.splice(snapshotIndex);\n        // if there are no more listeners, stop listening to new blocks\n        if (snaps.length === 0) {\n            snapshots.unsubscribeFromBlocks();\n        }\n        // if the snapshot's hash is different than the latest block's hash we've\n        // got new blocks to clean up.\n        if (!currentHash.equals(snapshotHash)) {\n            // if we've added blocks since we snapshotted we need to delete them and put\n            // some things back the way they were.\n            const blockPromises = [];\n            let blockList = snapshots.blocks;\n            while (blockList !== null) {\n                if (blockList.current.equals(snapshotHash))\n                    break;\n                blockPromises.push(blocks.getByHash(blockList.current));\n                blockList = blockList.next;\n            }\n            snapshots.blocks = blockList;\n            const blockData = await Promise.all(blockPromises);\n            await __classPrivateFieldGet(this, _deleteBlockData).call(this, blockData);\n            setStateRootSync(this.vm.stateManager, snapshotHeader.stateRoot.toBuffer());\n            blocks.latest = snapshotBlock;\n        }\n        // put our time adjustment back\n        __classPrivateFieldSet(this, _timeAdjustment, snapshot.timeAdjustment);\n        // resume mining\n        __classPrivateFieldGet(this, _miner).resume();\n        // resume processing transactions\n        this.transactions.resume();\n        return true;\n    }\n    async queueTransaction(transaction, secretKey) {\n        // NOTE: this.transactions.add *must* be awaited before returning the\n        // `transaction.hash()`, as the transactionPool may change the transaction\n        // (and thus its hash!)\n        // It may also throw Errors that must be returned to the caller.\n        const isExecutable = (await this.transactions.add(transaction, secretKey)) === true;\n        if (isExecutable) {\n            process.nextTick(this.emit.bind(this), \"pendingTransaction\", transaction);\n        }\n        const hash = transaction.hash;\n        if (__classPrivateFieldGet(this, _isPaused).call(this) || !__classPrivateFieldGet(this, _instamine)) {\n            return hash;\n        }\n        else {\n            if (__classPrivateFieldGet(this, _instamine) && __classPrivateFieldGet(this, _options).miner.legacyInstamine) {\n                // in legacyInstamine mode we must wait for the transaction to be saved\n                // before we can return the hash\n                const { status, error } = await transaction.once(\"finalized\");\n                // in legacyInstamine mode we must throw on all rejected transaction\n                // errors. We must also throw on `confirmed` transactions when\n                // vmErrorsOnRPCResponse is enabled.\n                if (error &&\n                    (status === \"rejected\" || __classPrivateFieldGet(this, _options).chain.vmErrorsOnRPCResponse))\n                    throw error;\n            }\n            return hash;\n        }\n    }\n    async simulateTransaction(transaction, parentBlock) {\n        let result;\n        const data = transaction.data;\n        let gasLimit = transaction.gas.toBigInt();\n        // subtract out the transaction's base fee from the gas limit before\n        // simulating the tx, because `runCall` doesn't account for raw gas costs.\n        const hasToAddress = transaction.to != null;\n        let to = null;\n        if (hasToAddress) {\n            const toBuf = transaction.to.toBuffer();\n            to = {\n                equals: (a) => toBuf.equals(a.buf),\n                buf: toBuf\n            };\n        }\n        else {\n            to = null;\n        }\n        const gasLeft = gasLimit - ethereum_transaction_1.calculateIntrinsicGas(data, hasToAddress, this.common);\n        const transactionContext = {};\n        this.emit(\"ganache:vm:tx:before\", {\n            context: transactionContext\n        });\n        if (gasLeft >= 0n) {\n            const stateTrie = this.trie.copy(false);\n            stateTrie.setContext(parentBlock.header.stateRoot.toBuffer(), null, parentBlock.header.number);\n            const vm = await this.createVmFromStateTrie(stateTrie, __classPrivateFieldGet(this, _options).chain.allowUnlimitedContractSize, false // precompiles have already been initialized in the stateTrie\n            );\n            // take a checkpoint so the `runCall` never writes to the trie. We don't\n            // commit/revert later because this stateTrie is ephemeral anyway.\n            vm.stateManager.checkpoint();\n            vm.on(\"step\", (event) => {\n                if (!__classPrivateFieldGet(this, _emitStepEvent))\n                    return;\n                const ganacheStepEvent = provider_events_1.makeStepEvent(transactionContext, event);\n                this.emit(\"ganache:vm:tx:step\", ganacheStepEvent);\n            });\n            const caller = transaction.from.toBuffer();\n            if (this.common.isActivatedEIP(2929)) {\n                const stateManager = vm.stateManager;\n                // handle Berlin hardfork warm storage reads\n                precompiles_1.warmPrecompiles(stateManager);\n                stateManager.addWarmedAddress(caller);\n                if (to)\n                    stateManager.addWarmedAddress(to.buf);\n            }\n            // we need to update the balance and nonce of the sender _before_\n            // we run this transaction so that things that rely on these values\n            // are correct (like contract creation!).\n            const fromAccount = await vm.stateManager.getAccount({\n                buf: caller\n            });\n            fromAccount.nonce.iaddn(1);\n            const txCost = new ethereumjs_util_1.BN((gasLimit * transaction.gasPrice.toBigInt()).toString());\n            fromAccount.balance.isub(txCost);\n            await vm.stateManager.putAccount({ buf: caller }, fromAccount);\n            // finally, run the call\n            result = await vm.runCall({\n                caller: {\n                    buf: caller,\n                    equals: (a) => caller.equals(a.buf)\n                },\n                data: transaction.data && transaction.data.toBuffer(),\n                gasPrice: new ethereumjs_util_1.BN(transaction.gasPrice.toBuffer()),\n                gasLimit: new ethereumjs_util_1.BN(utils_1.Quantity.from(gasLeft).toBuffer()),\n                to,\n                value: transaction.value == null\n                    ? new ethereumjs_util_1.BN(0)\n                    : new ethereumjs_util_1.BN(transaction.value.toBuffer()),\n                block: transaction.block\n            });\n        }\n        else {\n            result = {\n                execResult: {\n                    runState: { programCounter: 0 },\n                    exceptionError: new exceptions_1.VmError(exceptions_1.ERROR.OUT_OF_GAS),\n                    returnValue: utils_1.BUFFER_EMPTY\n                }\n            };\n        }\n        this.emit(\"ganache:vm:tx:after\", {\n            context: transactionContext\n        });\n        if (result.execResult.exceptionError) {\n            if (__classPrivateFieldGet(this, _options).chain.vmErrorsOnRPCResponse) {\n                // eth_call transactions don't really have a transaction hash\n                const hash = utils_1.RPCQUANTITY_EMPTY;\n                throw new ethereum_utils_1.RuntimeError(hash, result, ethereum_utils_1.RETURN_TYPES.RETURN_VALUE);\n            }\n            else {\n                return utils_1.Data.from(result.execResult.returnValue || \"0x\");\n            }\n        }\n        else {\n            return utils_1.Data.from(result.execResult.returnValue || \"0x\");\n        }\n    }\n    /**\n     * traceTransaction\n     *\n     * Run a previously-run transaction in the same state in which it occurred at the time it was run.\n     * This will return the vm-level trace output for debugging purposes.\n     *\n     * Strategy:\n     *\n     *  1. Find block where transaction occurred\n     *  2. Set state root of that block\n     *  3. Rerun every transaction in that block prior to and including the requested transaction\n     *  4. Send trace results back.\n     *\n     * @param transactionHash\n     * @param options\n     */\n    async traceTransaction(transactionHash, options) {\n        const transactionHashBuffer = utils_1.Data.from(transactionHash).toBuffer();\n        // #1 - get block via transaction object\n        const transaction = await this.transactions.get(transactionHashBuffer);\n        if (!transaction) {\n            throw new Error(\"Unknown transaction \" + transactionHash);\n        }\n        const targetBlock = await this.blocks.getByHash(transaction.blockHash.toBuffer());\n        const parentBlock = await this.blocks.getByHash(targetBlock.header.parentHash.toBuffer());\n        const newBlock = __classPrivateFieldGet(this, _prepareNextBlock).call(this, targetBlock, parentBlock, transactionHashBuffer);\n        // #2 - Set state root of original block\n        //\n        // TODO: Forking needs the forked block number passed during this step:\n        // https://github.com/trufflesuite/ganache/blob/develop/lib/blockchain_double.js#L917\n        const trie = this.trie.copy();\n        trie.setContext(parentBlock.header.stateRoot.toBuffer(), null, parentBlock.header.number);\n        // #3 - Rerun every transaction in block prior to and including the requested transaction\n        const { gas, structLogs, returnValue, storage } = await __classPrivateFieldGet(this, _traceTransaction).call(this, newBlock.transactions[transaction.index.toNumber()], trie, newBlock, options);\n        // #4 - Send results back\n        return { gas, structLogs, returnValue, storage };\n    }\n    /**\n     * storageRangeAt\n     *\n     * Returns a contract's storage given a starting key and max number of\n     * entries to return.\n     *\n     * Strategy:\n     *\n     *  1. Find block where transaction occurred\n     *  2. Set state root of that block\n     *  3. Use contract address storage trie to get the storage keys from the transaction\n     *  4. Sort and filter storage keys using the startKey and maxResult\n     *  5. Rerun every transaction in that block prior to and including the requested transaction\n     *  6. Send storage results back\n     *\n     * @param blockHash\n     * @param txIndex\n     * @param contractAddress\n     * @param startKey\n     * @param maxResult\n     */\n    async storageRangeAt(blockHash, txIndex, contractAddress, startKey, maxResult) {\n        // #1 - get block information\n        const targetBlock = await this.blocks.getByHash(blockHash);\n        // get transaction using txIndex\n        const transactions = targetBlock.getTransactions();\n        const transaction = transactions[txIndex];\n        if (!transaction) {\n            throw new Error(`transaction index ${txIndex} is out of range for block ${blockHash}`);\n        }\n        // #2 - set state root of block\n        const parentBlock = await this.blocks.getByHash(targetBlock.header.parentHash.toBuffer());\n        const trie = makeTrie(this, __classPrivateFieldGet(this, _database).trie, parentBlock.header.stateRoot);\n        // get the contractAddress account storage trie\n        const contractAddressBuffer = ethereum_address_1.Address.from(contractAddress).toBuffer();\n        const addressData = await trie.get(contractAddressBuffer);\n        if (!addressData) {\n            throw new Error(`account ${contractAddress} doesn't exist`);\n        }\n        // #3 - use the contractAddress storage trie to get relevant hashed keys\n        const getStorageKeys = () => {\n            const storageTrie = trie.copy(false);\n            // An address's stateRoot is stored in the 3rd rlp entry\n            storageTrie.setContext(rlp_1.decode(addressData)[2], contractAddressBuffer, parentBlock.header.number);\n            return new Promise((resolve, reject) => {\n                const startKeyBuffer = utils_1.Data.from(startKey).toBuffer();\n                const compare = (a, b) => a.compare(b) < 0;\n                const keys = [];\n                const handleData = ({ key }) => {\n                    // ignore anything that comes before our starting point\n                    if (startKeyBuffer.compare(key) > 0)\n                        return;\n                    // #4 - sort and filter keys\n                    // insert the key exactly where it needs to go in the array\n                    const position = utils_1.findInsertPosition(keys, key, compare);\n                    // ignore if the value couldn't possibly be relevant\n                    if (position > maxResult)\n                        return;\n                    keys.splice(position, 0, key);\n                };\n                const handleEnd = () => {\n                    if (keys.length > maxResult) {\n                        // we collected too much data, so we've got to trim it a bit\n                        resolve({\n                            // only take the maximum number of entries requested\n                            keys: keys.slice(0, maxResult),\n                            // assign nextKey\n                            nextKey: utils_1.Data.from(keys[maxResult])\n                        });\n                    }\n                    else {\n                        resolve({\n                            keys,\n                            nextKey: null\n                        });\n                    }\n                };\n                const rs = storageTrie.createReadStream();\n                rs.on(\"data\", handleData).on(\"error\", reject).on(\"end\", handleEnd);\n            });\n        };\n        const { keys, nextKey } = await getStorageKeys();\n        // #5 -  rerun every transaction in that block prior to and including the requested transaction\n        // prepare block to be run in traceTransaction\n        const transactionHashBuffer = transaction.hash.toBuffer();\n        const newBlock = __classPrivateFieldGet(this, _prepareNextBlock).call(this, targetBlock, parentBlock, transactionHashBuffer);\n        // get storage data given a set of keys\n        const options = {\n            disableMemory: true,\n            disableStack: true,\n            disableStorage: false\n        };\n        const { storage } = await __classPrivateFieldGet(this, _traceTransaction).call(this, newBlock.transactions[transaction.index.toNumber()], trie, newBlock, options, keys, contractAddressBuffer);\n        // #6 - send back results\n        return {\n            storage,\n            nextKey\n        };\n    }\n    toggleStepEvent(enable) {\n        __classPrivateFieldSet(this, _emitStepEvent, enable);\n        __classPrivateFieldGet(this, _miner).toggleStepEvent(enable);\n    }\n    /**\n     * Gracefully shuts down the blockchain service and all of its dependencies.\n     */\n    async stop() {\n        // If the blockchain is still initializing we don't want to shut down\n        // yet because there may still be database calls in flight. Leveldb may\n        // cause a segfault due to a race condition between a db write and the close\n        // call.\n        if (__classPrivateFieldGet(this, _state) === Status.starting) {\n            await this.once(\"ready\");\n        }\n        __classPrivateFieldSet(this, _state, Status.stopping);\n        // stop the polling miner, if necessary\n        clearTimeout(__classPrivateFieldGet(this, _timer));\n        // clean up listeners\n        this.vm && this.vm.removeAllListeners();\n        // pause processing new transactions...\n        this.transactions && (await this.transactions.pause());\n        // then pause the miner, too.\n        __classPrivateFieldGet(this, _miner) && (await __classPrivateFieldGet(this, _miner).pause());\n        // wait for anything in the process of being saved to finish up\n        await __classPrivateFieldGet(this, _blockBeingSavedPromise);\n        this.fallback && (await this.fallback.close());\n        await this.emit(\"stop\");\n        __classPrivateFieldGet(this, _database) && (await __classPrivateFieldGet(this, _database).close());\n        __classPrivateFieldSet(this, _state, Status.stopped);\n    }\n}\nexports.default = Blockchain;\n_state = new WeakMap(), _miner = new WeakMap(), _blockBeingSavedPromise = new WeakMap(), _timer = new WeakMap(), _emitStepEvent = new WeakMap(), _database = new WeakMap(), _options = new WeakMap(), _instamine = new WeakMap(), _saveNewBlock = new WeakMap(), _emitNewBlock = new WeakMap(), _getTransactionLogOutput = new WeakMap(), _handleNewBlockData = new WeakMap(), _readyNextBlock = new WeakMap(), _isPaused = new WeakMap(), _commitAccounts = new WeakMap(), _initializeGenesisBlock = new WeakMap(), _timeAdjustment = new WeakMap(), _currentTime = new WeakMap(), _deleteBlockData = new WeakMap(), _snapshots = new WeakMap(), _traceTransaction = new WeakMap(), _prepareNextBlock = new WeakMap();\n//# sourceMappingURL=blockchain.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _provider, _handle;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Connector = exports.Provider = void 0;\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst provider_1 = __importDefault(require(\"./provider\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst bufferify_1 = require(\"./helpers/bufferify\");\nexports.Provider = provider_1.default;\nfunction isHttp(connection) {\n    return (connection.constructor.name === \"uWS.HttpRequest\" ||\n        connection.constructor.name === \"HttpRequest\");\n}\nclass Connector extends emittery_1.default.Typed {\n    constructor(providerOptions = null, executor) {\n        super();\n        _provider.set(this, void 0);\n        this.BUFFERIFY_THRESHOLD = Connector.BUFFERIFY_THRESHOLD;\n        _handle.set(this, (payload, connection) => {\n            const method = payload.method;\n            if (method === \"eth_subscribe\") {\n                if (isHttp(connection)) {\n                    return Promise.reject(new ethereum_utils_1.CodedError(\"notifications not supported\", utils_1.JsonRpcErrorCode.METHOD_NOT_SUPPORTED));\n                }\n            }\n            const params = payload.params;\n            return __classPrivateFieldGet(this, _provider)._requestRaw({ method, params });\n        });\n        __classPrivateFieldSet(this, _provider, new provider_1.default(providerOptions, executor));\n    }\n    get provider() {\n        return __classPrivateFieldGet(this, _provider);\n    }\n    async connect() {\n        await __classPrivateFieldGet(this, _provider).initialize();\n        // no need to wait for #provider.once(\"connect\") as the initialize()\n        // promise has already accounted for that after the promise is resolved\n        await this.emit(\"ready\");\n    }\n    parse(message) {\n        try {\n            return JSON.parse(message);\n        }\n        catch (e) {\n            throw new ethereum_utils_1.CodedError(e.message, utils_1.JsonRpcErrorCode.PARSE_ERROR);\n        }\n    }\n    handle(payload, connection) {\n        if (Array.isArray(payload)) {\n            // handle batch transactions\n            const promises = payload.map(payload => __classPrivateFieldGet(this, _handle).call(this, payload, connection)\n                .then(({ value }) => value)\n                .catch(e => e));\n            return Promise.resolve({ value: Promise.all(promises) });\n        }\n        else {\n            return __classPrivateFieldGet(this, _handle).call(this, payload, connection);\n        }\n    }\n    format(results, payload) {\n        if (Array.isArray(payload)) {\n            return JSON.stringify(payload.map((payload, i) => {\n                const result = results[i];\n                if (result instanceof Error) {\n                    return utils_1.makeError(payload.id, result);\n                }\n                else {\n                    return utils_1.makeResponse(payload.id, result);\n                }\n            }));\n        }\n        else {\n            const json = utils_1.makeResponse(payload.id, results);\n            if (payload.method === \"debug_traceTransaction\" &&\n                typeof results === \"object\" &&\n                Array.isArray(results.structLogs) &&\n                // for \"large\" debug_traceTransaction results we convert to individual\n                // parts of the response to Buffers, yielded via a Generator function,\n                // instead of using JSON.stringify. This is necessary because we:\n                //   * avoid V8's maximum string length limit of 1GB\n                //   * avoid and the max Buffer length limit of ~2GB (on 64bit\n                //     architectures).\n                //   * avoid heap allocation failures due to trying to hold too much\n                //     data in memory (which can happen if we don't immediately consume\n                //     the `format` result -- by buffering everything into one array,\n                //     for example)\n                //\n                // We don't do this for everything because the bufferfication is so very\n                // very slow.\n                //\n                // TODO(perf): an even better way of solving this would be to convert\n                // `debug_traceTransaction` to a generator that yields chunks (of\n                // Buffer) as soon as they're available. We could then `write` these\n                // individual chunks immediately and our memory use would stay\n                // relatively low and constant.\n                results.structLogs.length > this.BUFFERIFY_THRESHOLD) {\n                return bufferify_1.bufferify(json, \"\");\n            }\n            else {\n                return JSON.stringify(json);\n            }\n        }\n    }\n    formatError(error, payload) {\n        const json = utils_1.makeError(payload && payload.id ? payload.id : null, error);\n        return JSON.stringify(json);\n    }\n    close() {\n        return __classPrivateFieldGet(this, _provider).disconnect();\n    }\n}\nexports.Connector = Connector;\n_provider = new WeakMap(), _handle = new WeakMap();\nConnector.BUFFERIFY_THRESHOLD = 100000;\n//# sourceMappingURL=connector.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _blockchain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nclass AccountManager {\n    constructor(blockchain) {\n        _blockchain.set(this, void 0);\n        __classPrivateFieldSet(this, _blockchain, blockchain);\n    }\n    async get(address, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const raw = await this.getRaw(address, blockNumber);\n        if (raw == null)\n            return null;\n        return ethereum_utils_1.Account.fromBuffer(raw);\n    }\n    async getRaw(address, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const { trie, blocks } = __classPrivateFieldGet(this, _blockchain);\n        // get the block, its state root, and the trie at that state root\n        const { stateRoot, number } = (await blocks.get(blockNumber)).header;\n        const trieCopy = trie.copy(false);\n        trieCopy.setContext(stateRoot.toBuffer(), null, number);\n        // get the account from the trie\n        return await trieCopy.get(address.toBuffer());\n    }\n    async getStorageAt(address, key, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const { trie, blocks } = __classPrivateFieldGet(this, _blockchain);\n        // get the block, its state root, and the trie at that state root\n        const { stateRoot, number } = (await blocks.get(blockNumber)).header;\n        const trieCopy = trie.copy(false);\n        trieCopy.setContext(stateRoot.toBuffer(), address.toBuffer(), number);\n        // get the account from the trie\n        return await trieCopy.get(key);\n    }\n    async getNonce(address, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const data = await this.getRaw(address, blockNumber);\n        if (data == null)\n            return utils_1.RPCQUANTITY_ZERO;\n        const [nonce] = rlp_1.decode(data);\n        return nonce.length === 0 ? utils_1.RPCQUANTITY_ZERO : utils_1.Quantity.from(nonce);\n    }\n    async getBalance(address, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const data = await this.getRaw(address, blockNumber);\n        if (data == null)\n            return utils_1.RPCQUANTITY_ZERO;\n        const [, balance] = rlp_1.decode(data);\n        return balance.length === 0 ? utils_1.RPCQUANTITY_ZERO : utils_1.Quantity.from(balance);\n    }\n    async getCode(address, blockNumber = ethereum_utils_1.Tag.LATEST) {\n        const data = await this.getRaw(address, blockNumber);\n        if (data == null)\n            return utils_1.DATA_EMPTY;\n        const [, , , codeHash] = rlp_1.decode(data);\n        if (codeHash.equals(ethereumjs_util_1.KECCAK256_NULL))\n            return utils_1.DATA_EMPTY;\n        else\n            return __classPrivateFieldGet(this, _blockchain).trie.db.get(codeHash).then(utils_1.Data.from);\n    }\n}\nexports.default = AccountManager;\n_blockchain = new WeakMap();\n//# sourceMappingURL=account-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _blockchain, _common, _blockIndexes;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst manager_1 = __importDefault(require(\"./manager\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_block_1 = require(\"@ganache/ethereum-block\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst NOTFOUND = 404;\nconst EMPTY_BUFFER = Buffer.from([]);\nclass BlockManager extends manager_1.default {\n    constructor(blockchain, common, blockIndexes, base) {\n        super(base, ethereum_block_1.Block, common);\n        _blockchain.set(this, void 0);\n        _common.set(this, void 0);\n        _blockIndexes.set(this, void 0);\n        this.fromFallback = async (tagOrBlockNumber) => {\n            const fallback = __classPrivateFieldGet(this, _blockchain).fallback;\n            let blockNumber;\n            if (typeof tagOrBlockNumber === \"string\") {\n                blockNumber = tagOrBlockNumber;\n            }\n            else if (!fallback.isValidForkBlockNumber(tagOrBlockNumber)) {\n                // don't get the block if the requested block is _after_ our fallback's\n                // blocknumber because it doesn't exist in our local chain.\n                return null;\n            }\n            else {\n                blockNumber = tagOrBlockNumber.toString();\n            }\n            const json = await fallback.request(\"eth_getBlockByNumber\", [\n                blockNumber,\n                true\n            ]);\n            return json == null ? null : BlockManager.rawFromJSON(json, __classPrivateFieldGet(this, _common));\n        };\n        __classPrivateFieldSet(this, _blockchain, blockchain);\n        __classPrivateFieldSet(this, _common, common);\n        __classPrivateFieldSet(this, _blockIndexes, blockIndexes);\n    }\n    static async initialize(blockchain, common, blockIndexes, base) {\n        const bm = new BlockManager(blockchain, common, blockIndexes, base);\n        await bm.updateTaggedBlocks();\n        return bm;\n    }\n    static rawFromJSON(json, common) {\n        const header = [\n            utils_1.Data.from(json.parentHash).toBuffer(),\n            utils_1.Data.from(json.sha3Uncles).toBuffer(),\n            ethereum_address_1.Address.from(json.miner).toBuffer(),\n            utils_1.Data.from(json.stateRoot).toBuffer(),\n            utils_1.Data.from(json.transactionsRoot).toBuffer(),\n            utils_1.Data.from(json.receiptsRoot).toBuffer(),\n            utils_1.Data.from(json.logsBloom).toBuffer(),\n            utils_1.Quantity.from(json.difficulty).toBuffer(),\n            utils_1.Quantity.from(json.number).toBuffer(),\n            utils_1.Quantity.from(json.gasLimit).toBuffer(),\n            utils_1.Quantity.from(json.gasUsed).toBuffer(),\n            utils_1.Quantity.from(json.timestamp).toBuffer(),\n            utils_1.Data.from(json.extraData).toBuffer(),\n            utils_1.Data.from(json.mixHash).toBuffer(),\n            utils_1.Data.from(json.nonce).toBuffer()\n        ];\n        // only add baseFeePerGas if the block's JSON already has it\n        if (json.baseFeePerGas !== undefined) {\n            header[15] = utils_1.Data.from(json.baseFeePerGas).toBuffer();\n        }\n        const totalDifficulty = utils_1.Quantity.from(json.totalDifficulty).toBuffer();\n        const txs = [];\n        const extraTxs = [];\n        json.transactions.forEach((tx, index) => {\n            const blockExtra = [\n                utils_1.Quantity.from(tx.from).toBuffer(),\n                utils_1.Quantity.from(tx.hash).toBuffer()\n            ];\n            const txExtra = [\n                ...blockExtra,\n                utils_1.Data.from(json.hash).toBuffer(),\n                utils_1.Quantity.from(json.number).toBuffer(),\n                index\n            ];\n            const typedTx = ethereum_transaction_1.TransactionFactory.fromRpc(tx, common, txExtra);\n            const raw = typedTx.toEthRawTransaction(typedTx.v.toBuffer(), typedTx.r.toBuffer(), typedTx.s.toBuffer());\n            txs.push(raw);\n            extraTxs.push(blockExtra);\n        });\n        return ethereum_block_1.serialize([header, txs, [], totalDifficulty, extraTxs]).serialized;\n    }\n    getBlockByTag(tag) {\n        switch (ethereum_utils_1.Tag.normalize(tag)) {\n            case ethereum_utils_1.Tag.LATEST:\n                return this.latest;\n            case void 0:\n            case null:\n                // the key is probably a hex string, let nature takes its course.\n                break;\n            case ethereum_utils_1.Tag.PENDING:\n                // TODO: build a real pending block!\n                return this.latest; // this.createBlock(this.latest.header);\n            case ethereum_utils_1.Tag.EARLIEST:\n                return this.earliest;\n            default:\n                // this probably can't happen. but if someone passed something like\n                // `toString` in as a block tag and it got this far... maybe we'd\n                // get here...\n                throw new Error(`Invalid block Tag: ${tag}`);\n        }\n    }\n    getEffectiveNumber(tagOrBlockNumber = ethereum_utils_1.Tag.LATEST) {\n        if (typeof tagOrBlockNumber === \"string\") {\n            const block = this.getBlockByTag(tagOrBlockNumber);\n            if (block) {\n                return block.header.number;\n            }\n        }\n        return utils_1.Quantity.from(tagOrBlockNumber);\n    }\n    async getNumberFromHash(hash) {\n        return __classPrivateFieldGet(this, _blockIndexes).get(utils_1.Data.from(hash).toBuffer()).catch(e => {\n            if (e.status === NOTFOUND)\n                return null;\n            throw e;\n        });\n    }\n    async getByHash(hash) {\n        const number = await this.getNumberFromHash(hash);\n        if (number === null) {\n            if (__classPrivateFieldGet(this, _blockchain).fallback) {\n                const fallback = __classPrivateFieldGet(this, _blockchain).fallback;\n                const json = await fallback.request(\"eth_getBlockByHash\", [\n                    utils_1.Data.from(hash),\n                    true\n                ]);\n                if (json && BigInt(json.number) <= fallback.blockNumber.toBigInt()) {\n                    return new ethereum_block_1.Block(BlockManager.rawFromJSON(json, __classPrivateFieldGet(this, _common)), __classPrivateFieldGet(this, _common));\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return this.get(number);\n        }\n    }\n    async getRawByBlockNumber(blockNumber) {\n        // TODO(perf): make the block's raw fields accessible on latest/earliest/pending so\n        // we don't have to fetch them from the db each time a block tag is used.\n        const fallback = __classPrivateFieldGet(this, _blockchain).fallback;\n        const numBuf = blockNumber.toBuffer();\n        return this.getRaw(numBuf).then(block => {\n            if (block == null && fallback) {\n                return this.fromFallback(blockNumber);\n            }\n            return block;\n        });\n    }\n    async get(tagOrBlockNumber) {\n        if (typeof tagOrBlockNumber === \"string\") {\n            const block = this.getBlockByTag(tagOrBlockNumber);\n            if (block)\n                return block;\n        }\n        const block = await this.getRawByBlockNumber(utils_1.Quantity.from(tagOrBlockNumber));\n        if (block)\n            return new ethereum_block_1.Block(block, __classPrivateFieldGet(this, _common));\n        throw new Error(\"header not found\");\n    }\n    /**\n     * Writes the block object to the underlying database.\n     * @param block\n     */\n    async putBlock(number, hash, serialized) {\n        let key = number;\n        // ensure we can store Block #0 as key \"00\", not \"\"\n        if (EMPTY_BUFFER.equals(key)) {\n            key = Buffer.from([0]);\n        }\n        const secondaryKey = hash.toBuffer();\n        await Promise.all([\n            __classPrivateFieldGet(this, _blockIndexes).put(secondaryKey, key),\n            super.set(key, serialized)\n        ]);\n    }\n    updateTaggedBlocks() {\n        return new Promise((resolve, reject) => {\n            this.base\n                .createValueStream({ limit: 1 })\n                .on(\"data\", (data) => {\n                this.earliest = new ethereum_block_1.Block(data, __classPrivateFieldGet(this, _common));\n            })\n                .on(\"error\", (err) => {\n                reject(err);\n            })\n                .on(\"end\", () => {\n                resolve(void 0);\n            });\n            this.base\n                .createValueStream({ reverse: true, limit: 1 })\n                .on(\"data\", (data) => {\n                this.latest = new ethereum_block_1.Block(data, __classPrivateFieldGet(this, _common));\n            })\n                .on(\"error\", (err) => {\n                reject(err);\n            })\n                .on(\"end\", () => {\n                resolve(void 0);\n            });\n        });\n    }\n}\nexports.default = BlockManager;\n_blockchain = new WeakMap(), _common = new WeakMap(), _blockIndexes = new WeakMap();\n//# sourceMappingURL=block-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _blockchain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst manager_1 = __importDefault(require(\"./manager\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst filter_parsing_1 = require(\"../helpers/filter-parsing\");\nclass BlockLogManager extends manager_1.default {\n    constructor(base, blockchain) {\n        super(base, ethereum_utils_1.BlockLogs);\n        _blockchain.set(this, void 0);\n        __classPrivateFieldSet(this, _blockchain, blockchain);\n    }\n    async get(key) {\n        const log = await super.get(key);\n        if (log) {\n            log.blockNumber = utils_1.Quantity.from(key);\n        }\n        else if (__classPrivateFieldGet(this, _blockchain).fallback) {\n            const block = utils_1.Quantity.from(key);\n            const res = await __classPrivateFieldGet(this, _blockchain).fallback.request(\"eth_getLogs\", [{ fromBlock: block, toBlock: block }]);\n            return ethereum_utils_1.BlockLogs.fromJSON(res);\n        }\n        return log;\n    }\n    async getLogs(filter) {\n        const blockchain = __classPrivateFieldGet(this, _blockchain);\n        if (\"blockHash\" in filter) {\n            const { addresses, topics } = filter_parsing_1.parseFilterDetails(filter);\n            const blockNumber = await blockchain.blocks.getNumberFromHash(filter.blockHash);\n            if (!blockNumber)\n                return [];\n            const logs = await this.get(blockNumber);\n            return logs ? [...logs.filter(addresses, topics)] : [];\n        }\n        else {\n            const { addresses, topics, fromBlock, toBlockNumber } = filter_parsing_1.parseFilter(filter, blockchain);\n            const pendingLogsPromises = [\n                this.get(fromBlock.toBuffer())\n            ];\n            const fromBlockNumber = fromBlock.toNumber();\n            // if we have a range of blocks to search, do that here:\n            if (fromBlockNumber !== toBlockNumber) {\n                // fetch all the blockLogs in-between `fromBlock` and `toBlock` (excluding\n                // from, because we already started fetching that one)\n                for (let i = fromBlockNumber + 1, l = toBlockNumber + 1; i < l; i++) {\n                    pendingLogsPromises.push(this.get(utils_1.Quantity.from(i).toBuffer()));\n                }\n            }\n            // now filter and compute all the blocks' blockLogs (in block order)\n            return Promise.all(pendingLogsPromises).then(blockLogsRange => {\n                const filteredBlockLogs = [];\n                blockLogsRange.forEach(blockLogs => {\n                    // TODO(perf): this loops over all addresses for every block.\n                    // Maybe make it loop only once?\n                    if (blockLogs)\n                        filteredBlockLogs.push(...blockLogs.filter(addresses, topics));\n                });\n                return filteredBlockLogs;\n            });\n        }\n    }\n}\nexports.default = BlockLogManager;\n_blockchain = new WeakMap();\n//# sourceMappingURL=blocklog-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _Type, _options;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@ganache/utils\");\nconst NOTFOUND = 404;\nclass Manager {\n    constructor(base, type, options) {\n        _Type.set(this, void 0);\n        _options.set(this, void 0);\n        __classPrivateFieldSet(this, _Type, type);\n        __classPrivateFieldSet(this, _options, options);\n        this.base = base;\n    }\n    getRaw(key) {\n        if (typeof key === \"string\") {\n            key = utils_1.Data.from(key).toBuffer();\n        }\n        if (key.length === 0) {\n            key = utils_1.BUFFER_ZERO;\n        }\n        return this.base.get(key).catch(e => {\n            if (e.status === NOTFOUND)\n                return null;\n            throw e;\n        });\n    }\n    async get(key) {\n        const raw = await this.getRaw(key);\n        if (!raw)\n            return null;\n        return new (__classPrivateFieldGet(this, _Type))(raw, __classPrivateFieldGet(this, _options));\n    }\n    set(key, value) {\n        return this.base.put(key, value);\n    }\n    del(key) {\n        return this.base.del(key);\n    }\n}\nexports.default = Manager;\n_Type = new WeakMap(), _options = new WeakMap();\n//# sourceMappingURL=manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _queue, _paused, _resumer, _resolver, _blockchain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst manager_1 = __importDefault(require(\"./manager\"));\nconst transaction_pool_1 = __importDefault(require(\"../transaction-pool\"));\nconst promise_queue_1 = __importDefault(require(\"@ganache/promise-queue\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\n// since our Manager needs to receive and Instantiable class with a\n// consistent return type and our transaction factory can return\n// any number of transaction types, we pass in this empty\n// no op class to fool the Manager\nclass NoOp {\n}\nclass TransactionManager extends manager_1.default {\n    constructor(options, common, blockchain, base) {\n        super(base, ethereum_transaction_1.TransactionFactory, common);\n        _queue.set(this, new promise_queue_1.default());\n        _paused.set(this, false);\n        _resumer.set(this, void 0);\n        _resolver.set(this, void 0);\n        _blockchain.set(this, void 0);\n        this.fromFallback = async (transactionHash) => {\n            const { fallback } = __classPrivateFieldGet(this, _blockchain);\n            const tx = await fallback.request(\"eth_getTransactionByHash\", [utils_1.Data.from(transactionHash).toString()]);\n            if (tx == null)\n                return null;\n            const blockHash = utils_1.Data.from(tx.blockHash, 32);\n            const blockNumber = utils_1.Quantity.from(tx.blockNumber);\n            const index = utils_1.Quantity.from(tx.transactionIndex);\n            // don't get the transaction if the requested transaction is _after_ our\n            // fallback's blocknumber because it doesn't exist in our local chain.\n            if (!fallback.isValidForkBlockNumber(blockNumber))\n                return null;\n            const extra = [\n                utils_1.Data.from(tx.from, 20).toBuffer(),\n                utils_1.Data.from(tx.hash, 32).toBuffer(),\n                blockHash.toBuffer(),\n                blockNumber.toBuffer(),\n                index.toBuffer(),\n                utils_1.Quantity.from(tx.gasPrice).toBuffer()\n            ];\n            const runTx = ethereum_transaction_1.TransactionFactory.fromRpc(tx, fallback.common, extra);\n            return runTx.serializeForDb(blockHash, blockNumber, index);\n        };\n        /**\n         * Resume processing transactions. Has no effect if not paused.\n         */\n        this.resume = () => {\n            if (!__classPrivateFieldGet(this, _paused))\n                return;\n            __classPrivateFieldSet(this, _paused, false);\n            __classPrivateFieldGet(this, _resolver).call(this);\n        };\n        __classPrivateFieldSet(this, _blockchain, blockchain);\n        this.transactionPool = new transaction_pool_1.default(options, blockchain);\n    }\n    async getRaw(transactionHash) {\n        return super.getRaw(transactionHash).then(block => {\n            if (block == null && __classPrivateFieldGet(this, _blockchain).fallback) {\n                return this.fromFallback(transactionHash);\n            }\n            return block;\n        });\n    }\n    async get(key) {\n        const factory = (await super.get(key));\n        if (!factory)\n            return null;\n        return factory.tx;\n    }\n    /**\n     * Adds the transaction to the transaction pool.\n     *\n     * Returns a promise that is only resolved in the order it was added.\n     *\n     * @param transaction\n     * @param secretKey\n     * @returns `true` if the `transaction` is immediately executable, `false` if\n     * it may be valid in the future. Throws if the transaction is invalid.\n     */\n    async add(transaction, secretKey) {\n        if (__classPrivateFieldGet(this, _paused)) {\n            await __classPrivateFieldGet(this, _resumer);\n        }\n        // Because ganache requires determinism, we can't allow varying IO times to\n        // potentially affect the order in which transactions are inserted into the\n        // pool, so we use a FIFO queue to _return_ transaction insertions in the\n        // order the were received.\n        const insertion = this.transactionPool.prepareTransaction(transaction, secretKey);\n        const result = await __classPrivateFieldGet(this, _queue).add(insertion);\n        if (result) {\n            this.transactionPool.drain();\n        }\n        return result;\n    }\n    /**\n     * Immediately ignores all transactions that were in the process of being\n     * added to the pool. These transactions' `push` promises will be resolved\n     * immediately with the value `false` and will _not_ be added to the pool.\n     *\n     * Also clears all transactions that were already added to the pool.\n     *\n     * Transactions that are currently in the process of being mined may still be\n     * mined.\n     */\n    clear() {\n        __classPrivateFieldGet(this, _queue).clear(false);\n        this.transactionPool.clear();\n    }\n    /**\n     * Stop processing _new_ transactions; puts new requests in a queue. Has no\n     * affect if already paused.\n     */\n    async pause() {\n        if (!__classPrivateFieldGet(this, _paused)) {\n            // stop processing new transactions immediately\n            __classPrivateFieldSet(this, _paused, true);\n            __classPrivateFieldSet(this, _resumer, new Promise(resolve => {\n                __classPrivateFieldSet(this, _resolver, resolve);\n            }));\n        }\n        // then wait until all async things we were already processing are done\n        // before returning\n        if (__classPrivateFieldGet(this, _queue).isBusy()) {\n            await __classPrivateFieldGet(this, _queue).emit(\"idle\");\n        }\n    }\n}\nexports.default = TransactionManager;\n_queue = new WeakMap(), _paused = new WeakMap(), _resumer = new WeakMap(), _resolver = new WeakMap(), _blockchain = new WeakMap();\n//# sourceMappingURL=transaction-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _blockchain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst manager_1 = __importDefault(require(\"./manager\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nclass TransactionReceiptManager extends manager_1.default {\n    constructor(base, blockchain) {\n        super(base, ethereum_transaction_1.TransactionReceipt);\n        _blockchain.set(this, void 0);\n        __classPrivateFieldSet(this, _blockchain, blockchain);\n    }\n    async get(key) {\n        const receipt = await super.get(key);\n        if (receipt) {\n            return receipt;\n        }\n        else if (__classPrivateFieldGet(this, _blockchain).fallback) {\n            const res = await __classPrivateFieldGet(this, _blockchain).fallback.request(\"eth_getTransactionReceipt\", [typeof key === \"string\" ? key : utils_1.Data.from(key)]);\n            if (!res)\n                return null;\n            const status = res.status === \"0x1\" ? utils_1.RPCQUANTITY_ONE.toBuffer() : utils_1.BUFFER_ZERO;\n            const cumulativeGasUsed = utils_1.Quantity.from(res.cumulativeGasUsed).toBuffer();\n            const logsBloom = utils_1.Data.from(res.logsBloom, 256).toBuffer();\n            const logs = res.logs.map(log => [\n                ethereum_address_1.Address.from(log.address).toBuffer(),\n                log.topics.map(topic => utils_1.Data.from(topic).toBuffer()),\n                Array.isArray(log.data)\n                    ? log.data.map(data => utils_1.Data.from(data).toBuffer())\n                    : utils_1.Data.from(log.data).toBuffer()\n            ]);\n            const gasUsed = utils_1.Quantity.from(res.gasUsed).toBuffer();\n            const contractAddress = res.contractAddress == null\n                ? utils_1.BUFFER_EMPTY\n                : ethereum_address_1.Address.from(res.contractAddress).toBuffer();\n            return ethereum_transaction_1.TransactionReceipt.fromValues(status, cumulativeGasUsed, logsBloom, logs, gasUsed, contractAddress);\n        }\n    }\n}\nexports.default = TransactionReceiptManager;\n_blockchain = new WeakMap();\n//# sourceMappingURL=transaction-receipt-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _options, _cleanupDirectory, _closed, _rootStore, _cleanup;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst tmp_promise_1 = require(\"tmp-promise\");\nconst levelup_1 = __importDefault(require(\"levelup\"));\nconst leveldown_1 = __importDefault(require(\"leveldown\"));\nconst subleveldown_1 = __importDefault(require(\"subleveldown\"));\nconst encoding_down_1 = __importDefault(require(\"encoding-down\"));\ntmp_promise_1.setGracefulCleanup();\nconst tmpOptions = { prefix: \"ganache_\", unsafeCleanup: true };\nconst noop = () => Promise.resolve();\nclass Database extends emittery_1.default {\n    /**\n     * The Database handles the creation of the database, and all access to it.\n     * Once the database has been fully initialized it will emit a `ready`\n     * event.\n     * @param options Supports one of two options: `db` (a leveldown compliant\n     * store instance) or `dbPath` (the path to store/read the db instance)\n     * @param blockchain\n     */\n    constructor(options, blockchain) {\n        super();\n        _options.set(this, void 0);\n        _cleanupDirectory.set(this, noop);\n        _closed.set(this, false);\n        this.directory = null;\n        this.db = null;\n        _rootStore.set(this, void 0);\n        this.initialize = async () => {\n            const levelupOptions = {\n                keyEncoding: \"binary\",\n                valueEncoding: \"binary\"\n            };\n            const store = __classPrivateFieldGet(this, _options).db;\n            let db;\n            if (store) {\n                __classPrivateFieldSet(this, _rootStore, encoding_down_1.default(store, levelupOptions));\n                db = levelup_1.default(__classPrivateFieldGet(this, _rootStore), {});\n            }\n            else {\n                let directory = __classPrivateFieldGet(this, _options).dbPath;\n                if (!directory) {\n                    const dirInfo = await tmp_promise_1.dir(tmpOptions);\n                    directory = dirInfo.path;\n                    __classPrivateFieldSet(this, _cleanupDirectory, dirInfo.cleanup);\n                    // don't continue if we closed while we were waiting for the dir\n                    if (__classPrivateFieldGet(this, _closed))\n                        return __classPrivateFieldGet(this, _cleanup).call(this);\n                }\n                this.directory = directory;\n                // specify an empty `prefix` for browser-based leveldown (level-js)\n                const leveldownOpts = { prefix: \"\" };\n                const store = encoding_down_1.default(leveldown_1.default(directory, leveldownOpts), levelupOptions);\n                __classPrivateFieldSet(this, _rootStore, store);\n                db = levelup_1.default(store);\n            }\n            // don't continue if we closed while we were waiting for the db\n            if (__classPrivateFieldGet(this, _closed))\n                return __classPrivateFieldGet(this, _cleanup).call(this);\n            const open = db.open();\n            this.trie = subleveldown_1.default(db, \"T\", levelupOptions);\n            this.db = db;\n            await open;\n            // don't continue if we closed while we were waiting for it to open\n            if (__classPrivateFieldGet(this, _closed))\n                return __classPrivateFieldGet(this, _cleanup).call(this);\n            this.blocks = subleveldown_1.default(db, \"b\", levelupOptions);\n            this.blockIndexes = subleveldown_1.default(db, \"i\", levelupOptions);\n            this.blockLogs = subleveldown_1.default(db, \"l\", levelupOptions);\n            this.transactions = subleveldown_1.default(db, \"t\", levelupOptions);\n            this.transactionReceipts = subleveldown_1.default(db, \"r\", levelupOptions);\n            this.storageKeys = subleveldown_1.default(db, \"s\", levelupOptions);\n            return this.emit(\"ready\");\n        };\n        /**\n         * Cleans up the database connections and our tmp directory.\n         */\n        _cleanup.set(this, async () => {\n            const db = this.db;\n            if (db) {\n                await new Promise((resolve, reject) => db.close(err => {\n                    if (err)\n                        return void reject(err);\n                    resolve(void 0);\n                }));\n                await Promise.all([\n                    this.blocks.close(),\n                    this.blockIndexes.close(),\n                    this.blockIndexes.close(),\n                    this.transactionReceipts.close(),\n                    this.transactions.close(),\n                    this.storageKeys.close(),\n                    this.trie.close()\n                ]);\n            }\n            return __classPrivateFieldGet(this, _cleanupDirectory).call(this);\n        });\n        __classPrivateFieldSet(this, _options, options);\n        this.blockchain = blockchain;\n    }\n    /**\n     * Call `batch` to batch `put` and `del` operations within the same\n     * event loop tick of the provided function. All db operations within the\n     * batch _must_ be executed synchronously.\n     * @param fn Within this function's event loop tick, all `put` and\n     * `del` database operations are applied in a single atomic operation. This\n     * provides a single write call and if any individual put/del's fail the\n     * entire operation fails and no modifications are made.\n     * @returns a Promise that resolves to the return value\n     * of the provided function.\n     */\n    batch(fn) {\n        const rootDb = __classPrivateFieldGet(this, _rootStore).db;\n        const batch = this.db.batch();\n        const originalPut = rootDb.put;\n        const originalDel = rootDb.del;\n        rootDb.put = batch.put.bind(batch);\n        rootDb.del = batch.del.bind(batch);\n        let prom;\n        try {\n            const ret = fn();\n            // PSA: don't let vscode (or yourself) rewrite this to `await` the\n            // `batch.write` call. The `finally` block needs to run _before_ the\n            // write promise has resolved.\n            prom = batch.write().then(() => ret);\n        }\n        finally {\n            rootDb.put = originalPut;\n            rootDb.del = originalDel;\n        }\n        return prom;\n    }\n    /**\n     * Gracefully closes the database and cleans up the file system and waits for\n     * it to fully shut down. Emits a `close` event once complete.\n     * Note: only emits `close` once.\n     */\n    async close() {\n        const wasClosed = __classPrivateFieldGet(this, _closed);\n        __classPrivateFieldSet(this, _closed, true);\n        await __classPrivateFieldGet(this, _cleanup).call(this);\n        // only emit `close` once\n        if (!wasClosed) {\n            this.emit(\"close\");\n            return;\n        }\n    }\n}\nexports.default = Database;\n_options = new WeakMap(), _cleanupDirectory = new WeakMap(), _closed = new WeakMap(), _rootStore = new WeakMap(), _cleanup = new WeakMap();\n//# sourceMappingURL=database.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForkCache = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst cache_1 = __importDefault(require(\"@ethereumjs/vm/dist/state/cache\"));\nclass ForkCache extends cache_1.default {\n    constructor(trie) {\n        super(trie);\n        /**\n         * Looks up address in underlying trie.\n         * @param address - Address of account\n         */\n        this._lookupAccount = async (address) => {\n            const rlp = await this._trie.get(address.buf);\n            return rlp ? ethereumjs_util_1.Account.fromRlpSerializedAccount(rlp) : new ethereumjs_util_1.Account();\n        };\n    }\n}\nexports.ForkCache = ForkCache;\n//# sourceMappingURL=cache.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction Deferred() {\n    const deferred = {};\n    deferred.promise = new Promise((resolve, reject) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n    return deferred;\n}\nexports.default = Deferred;\n//# sourceMappingURL=deferred.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _abortController, _handler, _options, _accounts, _hardfork, _setCommonFromChain, _setBlockDataFromChainAndOptions, _syncAccounts;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fork = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst abort_controller_1 = __importDefault(require(\"abort-controller\"));\nconst common_1 = __importDefault(require(\"@ethereumjs/common\"));\nconst http_handler_1 = require(\"./handlers/http-handler\");\nconst ws_handler_1 = require(\"./handlers/ws-handler\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereum_block_1 = require(\"@ganache/ethereum-block\");\nconst block_manager_1 = __importDefault(require(\"../data-managers/block-manager\"));\nconst provider_handler_1 = require(\"./handlers/provider-handler\");\nconst persistent_cache_1 = require(\"./persistent-cache/persistent-cache\");\nasync function fetchChainId(fork) {\n    const chainIdHex = await fork.request(\"eth_chainId\", []);\n    return parseInt(chainIdHex, 16);\n}\nasync function fetchNetworkId(fork) {\n    const networkIdStr = await fork.request(\"net_version\", []);\n    return parseInt(networkIdStr, 10);\n}\nfunction fetchBlockNumber(fork) {\n    // {disableCache: true} required so we never cache the blockNumber, as forking\n    // shouldn't ever cache a method that can change!\n    return fork.request(\"eth_blockNumber\", [], { disableCache: true });\n}\nfunction fetchBlock(fork, blockNumber) {\n    return fork.request(\"eth_getBlockByNumber\", [blockNumber, true]);\n}\nasync function fetchNonce(fork, address, blockNumber) {\n    const nonce = await fork.request(\"eth_getTransactionCount\", [\n        address,\n        blockNumber\n    ]);\n    return utils_1.Quantity.from(nonce);\n}\nclass Fork {\n    constructor(options, accounts) {\n        _abortController.set(this, new abort_controller_1.default());\n        _handler.set(this, void 0);\n        _options.set(this, void 0);\n        _accounts.set(this, void 0);\n        _hardfork.set(this, void 0);\n        _setCommonFromChain.set(this, async (chainIdPromise) => {\n            const [chainId, networkId] = await Promise.all([\n                chainIdPromise,\n                fetchNetworkId(this)\n            ]);\n            this.common = common_1.default.forCustomChain(utils_1.KNOWN_CHAINIDS.has(chainId) ? chainId : 1, {\n                name: \"ganache-fork\",\n                defaultHardfork: __classPrivateFieldGet(this, _hardfork),\n                networkId,\n                chainId,\n                comment: \"Local test network fork\"\n            });\n            this.common.on = () => { };\n        });\n        _setBlockDataFromChainAndOptions.set(this, async (chainIdPromise) => {\n            const options = __classPrivateFieldGet(this, _options);\n            if (options.blockNumber === ethereum_utils_1.Tag.LATEST) {\n                const [latestBlock, chainId] = await Promise.all([\n                    fetchBlock(this, ethereum_utils_1.Tag.LATEST),\n                    chainIdPromise\n                ]);\n                let blockNumber = parseInt(latestBlock.number, 16);\n                const effectiveBlockNumber = utils_1.KNOWN_CHAINIDS.has(chainId)\n                    ? Math.max(blockNumber - options.preLatestConfirmations, 0)\n                    : blockNumber;\n                let block;\n                if (effectiveBlockNumber !== blockNumber) {\n                    block = await fetchBlock(this, utils_1.Quantity.from(effectiveBlockNumber));\n                }\n                else {\n                    block = latestBlock;\n                }\n                options.blockNumber = effectiveBlockNumber;\n                this.blockNumber = utils_1.Quantity.from(effectiveBlockNumber);\n                this.stateRoot = utils_1.Data.from(block.stateRoot);\n                await __classPrivateFieldGet(this, _syncAccounts).call(this, this.blockNumber);\n                return block;\n            }\n            else if (typeof options.blockNumber === \"number\") {\n                const blockNumber = utils_1.Quantity.from(options.blockNumber);\n                const [block] = await Promise.all([\n                    fetchBlock(this, blockNumber).then(async (block) => {\n                        this.stateRoot = block.stateRoot;\n                        await __classPrivateFieldGet(this, _syncAccounts).call(this, blockNumber);\n                        return block;\n                    }),\n                    fetchBlockNumber(this).then((latestBlockNumberHex) => {\n                        const latestBlockNumberInt = parseInt(latestBlockNumberHex, 16);\n                        // if our block number option is _after_ the current block number\n                        // throw, as it likely wasn't intentional and doesn't make sense.\n                        if (options.blockNumber > latestBlockNumberInt) {\n                            throw new Error(`\\`fork.blockNumber\\` (${options.blockNumber}) must not be greater than the current block number (${latestBlockNumberInt})`);\n                        }\n                        else {\n                            this.blockNumber = blockNumber;\n                        }\n                    })\n                ]);\n                return block;\n            }\n            else {\n                throw new Error(`Invalid value for \\`fork.blockNumber\\` option: \"${options.blockNumber}\". Must be a positive integer or the string \"latest\".`);\n            }\n        });\n        _syncAccounts.set(this, (blockNumber) => {\n            return Promise.all(__classPrivateFieldGet(this, _accounts).map(async (account) => {\n                const nonce = await fetchNonce(this, account.address, blockNumber);\n                account.nonce = nonce;\n            }));\n        });\n        const forkingOptions = (__classPrivateFieldSet(this, _options, options.fork));\n        __classPrivateFieldSet(this, _hardfork, options.chain.hardfork);\n        __classPrivateFieldSet(this, _accounts, accounts);\n        const { url } = forkingOptions;\n        if (url) {\n            const { protocol } = url;\n            switch (protocol) {\n                case \"ws:\":\n                case \"wss:\":\n                    __classPrivateFieldSet(this, _handler, new ws_handler_1.WsHandler(options, __classPrivateFieldGet(this, _abortController).signal));\n                    break;\n                case \"http:\":\n                case \"https:\":\n                    __classPrivateFieldSet(this, _handler, new http_handler_1.HttpHandler(options, __classPrivateFieldGet(this, _abortController).signal));\n                    break;\n                default: {\n                    throw new Error(`Unsupported protocol: ${protocol}`);\n                }\n            }\n        }\n        else if (forkingOptions.provider) {\n            __classPrivateFieldSet(this, _handler, new provider_handler_1.ProviderHandler(options, __classPrivateFieldGet(this, _abortController).signal));\n        }\n    }\n    async initialize() {\n        let cacheProm;\n        const options = __classPrivateFieldGet(this, _options);\n        if (options.deleteCache)\n            await persistent_cache_1.PersistentCache.deleteDb();\n        if (options.disableCache === false) {\n            // ignore cache start up errors as it is possible there is an `open`\n            // conflict if another ganache fork is running at the time this one is\n            // started. The cache isn't required (though performance will be\n            // degraded without it)\n            cacheProm = persistent_cache_1.PersistentCache.create().catch(_e => null);\n        }\n        else {\n            cacheProm = null;\n        }\n        const chainIdPromise = fetchChainId(this);\n        const [block, cache] = await Promise.all([\n            __classPrivateFieldGet(this, _setBlockDataFromChainAndOptions).call(this, chainIdPromise),\n            cacheProm,\n            __classPrivateFieldGet(this, _setCommonFromChain).call(this, chainIdPromise)\n        ]);\n        this.block = new ethereum_block_1.Block(block_manager_1.default.rawFromJSON(block, this.common), this.common);\n        if (cache)\n            await this.initCache(cache);\n    }\n    async initCache(cache) {\n        await cache.initialize(this.block.header.number, this.block.hash(), this.request.bind(this));\n        __classPrivateFieldGet(this, _handler).setCache(cache);\n    }\n    request(method, params, options = { disableCache: false }) {\n        return __classPrivateFieldGet(this, _handler).request(method, params, options);\n    }\n    abort() {\n        return __classPrivateFieldGet(this, _abortController).abort();\n    }\n    close() {\n        return __classPrivateFieldGet(this, _handler).close();\n    }\n    isValidForkBlockNumber(blockNumber) {\n        return blockNumber.toBigInt() <= this.blockNumber.toBigInt();\n    }\n    selectValidForkBlockNumber(blockNumber) {\n        return this.isValidForkBlockNumber(blockNumber)\n            ? blockNumber\n            : this.blockNumber;\n    }\n}\nexports.Fork = Fork;\n_abortController = new WeakMap(), _handler = new WeakMap(), _options = new WeakMap(), _accounts = new WeakMap(), _hardfork = new WeakMap(), _setCommonFromChain = new WeakMap(), _setBlockDataFromChainAndOptions = new WeakMap(), _syncAccounts = new WeakMap();\n//# sourceMappingURL=fork.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseHandler = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst rate_limiter_1 = __importDefault(require(\"../rate-limiter/rate-limiter\"));\nconst lru_cache_1 = __importDefault(require(\"lru-cache\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst INVALID_RESPONSE = \"Invalid response from fork provider: \";\nconst INVALID_AUTH_ERROR = \"Authentication via both username/password (Basic) and JWT (Bearer) is not possible\";\nconst WINDOW_SECONDS = 30;\nclass BaseHandler {\n    constructor(options, abortSignal) {\n        this.id = 1;\n        this.requestCache = new Map();\n        this.fireForget = new Set();\n        const forkingOptions = options.fork;\n        const { requestsPerSecond, url, userAgent, origin } = forkingOptions;\n        this.abortSignal = abortSignal;\n        this.limiter = new rate_limiter_1.default(\n        // convert `requestsPerSecond` to \"requests per window\"\n        requestsPerSecond * WINDOW_SECONDS, WINDOW_SECONDS * 1000, abortSignal);\n        this.valueCache = new lru_cache_1.default({\n            max: 1073741824,\n            length: (value, key) => {\n                return value.length + key.length;\n            }\n        });\n        // we don't need header-related things if we are using a provider\n        // instead of a url since we aren't in charge of sending requests at the\n        // header level.\n        if (url) {\n            const headers = {\n                \"user-agent\": userAgent\n            };\n            if (origin) {\n                headers[\"origin\"] = origin;\n            }\n            // we set our own Authentication headers, so username and password must be\n            // removed from the url. (The values have already been copied to the options)\n            url.password = url.username = \"\";\n            const isInfura = url.host.endsWith(\".infura.io\");\n            BaseHandler.setAuthHeaders(forkingOptions, headers);\n            BaseHandler.setUserHeaders(forkingOptions, headers, !isInfura);\n            this.headers = headers;\n        }\n    }\n    setCache(cache) {\n        this.persistentCache = cache;\n    }\n    /**\n     * Adds Authorization headers from the given options to the provided `headers`\n     * object. Overwrites an existing `Authorization` header value.\n     *\n     * @param options\n     * @param headers\n     */\n    static setAuthHeaders(options, headers) {\n        if (options.username != null || options.password != null) {\n            if (options.jwt != null)\n                throw new Error(INVALID_AUTH_ERROR);\n            headers.authorization = `Basic ${Buffer.from(`${options.username || \"\"}:${options.password || \"\"}`).toString(\"base64\")}`;\n        }\n        else if (options.jwt) {\n            headers.authorization = `Bearer ${options.jwt}`;\n        }\n    }\n    /**\n     * Adds user provided headers to the provided `headers`\n     * object.\n     *\n     * If the headers already contain an existing `Authorization` header\n     * value and the incoming values have compatible schemes\n     * (Bearer===Bearer, Basic===Basic) the values are merged. Note: if the\n     * `permitMultiAuth` option is `false` Bearer tokens can not be merged.\n     *\n     * @param options\n     * @param headers\n     * @param permitMultiAuth\n     */\n    static setUserHeaders(options, headers, permitMultiAuth) {\n        // copy the user-provided headers over to the connection's headers\n        const userHeaders = options.headers;\n        if (userHeaders) {\n            for (let i = 0, l = userHeaders.length; i < l; i++) {\n                let { name, value } = userHeaders[i];\n                const key = name.toLowerCase();\n                // if the user specified multiple Authentication headers (.e.g, via\n                // username/password or the jwt field) we need to join them when\n                // they are both of the same scheme, otherwise we throw an exception.\n                if (key === \"authorization\" && \"authorization\" in headers) {\n                    if (!permitMultiAuth) {\n                        throw new Error(`Authentication with multiple auth-params is not allowed.`);\n                    }\n                    const currentScheme = headers.authorization.split(\" \", 1)[0];\n                    const [incomingScheme, authParams] = value.split(/\\.(?:.+)/);\n                    if (incomingScheme.toLowerCase() === currentScheme.toLowerCase()) {\n                        headers.authorization += \",\" + authParams;\n                    }\n                    else {\n                        throw new Error(`Authentication via both ${currentScheme} and ${incomingScheme} is not allowed.`);\n                    }\n                }\n                else {\n                    headers[key] = value;\n                }\n            }\n        }\n    }\n    getFromMemCache(key) {\n        const cachedRequest = this.requestCache.get(key);\n        if (cachedRequest !== undefined)\n            return cachedRequest;\n        const cachedValue = this.valueCache.get(key);\n        if (cachedValue !== undefined)\n            return JSON.parse(cachedValue).result;\n    }\n    async getFromSlowCache(method, params, key) {\n        if (!this.persistentCache)\n            return;\n        const raw = await this.persistentCache.get(method, params, key).catch(e => {\n            if (e.notFound)\n                return null;\n            // I/O or other error, throw as things are getting weird and the cache may\n            // have lost integrity\n            throw e;\n        });\n        if (raw != null)\n            return { result: JSON.parse(raw).result, raw };\n    }\n    async queueRequest(method, params, key, send, options = { disableCache: false }) {\n        if (!options.disableCache) {\n            const memCached = this.getFromMemCache(key);\n            if (memCached !== undefined)\n                return memCached;\n            const diskCached = await this.getFromSlowCache(method, params, key);\n            if (diskCached !== undefined) {\n                this.valueCache.set(key, Buffer.from(diskCached.raw));\n                return diskCached.result;\n            }\n        }\n        const promise = this.limiter\n            .handle(send)\n            .then(async ({ response, raw }) => {\n            if (this.abortSignal.aborted)\n                return Promise.reject(new ethereum_utils_1.AbortError());\n            if (utils_1.hasOwn(response, \"result\")) {\n                if (!options.disableCache) {\n                    // cache non-error responses only\n                    this.valueCache.set(key, raw);\n                    // swallow errors for the persistentCache, since it's not vital that\n                    // it always works\n                    if (this.persistentCache) {\n                        const prom = this.persistentCache\n                            .put(method, params, key, typeof raw === \"string\" ? Buffer.from(raw) : raw)\n                            .catch(_ => {\n                            // the cache.put may fail if the db is closed while a request\n                            // is in flight. This is a \"fire and forget\" method.\n                        });\n                        // track these unawaited `puts`\n                        this.fireForget.add(prom);\n                        // clean up once complete\n                        prom.finally(() => {\n                            this.fireForget.delete(prom);\n                        });\n                    }\n                }\n                return response.result;\n            }\n            else if (utils_1.hasOwn(response, \"error\") && response.error != null) {\n                const { error } = response;\n                throw new ethereum_utils_1.CodedError(error.message, error.code);\n            }\n            throw new Error(`${INVALID_RESPONSE}\\`${JSON.stringify(response)}\\``);\n        });\n        this.requestCache.set(key, promise);\n        return await promise;\n    }\n    async close() {\n        await Promise.all(this.fireForget.keys());\n        this.persistentCache && (await this.persistentCache.close());\n    }\n}\nexports.BaseHandler = BaseHandler;\nBaseHandler.JSONRPC_PREFIX = '{\"jsonrpc\":\"2.0\",\"id\":';\n//# sourceMappingURL=base-handler.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpHandler = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\n// TODO: support http2\nconst http_1 = __importStar(require(\"http\"));\nconst https_1 = __importStar(require(\"https\"));\nconst base_handler_1 = require(\"./base-handler\");\nconst deferred_1 = __importDefault(require(\"../deferred\"));\nconst { JSONRPC_PREFIX } = base_handler_1.BaseHandler;\nclass HttpHandler extends base_handler_1.BaseHandler {\n    constructor(options, abortSignal) {\n        super(options, abortSignal);\n        this.url = options.fork.url;\n        this.headers.accept = this.headers[\"content-type\"] = \"application/json\";\n        if (this.url.protocol === \"http:\") {\n            this._request = http_1.default.request;\n            this.agent = new http_1.Agent({\n                keepAlive: true,\n                scheduling: \"fifo\"\n            });\n        }\n        else {\n            this._request = https_1.default.request;\n            this.agent = new https_1.Agent({\n                keepAlive: true,\n                scheduling: \"fifo\"\n            });\n        }\n    }\n    handleLengthedResponse(res, length) {\n        let buffer = Buffer.allocUnsafe(length);\n        let offset = 0;\n        return new Promise((resolve, reject) => {\n            function data(message) {\n                const messageLength = message.length;\n                // note: Node will NOT send us more data than the content-length header\n                // denotes, so we don't have to worry about it.\n                message.copy(buffer, offset, 0, messageLength);\n                offset += messageLength;\n            }\n            function end() {\n                // note: Node doesn't check if the content-length matches, so we do that\n                // here\n                if (offset !== buffer.length) {\n                    // if we didn't receive enough data, throw\n                    reject(new Error(\"content-length mismatch\"));\n                }\n                else {\n                    resolve(buffer);\n                }\n            }\n            res.on(\"data\", data);\n            res.on(\"end\", end);\n        });\n    }\n    handleChunkedResponse(res) {\n        let buffer;\n        return new Promise(resolve => {\n            res.on(\"data\", (message) => {\n                const chunk = message;\n                if (buffer) {\n                    buffer = Buffer.concat([buffer, chunk], buffer.length + chunk.length);\n                }\n                else {\n                    buffer = Buffer.concat([chunk], chunk.length);\n                }\n            });\n            res.on(\"end\", () => {\n                resolve(buffer);\n            });\n        });\n    }\n    async request(method, params, options = { disableCache: false }) {\n        const key = JSON.stringify({ method, params });\n        const { protocol, hostname: host, port, pathname, search } = this.url;\n        const requestOptions = {\n            protocol,\n            host,\n            port,\n            path: pathname + search,\n            headers: this.headers,\n            method: \"POST\",\n            agent: this.agent,\n            // Node v15 supports AbortSignals directly\n            signal: this.abortSignal\n        };\n        const send = () => {\n            if (this.abortSignal.aborted)\n                return Promise.reject(new ethereum_utils_1.AbortError());\n            const deferred = deferred_1.default();\n            const postData = `${JSONRPC_PREFIX}${this.id++},${key.slice(1)}`;\n            this.headers[\"content-length\"] = postData.length;\n            const req = this._request(requestOptions);\n            req.on(\"response\", res => {\n                const { headers } = res;\n                let buffer;\n                // if we have a transfer-encoding we don't care about \"content-length\"\n                // (per HTTP spec). We also don't care about invalid lengths\n                if (\"transfer-encoding\" in headers) {\n                    buffer = this.handleChunkedResponse(res);\n                }\n                else {\n                    const length = headers[\"content-length\"] / 1;\n                    if (isNaN(length) || length <= 0) {\n                        buffer = this.handleChunkedResponse(res);\n                    }\n                    else {\n                        // we have a content-length; use it to pre-allocate the required memory\n                        buffer = this.handleLengthedResponse(res, length);\n                    }\n                }\n                // TODO: handle invalid JSON (throws on parse)?\n                buffer.then(buffer => {\n                    try {\n                        deferred.resolve({\n                            response: JSON.parse(buffer),\n                            raw: buffer\n                        });\n                    }\n                    catch {\n                        const resStr = buffer.toString();\n                        let shortStr;\n                        if (resStr.length > 340) {\n                            // truncate long errors so we don't blow up the user's logs\n                            shortStr = resStr.slice(0, 320) + \"…\";\n                        }\n                        else {\n                            shortStr = resStr;\n                        }\n                        let msg = `Invalid JSON response from fork provider:\\n\\n ${shortStr}`;\n                        if ((resStr.startsWith(\"invalid project id\") ||\n                            resStr.startsWith(\"project id required in the url\")) &&\n                            this.url.host.endsWith(\"infura.io\")) {\n                            msg += `\\n\\nThe provided fork url, ${this.url}, may be an invalid or incorrect Infura endpoint.`;\n                            msg += `\\nVisit https://infura.io/docs/ethereum for Infura documentation.`;\n                        }\n                        deferred.reject(new Error(msg));\n                    }\n                });\n            });\n            // after 5 seconds of idle abort the request\n            req.setTimeout(5000, req.abort.bind(req, null));\n            req.on(\"error\", deferred.reject);\n            req.write(postData);\n            req.end();\n            return deferred.promise.finally(() => this.requestCache.delete(key));\n        };\n        return await this.queueRequest(method, params, key, send, options);\n    }\n}\nexports.HttpHandler = HttpHandler;\n//# sourceMappingURL=http-handler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProviderHandler = void 0;\nconst base_handler_1 = require(\"./base-handler\");\nclass ProviderHandler extends base_handler_1.BaseHandler {\n    constructor(options, abortSignal) {\n        super(options, abortSignal);\n        const provider = options.fork.provider;\n        if (typeof provider.request === \"function\") {\n            this._request = async (method, params) => {\n                try {\n                    const result = await provider.request({ method, params });\n                    const response = { result };\n                    return { response, raw: JSON.stringify(response) };\n                }\n                catch (error) {\n                    // if this doesn't appear to be a JSON-RPC \"coded\" error it might be\n                    // a network level error, or something else we don't know how to\n                    // handle. Throw so stack traces are preserved.\n                    if (typeof error.code !== \"number\")\n                        throw error;\n                    return {\n                        response: { error },\n                        raw: null\n                    };\n                }\n            };\n        }\n        else if (typeof provider.send === \"function\") {\n            // TODO: remove support for legacy providers' legacy `.send`\n            console.warn(\"WARNING: Ganache forking only supports EIP-1193-compliant providers. Legacy support for send is currently enabled, but will be removed in a future version _without_ a breaking change. To remove this warning, switch to an EIP-1193 provider. This error is probably caused by an old version of Web3's HttpProvider (or ganache < v7)\");\n            this._request = async (method, params) => {\n                return await new Promise((resolve, reject) => {\n                    const request = {\n                        id: this.id++,\n                        jsonrpc: \"2.0\",\n                        method,\n                        params\n                    };\n                    provider.send(request, (err, response) => {\n                        if (err)\n                            return void reject(err);\n                        resolve({\n                            response,\n                            raw: JSON.stringify(response)\n                        });\n                    });\n                });\n            };\n        }\n        else {\n            throw new Error(\"Forking `provider` must be EIP-1193 compatible\");\n        }\n    }\n    async request(method, params, options = { disableCache: false }) {\n        // format params via JSON stringification because the params might\n        // be Quantity or Data, which aren't valid as `params` themselves,\n        // but when JSON stringified they are\n        const strParams = JSON.stringify(params);\n        return await this.queueRequest(method, params, `${method}:${strParams}`, () => this._request(method, JSON.parse(strParams)), options);\n    }\n}\nexports.ProviderHandler = ProviderHandler;\n//# sourceMappingURL=provider-handler.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WsHandler = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ws_1 = __importDefault(require(\"ws\"));\nconst base_handler_1 = require(\"./base-handler\");\nconst deferred_1 = __importDefault(require(\"../deferred\"));\nconst { JSONRPC_PREFIX } = base_handler_1.BaseHandler;\nclass WsHandler extends base_handler_1.BaseHandler {\n    constructor(options, abortSignal) {\n        super(options, abortSignal);\n        this.inFlightRequests = new Map();\n        const { url, origin } = options.fork;\n        this.connection = new ws_1.default(url.toString(), {\n            origin,\n            headers: this.headers\n        });\n        // `nodebuffer` is already the default, but I just wanted to be explicit\n        // here because when `nodebuffer` is the binaryType the `message` event's\n        // data type is guaranteed to be a `Buffer`. We don't need to check for\n        // different types of data.\n        // I mention all this because if `arraybuffer` or `fragment` is used for the\n        // binaryType the `\"message\"` event's `data` may end up being\n        // `ArrayBuffer | Buffer`, or `Buffer[] | Buffer`, respectively.\n        // If you need to change this, you probably need to change our `onMessage`\n        // handler too.\n        this.connection.binaryType = \"nodebuffer\";\n        this.open = this.connect(this.connection);\n        this.connection.onclose = () => {\n            // try to connect again...\n            // TODO: backoff and eventually fail\n            this.open = this.connect(this.connection);\n        };\n        this.abortSignal.addEventListener(\"abort\", () => {\n            this.connection.onclose = null;\n            this.connection.close(1000);\n        });\n        this.connection.onmessage = this.onMessage.bind(this);\n    }\n    async request(method, params, options = { disableCache: false }) {\n        await this.open;\n        if (this.abortSignal.aborted)\n            return Promise.reject(new ethereum_utils_1.AbortError());\n        const key = JSON.stringify({ method, params });\n        const send = () => {\n            if (this.abortSignal.aborted)\n                return Promise.reject(new ethereum_utils_1.AbortError());\n            const messageId = this.id++;\n            const deferred = deferred_1.default();\n            // TODO: timeout an in-flight request after some amount of time\n            this.inFlightRequests.set(messageId, deferred);\n            this.connection.send(`${JSONRPC_PREFIX}${messageId},${key.slice(1)}`);\n            return deferred.promise.finally(() => this.requestCache.delete(key));\n        };\n        return await this.queueRequest(method, params, key, send, options);\n    }\n    onMessage(event) {\n        if (event.type !== \"message\")\n            return;\n        // data is always a `Buffer` because the websocket's binaryType is set to\n        // `nodebuffer`\n        const raw = event.data;\n        // TODO: handle invalid JSON (throws on parse)?\n        const response = JSON.parse(raw);\n        const id = response.id;\n        const prom = this.inFlightRequests.get(id);\n        if (prom) {\n            this.inFlightRequests.delete(id);\n            prom.resolve({ response, raw: raw });\n        }\n    }\n    connect(connection) {\n        let open = new Promise((resolve, reject) => {\n            connection.onopen = resolve;\n            connection.onerror = reject;\n        });\n        open.then(() => {\n            connection.onopen = null;\n            connection.onerror = null;\n        }, err => {\n            console.log(err);\n        });\n        return open;\n    }\n    async close() {\n        await super.close();\n        this.connection.close();\n    }\n}\nexports.WsHandler = WsHandler;\n//# sourceMappingURL=ws-handler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nfunction encode(parts) {\n    const l = parts.length;\n    let totalLength = 0;\n    const pieces = [];\n    for (let i = 0; i < l; i++) {\n        const part = parts[i];\n        if (part === null) {\n            totalLength += 2; // {length of the length} (`1`) + {length} (`0`)\n            pieces.push([utils_1.BUFFER_ZERO, utils_1.BUFFER_EMPTY]);\n        }\n        else {\n            const length = part.length;\n            const lengthBuffer = utils_1.Quantity.from(length).toBuffer();\n            const lengthLength = lengthBuffer.length;\n            totalLength += 1 + lengthLength + length;\n            pieces.push([lengthBuffer, part]);\n        }\n    }\n    const encoded = Buffer.allocUnsafe(totalLength);\n    let offset = 0;\n    for (let i = 0; i < l; i++) {\n        const [lengthBuffer, part] = pieces[i];\n        const lengthLength = lengthBuffer.length;\n        encoded[offset++] = lengthLength;\n        lengthBuffer.copy(encoded, offset, 0, lengthLength);\n        part.copy(encoded, (offset += lengthLength), 0, part.length);\n        offset += part.length;\n    }\n    return encoded;\n}\nexports.encode = encode;\nfunction decode(encoded) {\n    const parts = [];\n    for (let i = 0, l = encoded.length; i < l;) {\n        const lengthLength = encoded[i++];\n        const length = utils_1.Quantity.from(encoded.slice(i, (i += lengthLength))).toNumber();\n        parts.push(encoded.slice(i, (i += length)));\n    }\n    return parts;\n}\nexports.decode = decode;\n//# sourceMappingURL=lexicographic-key-codec.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ancestry = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst tree_1 = require(\"./tree\");\nclass Ancestry {\n    constructor(db, parent) {\n        /**\n         * Prevents fetching the same key from the database simultaneously.\n         */\n        this.cacheLock = new Map();\n        this.db = db;\n        if (parent == null) {\n            this.next = null;\n            this.knownAncestors = new Set();\n        }\n        else {\n            this.next = parent.closestKnownAncestor.equals(utils_1.BUFFER_EMPTY)\n                ? null\n                : parent.closestKnownAncestor;\n            this.knownAncestors = new Set([parent.hash.toString(\"hex\")]);\n        }\n    }\n    async loadNextAncestor(next) {\n        const k = next.toString(\"hex\");\n        if (this.cacheLock.has(k)) {\n            throw new Error(\"couldn't load next ancestor as it is locked\");\n        }\n        let resolver;\n        this.cacheLock.set(k, new Promise(resolve => {\n            resolver = resolve;\n        }));\n        const value = await this.db.get(next);\n        const node = tree_1.Tree.deserialize(next, value);\n        this.next = node.closestKnownAncestor.equals(utils_1.BUFFER_EMPTY)\n            ? null\n            : node.closestKnownAncestor;\n        this.knownAncestors.add(node.hash.toString(\"hex\"));\n        this.cacheLock.delete(k);\n        resolver();\n    }\n    async has(key) {\n        const strKey = key.toString(\"hex\");\n        if (this.knownAncestors.has(strKey)) {\n            return true;\n        }\n        else if (this.next) {\n            const cacheLock = this.cacheLock.get(this.next.toString(\"hex\"));\n            if (cacheLock) {\n                await cacheLock;\n                return this.has(key);\n            }\n            await this.loadNextAncestor(this.next);\n            return this.has(key);\n        }\n        else {\n            return false;\n        }\n    }\n}\nexports.Ancestry = Ancestry;\n//# sourceMappingURL=ancestry.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBlockByNumber = exports.findClosestDescendants = exports.findClosestAncestor = exports.findRelated = exports.resolveTargetAndClosestAncestor = exports.setDbVersion = exports.getBlockNumberFromParams = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst tree_1 = require(\"./tree\");\nfunction getBlockNumberFromParams(method, params) {\n    // get the request's block number\n    switch (method) {\n        case \"eth_getBlockByNumber\":\n            return params[0];\n        case \"eth_getTransactionCount\":\n        case \"eth_getCode\":\n        case \"eth_getBalance\":\n            return params[1];\n        case \"eth_getStorageAt\":\n            return params[2];\n        default:\n            return null;\n    }\n}\nexports.getBlockNumberFromParams = getBlockNumberFromParams;\nasync function setDbVersion(db, version) {\n    // set the version if the DB was just created, or error if we already have\n    // a version, but it isn't what we expected\n    try {\n        const recordedVersion = await db.get(\"version\");\n        if (!version.equals(recordedVersion)) {\n            // in the future this is where database migrations would go\n            throw new Error(`Persistent cache version \"${version.toString()}\"\" is not understood.`);\n        }\n    }\n    catch (e) {\n        if (!e.notFound)\n            throw e;\n        // if we didn't have a `version` key we need to set one\n        await db.put(\"version\", version);\n    }\n}\nexports.setDbVersion = setDbVersion;\nasync function resolveTargetAndClosestAncestor(db, request, targetHeight, targetHash) {\n    let targetBlock;\n    let closestAncestor;\n    let previousClosestAncestor;\n    try {\n        const key = tree_1.Tree.encodeKey(targetHeight, targetHash);\n        targetBlock = tree_1.Tree.deserialize(key, await db.get(key));\n        if (targetBlock.closestKnownAncestor.equals(utils_1.BUFFER_EMPTY)) {\n            // we are the genesis/earliest block\n            closestAncestor = null;\n            previousClosestAncestor = null;\n        }\n        else {\n            previousClosestAncestor = tree_1.Tree.deserialize(targetBlock.closestKnownAncestor, await db.get(targetBlock.closestKnownAncestor));\n            // check if we are still the closest known ancestor\n            closestAncestor =\n                (await findClosestAncestor(db, request, targetHeight, previousClosestAncestor.key)) || previousClosestAncestor;\n        }\n    }\n    catch (e) {\n        // something bad happened (I/O failure?), bail\n        if (!e.notFound)\n            throw e;\n        previousClosestAncestor = null;\n        // we couldn't find our target block in the database so we need to figure\n        // out it's relationships via the blockchain.\n        // In order to avoid requesting the \"earliest\" block unnecessarily, we\n        // assume the \"earliest\" block can't be before block 0 (which seems like a\n        // reasonable assumption to me!).\n        // If our target is block `0` then we can't have a closest ancestor since\n        // we are the first block\n        if (targetHeight.toBigInt() === 0n) {\n            closestAncestor = null;\n            targetBlock = new tree_1.Tree(targetHeight, targetHash);\n        }\n        else {\n            const earliestBlock = await getBlockByNumber(request, ethereum_utils_1.Tag.EARLIEST);\n            if (!earliestBlock)\n                throw new Error('Could not find \"earliest\" block.');\n            const { hash: earliestHash, number: earliestNumber } = earliestBlock;\n            const hash = utils_1.Data.from(earliestHash, 32);\n            const earliest = new tree_1.Tree(utils_1.Quantity.from(earliestNumber), hash);\n            closestAncestor =\n                (await findClosestAncestor(db, request, targetHeight, earliest.key)) ||\n                    earliest;\n            targetBlock = new tree_1.Tree(targetHeight, targetHash, closestAncestor.key);\n        }\n    }\n    return {\n        targetBlock,\n        closestAncestor,\n        previousClosestAncestor\n    };\n}\nexports.resolveTargetAndClosestAncestor = resolveTargetAndClosestAncestor;\nasync function* findRelated(db, request, options) {\n    const readStream = db.createReadStream({\n        keys: true,\n        values: true,\n        ...options\n    });\n    for await (const pair of readStream) {\n        const { key, value } = pair;\n        const node = tree_1.Tree.deserialize(key, value);\n        const { height: candidateHeight } = node.decodeKey();\n        const block = await getBlockByNumber(request, candidateHeight);\n        // if the chain has a block at this height, and the hash of the\n        // block is the same as the one in the db we've found our closest\n        // ancestor!\n        if (block != null && block.hash === utils_1.Data.from(node.hash).toString()) {\n            yield node;\n        }\n    }\n}\nexports.findRelated = findRelated;\n/**\n *\n * @param height Search only before this block height (exclusive)\n * @param upTo Search up to this key (inclusive)\n * @returns the closest known ancestor, or `upTo` if we know of no ancestors\n */\nasync function findClosestAncestor(db, request, height, upTo) {\n    const generator = findRelated(db, request, {\n        gte: upTo,\n        lt: tree_1.Tree.encodeKey(height, utils_1.DATA_EMPTY),\n        reverse: true\n    });\n    const first = await generator.next();\n    await generator.return();\n    return first.value;\n}\nexports.findClosestAncestor = findClosestAncestor;\n/**\n *\n * @param height Search only after this block height (exclusive)\n * @returns the closest known descendants, or null\n */\nasync function* findClosestDescendants(db, request, height) {\n    const generator = findRelated(db, request, {\n        gte: tree_1.Tree.encodeKey(utils_1.Quantity.from(height.toBigInt() + 1n), utils_1.DATA_EMPTY),\n        reverse: false\n    });\n    for await (const node of generator) {\n        yield node;\n    }\n}\nexports.findClosestDescendants = findClosestDescendants;\nasync function getBlockByNumber(request, blockNumber) {\n    return await request(\"eth_getBlockByNumber\", [blockNumber.toString(), false]);\n}\nexports.getBlockByNumber = getBlockByNumber;\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersistentCache = void 0;\nconst tree_1 = require(\"./tree\");\nconst fs_1 = require(\"fs\");\nconst env_paths_1 = __importDefault(require(\"env-paths\"));\nconst levelup_1 = __importDefault(require(\"levelup\"));\nconst leveldown_1 = __importDefault(require(\"leveldown\"));\nconst subleveldown_1 = __importDefault(require(\"subleveldown\"));\nconst encoding_down_1 = __importDefault(require(\"encoding-down\"));\nconst lexico = __importStar(require(\"../lexicographic-key-codec\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst ancestry_1 = require(\"./ancestry\");\nconst helpers_1 = require(\"./helpers\");\nconst levelupOptions = {\n    keyEncoding: \"binary\",\n    valueEncoding: \"binary\"\n};\nconst leveldownOpts = { prefix: \"\" };\n/**\n * A leveldb-backed cache that enables associating immutable data as it existed\n * at a specific height on a blockchain.\n *\n * The design affords faster db reads (one read to get known closest ancestors\n * and descendants) and fast db writes (one write per node in a relationship).\n */\nclass PersistentCache {\n    constructor() {\n        this.version = utils_1.BUFFER_ZERO;\n        /**\n         * `reBalancePromise` is used at shutdown to ensure we are done balancing the\n         * tree\n         *\n         */\n        this._reBalancePromise = null;\n        this.status = \"open\";\n    }\n    static async deleteDb(dbSuffix) {\n        return new Promise((resolve, reject) => {\n            const directory = PersistentCache.getDbDirectory(dbSuffix);\n            leveldown_1.default.destroy(directory, err => {\n                if (err)\n                    return void reject(err);\n                resolve(void 0);\n            });\n        });\n    }\n    /**\n     * Serializes the entire database world state into a JSON tree\n     */\n    static async serializeDb(dbSuffix) {\n        const cache = await PersistentCache.create(dbSuffix);\n        return await new Promise(async (resolve) => {\n            const rs = cache.ancestorDb.createReadStream({\n                gte: utils_1.BUFFER_ZERO,\n                keys: true,\n                values: true\n            });\n            const tree = {};\n            const collection = {};\n            for await (const data of rs) {\n                const { key, value } = data;\n                const node = tree_1.Tree.deserialize(key, value);\n                node.height = node.decodeKey().height.toNumber();\n                const keyHex = key.toString(\"hex\");\n                const parentKeyHex = node.closestKnownAncestor.toString(\"hex\");\n                collection[keyHex] = node;\n                if (node.closestKnownAncestor.length === 0) {\n                    tree[keyHex] = node;\n                }\n                else {\n                    const descendants = collection[parentKeyHex].descendants || {};\n                    descendants[keyHex] = node;\n                    collection[parentKeyHex].descendants = descendants;\n                }\n                node.hash = utils_1.Data.from(node.hash).toString();\n                node.parent =\n                    node.closestKnownAncestor.length > 0\n                        ? utils_1.Data.from(collection[parentKeyHex].hash).toString()\n                        : null;\n                delete node.key;\n                // delete node.hash;\n                delete node.closestKnownDescendants;\n                delete node.closestKnownAncestor;\n            }\n            await cache.close();\n            resolve(JSON.parse(JSON.stringify(tree)));\n        });\n    }\n    static getDbDirectory(suffix = \"\") {\n        const { data: directory } = env_paths_1.default(\"Ganache/db\", {\n            suffix\n        });\n        return directory;\n    }\n    static async create(dbSuffix) {\n        const cache = new PersistentCache();\n        const directory = PersistentCache.getDbDirectory(dbSuffix);\n        await fs_1.promises.mkdir(directory, { recursive: true });\n        const store = encoding_down_1.default(leveldown_1.default(directory, leveldownOpts), levelupOptions);\n        const db = await new Promise((resolve, reject) => {\n            const db = levelup_1.default(store, (err) => {\n                if (err)\n                    return void reject(err);\n                resolve(db);\n            });\n        });\n        cache.db = db;\n        cache.cacheDb = subleveldown_1.default(db, \"c\", levelupOptions);\n        cache.ancestorDb = subleveldown_1.default(db, \"a\", levelupOptions);\n        await cache.cacheDb.open();\n        await cache.ancestorDb.open();\n        await helpers_1.setDbVersion(cache.db, cache.version);\n        return cache;\n    }\n    async initialize(height, hash, request) {\n        this.hash = hash;\n        this.request = request;\n        const { targetBlock, closestAncestor, previousClosestAncestor } = await helpers_1.resolveTargetAndClosestAncestor(this.ancestorDb, this.request, height, hash);\n        this.ancestry = new ancestry_1.Ancestry(this.ancestorDb, closestAncestor);\n        const atomicBatch = this.ancestorDb.batch();\n        // if we changed closest ancestors remove our targetBlock from the previous\n        // ancestor so our target block doesn't appear in the database more than\n        // once, and update our targetBlock to point to this new ancestor\n        if (previousClosestAncestor &&\n            !previousClosestAncestor.key.equals(closestAncestor.key)) {\n            targetBlock.closestKnownAncestor = closestAncestor.key;\n            const index = previousClosestAncestor.closestKnownDescendants.findIndex(buf => buf.equals(targetBlock.key));\n            previousClosestAncestor.closestKnownDescendants.splice(index, 1);\n            atomicBatch.put(previousClosestAncestor.key, previousClosestAncestor.serialize());\n        }\n        let allKnownDescendants = [...targetBlock.closestKnownDescendants];\n        // if we don't have a closestAncestor it because the target block is block 0\n        if (closestAncestor == null) {\n            atomicBatch.put(targetBlock.key, targetBlock.serialize());\n        }\n        else {\n            const ancestorsDescendants = [targetBlock.key];\n            await Promise.all(closestAncestor.closestKnownDescendants.map(async (descendantKey) => {\n                // don't match ourself\n                if (descendantKey.equals(targetBlock.key))\n                    return;\n                const { height: descendantHeight } = tree_1.Tree.decodeKey(descendantKey);\n                // if the block number is less than our own it can't be our descendant\n                if (descendantHeight.toBigInt() <= height.toBigInt()) {\n                    ancestorsDescendants.push(descendantKey);\n                    return;\n                }\n                const descendantValue = await this.ancestorDb.get(descendantKey);\n                const descendantNode = tree_1.Tree.deserialize(descendantKey, descendantValue);\n                const descendantRawBlock = await this.getBlock(descendantHeight);\n                // if the block doesn't exist on our chain, it can't be our child,\n                // keep it in the parent\n                if (descendantRawBlock == null ||\n                    descendantRawBlock.hash !==\n                        utils_1.Data.from(descendantNode.hash, 32).toString()) {\n                    ancestorsDescendants.push(descendantKey);\n                }\n                else {\n                    targetBlock.closestKnownDescendants.push(descendantNode.key);\n                    // keep track of *all* known descendants so we don't bother\n                    // checking if they are a known closest descendant later on\n                    allKnownDescendants.push(...descendantNode.closestKnownDescendants);\n                    descendantNode.closestKnownAncestor = targetBlock.key;\n                    // update the descendant node with its newly assigned\n                    // closestKnownAncestor\n                    atomicBatch.put(descendantNode.key, descendantNode.serialize());\n                }\n            }));\n            closestAncestor.closestKnownDescendants = ancestorsDescendants;\n            atomicBatch.put(closestAncestor.key, closestAncestor.serialize());\n        }\n        // TODO(perf): we always re-save the targetBlock but could optimize to only\n        // resave if it is needed.\n        atomicBatch.put(targetBlock.key, targetBlock.serialize());\n        await atomicBatch.write();\n        // we DO want to re-balance the descendants, but we don't want to wait for\n        // it because it can't effect our current fork block's cache results since\n        // these caches will be for blocks higher than our own fork block\n        // Do not `await` this.\n        this._reBalancePromise = this.reBalanceDescendantTree(height, targetBlock, allKnownDescendants)\n            // we don't care if it fails because this is an optimization that only\n            // matters for _future_ runs of ganache for blocks beyond our current fork\n            // block\n            .catch(_ => { })\n            .finally(() => {\n            this._reBalancePromise = null;\n        });\n    }\n    async getBlock(height) {\n        return await helpers_1.getBlockByNumber(this.request, height);\n    }\n    async reBalanceDescendantTree(height, targetBlock, allKnownDescendants) {\n        const atomicBatch = this.ancestorDb.batch();\n        const closestKnownDescendants = targetBlock.closestKnownDescendants;\n        const startSize = closestKnownDescendants.length;\n        for await (const maybeDescendant of helpers_1.findClosestDescendants(this.ancestorDb, this.request, height)) {\n            const key = maybeDescendant.key;\n            // don't match with our own self\n            if (targetBlock.key.equals(key))\n                continue;\n            // this possibleDescendent's descendants can't be our direct descendants\n            // because trees can't merge\n            allKnownDescendants.push(...maybeDescendant.closestKnownDescendants);\n            // if this already is a descendent of ours we can skip it\n            if (closestKnownDescendants.some(d => d.equals(key)))\n                continue;\n            // if this already is a descendent of one of our descendants skip it\n            if (allKnownDescendants.some(d => d.equals(key)))\n                continue;\n            // move the descendant from the parent to the target\n            const parentTree = tree_1.Tree.deserialize(maybeDescendant.closestKnownAncestor, await this.ancestorDb.get(maybeDescendant.closestKnownAncestor));\n            parentTree.closestKnownDescendants.splice(parentTree.closestKnownDescendants.findIndex(d => d.equals(key)), 1);\n            maybeDescendant.closestKnownAncestor = targetBlock.key;\n            closestKnownDescendants.push(maybeDescendant.key);\n            atomicBatch.put(parentTree.key, parentTree.serialize());\n            atomicBatch.put(maybeDescendant.key, maybeDescendant.serialize());\n            // if the cache has been closed stop doing work so we can flush what we\n            // have to the database; descendant resolution shouldn't prevent us from\n            // fulling closing.\n            if (this.status === \"closed\") {\n                break;\n            }\n        }\n        // only write if we have changes to write\n        if (startSize !== closestKnownDescendants.length) {\n            atomicBatch.put(targetBlock.key, targetBlock.serialize());\n            // check `this.ancestorDb.isOpen()` as we don't need to try to write if\n            // the db was shutdown in the meantime. This can happen if ganache was\n            // closed while we were still updating the descendants\n            if (atomicBatch.length > 0 && this.ancestorDb.isOpen())\n                await atomicBatch.write();\n        }\n    }\n    async get(method, params, key) {\n        const blockNumber = helpers_1.getBlockNumberFromParams(method, params);\n        if (blockNumber == null)\n            return;\n        const height = utils_1.Quantity.from(blockNumber);\n        const bufKey = Buffer.from(key);\n        const start = lexico.encode([height.toBuffer(), bufKey]);\n        const end = lexico.encode([\n            utils_1.Quantity.from(height.toBigInt() + 1n).toBuffer()\n        ]);\n        const readStream = this.cacheDb.createReadStream({\n            gt: start,\n            lt: end,\n            keys: true,\n            values: true\n        });\n        const hashBuf = this.hash.toBuffer();\n        for await (const data of readStream) {\n            const { key: k, value } = data;\n            const [_height, _key, blockHash] = lexico.decode(k);\n            // if our key no longer matches make sure we don't keep searching\n            if (!_key.equals(bufKey))\n                return;\n            if (hashBuf.equals(blockHash) || (await this.ancestry.has(blockHash))) {\n                return value;\n            }\n        }\n    }\n    async put(method, params, key, value) {\n        const blockNumber = helpers_1.getBlockNumberFromParams(method, params);\n        if (blockNumber == null)\n            return false;\n        const height = utils_1.Quantity.from(blockNumber);\n        const dbKey = lexico.encode([\n            height.toBuffer(),\n            Buffer.from(key),\n            this.hash.toBuffer()\n        ]);\n        await this.cacheDb.put(dbKey, value);\n        return true;\n    }\n    async close() {\n        if (this.status === \"closed\")\n            return;\n        this.status = \"closed\";\n        if (this.cacheDb) {\n            await this.cacheDb.close();\n        }\n        if (this.ancestorDb) {\n            await this._reBalancePromise;\n            await this.ancestorDb.close();\n        }\n        if (this.db) {\n            await this.db.close();\n        }\n    }\n}\nexports.PersistentCache = PersistentCache;\n//# sourceMappingURL=persistent-cache.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tree = void 0;\nconst lexico = __importStar(require(\"../lexicographic-key-codec\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp = __importStar(require(\"@ganache/rlp\"));\n/**\n * A tree: https://en.wikipedia.org/wiki/Rose_tree\n * One parent, multiple children\n */\nclass Tree {\n    constructor(height, hash, closestKnownAncestor = utils_1.BUFFER_EMPTY) {\n        this.closestKnownDescendants = [];\n        this.key = Tree.encodeKey(height, hash);\n        this.hash = hash.toBuffer();\n        this.closestKnownAncestor = closestKnownAncestor;\n    }\n    serialize() {\n        return rlp.encode([\n            this.hash,\n            this.closestKnownAncestor,\n            this.closestKnownDescendants\n        ]);\n    }\n    decodeKey() {\n        return Tree.decodeKey(this.key);\n    }\n    static decodeKey(key) {\n        const [height, hash] = lexico.decode(key);\n        return {\n            height: utils_1.Quantity.from(height),\n            hash: utils_1.Data.from(hash)\n        };\n    }\n    static deserialize(key, value) {\n        const [hash, parent, children] = rlp.decode(value);\n        const tree = Object.create(Tree.prototype);\n        tree.key = key;\n        tree.hash = hash;\n        tree.closestKnownAncestor = parent;\n        tree.closestKnownDescendants = children;\n        return tree;\n    }\n    static encodeKey(height, hash) {\n        return lexico.encode([height.toBuffer(), hash.toBuffer()]);\n    }\n}\nexports.Tree = Tree;\n//# sourceMappingURL=tree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LimitCounter = void 0;\n/**\n * @param timestamp\n * @returns the milliseconds that have elapsed since `timestamp`\n */\nfunction timeSince(timestamp) {\n    return Date.now() - timestamp;\n}\nclass LimitCounter {\n    constructor(windowLength) {\n        this.counters = new Map();\n        this.windowLength = windowLength;\n    }\n    evict() {\n        const d = this.windowLength * 3;\n        if (timeSince(this.lastEvict) < d) {\n            return;\n        }\n        this.lastEvict = Date.now();\n        const counters = this.counters;\n        counters.forEach((v, k) => {\n            if (timeSince(v.updatedAt) >= d) {\n                counters.delete(k);\n            }\n        });\n    }\n    increment(currentWindow) {\n        this.evict();\n        let v = this.counters.get(currentWindow);\n        if (v == null) {\n            this.counters.set(currentWindow, { value: 1, updatedAt: Date.now() });\n        }\n        else {\n            v.value += 1;\n            v.updatedAt = Date.now();\n        }\n    }\n    get(currentWindow, previousWindow) {\n        let curr = this.counters.get(currentWindow);\n        if (curr == null) {\n            curr = { value: 0, updatedAt: Date.now() };\n        }\n        let prev = this.counters.get(previousWindow);\n        if (prev == null) {\n            prev = { value: 0, updatedAt: Date.now() };\n        }\n        return [curr.value, prev.value];\n    }\n}\nexports.LimitCounter = LimitCounter;\n//# sourceMappingURL=limit-counter.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst semaphore_1 = __importDefault(require(\"semaphore\"));\nconst limit_counter_1 = require(\"./limit-counter\");\n/**\n * Sleeps the specified number of milliseconds, then resolves the Promise.\n * Rejects with an `AbortError` if the provided `signal` is already aborted. If\n * the signal's `\"abort\"` event is invoked while sleeping, the the promise\n * rejects with an `AbortError`.\n *\n * @param ms the number of milliseconds to wait before resolving\n * @param abortSignal the\n * @returns a promise that resolves when `ms`milliseconds have elapsed, or\n * rejects if the `signal` is aborted.\n */\nconst sleep = (ms, signal) => {\n    if (signal.aborted)\n        return Promise.reject(new ethereum_utils_1.AbortError());\n    return new Promise((resolve, reject) => {\n        function abort() {\n            clearTimeout(timer);\n            signal.removeEventListener(\"abort\", abort);\n            reject(new ethereum_utils_1.AbortError());\n        }\n        const timer = setTimeout(() => {\n            signal.removeEventListener(\"abort\", abort);\n            resolve();\n        }, ms);\n        signal.addEventListener(\"abort\", abort);\n    });\n};\n/**\n * @param timestamp\n * @param duration\n * @returns the result of rounding `timestamp` toward zero to a multiple of\n * `duration`.\n */\nfunction timeTruncate(timestamp, duration) {\n    return timestamp - (timestamp % duration);\n}\n/**\n * @param result\n * @returns true if the result is a JSON-RPC LIMIT_EXCEEDED error\n */\nfunction isExceededLimitError(response) {\n    return (utils_1.hasOwn(response, \"error\") &&\n        response.error != null &&\n        response.error.code === utils_1.JsonRpcErrorCode.LIMIT_EXCEEDED);\n}\n/**\n * A sliding window rate limiter.\n *\n * Rate estimation from\n * https://blog.cloudflare.com/counting-things-a-lot-of-different-things/\n *\n * Let's say we set a limit of 50 requests per minute. The counter can be\n * thought of like this:\n *\n * ```ascii\n *         ╔══════════════════════════════════╗\n *         ║   sampling period: 60 seconds    ║\n * ╭───────╫────────────────────────┬─────────╫──────────────────────╮\n * │       ║previous minute         │         current minute         │\n * │       ║  42 requests           │         ║18 requests           │\n * ╰───────╫────────────────────────┼─────────╫──────────────────────╯\n *         ║         45 secs        │ 15 secs ║\n *         ╚════════════════════════╧═════════╝\n * ```\n *\n * In this situation, we did 18 requests during the current minute, which\n * started 15 seconds ago, and 42 requests during the entire previous minute.\n * Based on this information, the rate approximation is calculated like this:\n *\n * ```javascript\n * rate = (42 * (45 / 60)) + 18\n *      = (42 * 0.75) + 18\n *      = 49.5 // requests\n *\n *      = 59.5 // requests\n * ```\n *\n * One more request during the next second and the rate limiter will kick in.\n *\n * This algorithm assumes a constant rate of requests during the previous\n * sampling period (which can be any time span), so the result is only\n * an approximation of the actual rate, but it is quick to calculate and\n * lightweight.\n */\nclass RateLimiter {\n    constructor(requestLimit, windowSizeMs, abortSignal) {\n        this.sem = semaphore_1.default(1);\n        this.take = () => new Promise(resolve => this.sem.take(resolve));\n        this.mustBackoff = null;\n        this.counter = 0;\n        this.requestLimit = requestLimit;\n        // the rate limiter splits the window in 2 to measure the RPS\n        this.windowSizeMs = windowSizeMs / 2;\n        this.limitCounter = new limit_counter_1.LimitCounter(this.windowSizeMs);\n        this.abortSignal = abortSignal;\n    }\n    /**\n     * @param now\n     * @param currentWindow\n     * @returns the current request rate and the allowed execution time of the\n     * next request\n     */\n    status(now, currentWindow) {\n        const limit = this.requestLimit;\n        const windowSizeMs = this.windowSizeMs;\n        const currWindow = currentWindow;\n        const prevWindow = currWindow - windowSizeMs;\n        const [currCount, prevCount] = this.limitCounter.get(currWindow, prevWindow);\n        let rate;\n        if (prevCount === 0) {\n            rate = currCount;\n        }\n        else {\n            // use the average for the previous window, plus everything for this\n            // window\n            rate =\n                prevCount * ((windowSizeMs - (now - currWindow)) / windowSizeMs) +\n                    currCount;\n        }\n        // limit <= 0 means the limiter is disabled\n        if (limit > 0 && rate + 1 > limit) {\n            const nextCount = currCount + 1;\n            const nextLimit = limit + 1;\n            const next = prevCount === 0\n                ? currWindow + windowSizeMs + windowSizeMs / nextLimit\n                : (windowSizeMs * (prevCount + nextCount - nextLimit)) / prevCount +\n                    currWindow;\n            return { rate, next };\n        }\n        return { rate, next: now };\n    }\n    /**\n     * Executes the given fn within the confines of the configured rate limit. If\n     * the function's return value is a JSON-RPC LIMIT_EXCEEDED error, it will\n     * automatically retry with the given `backoff_seconds`\n     * @param fn\n     */\n    async handle(fn) {\n        // allow scheduling one fn at a time\n        await this.take();\n        try {\n            return await this.schedule(fn);\n        }\n        finally {\n            this.sem.leave();\n        }\n    }\n    async schedule(fn) {\n        const signal = this.abortSignal;\n        while (true) {\n            if (signal.aborted)\n                return Promise.reject(new ethereum_utils_1.AbortError());\n            if (this.mustBackoff)\n                await this.mustBackoff;\n            const now = Date.now();\n            const currentWindow = timeTruncate(now, this.windowSizeMs);\n            const { rate, next } = this.status(now, currentWindow);\n            // process.stdout.write(\n            //   `rate: ${rate}, wait: ${next - now}              \\r`\n            // );\n            // if this request would be over the rate limit and the amount of time\n            // we'd need to back off is > 1ms we need to schedule this in the future\n            if (rate + 1 > this.requestLimit && next > now) {\n                await sleep(Date.now() - next, signal);\n            }\n            else {\n                this.limitCounter.increment(currentWindow);\n                const result = await fn();\n                if (isExceededLimitError(result.response)) {\n                    if (utils_1.hasOwn(result.response.error.data, \"rate\")) {\n                        const backoffSeconds = result.response.error.data.rate.backoff_seconds;\n                        // console.log(`backing off for ${backoffSeconds}`);\n                        // console.log(result.error.data.rate);\n                        // TODO: I need to make all in-flight requests that will soon return\n                        // a LIMIT_EXCEEDED error behave, otherwise we'll just send ALL\n                        // requests back to Infura simultaneously after their initial 30\n                        // backoff_seconds have elapsed.\n                        //\n                        // When we are *not* self-rate limited (meaning fork.rps isn't set)\n                        // we need to be able to go at full speed until we are, and THEN we\n                        // need to go at whatever infura wants.\n                        //\n                        // TODO: TODO: ask infura to add the X-Rate-Limit* headers to all\n                        // HTTP responses so we can poll for info to help us avoid ever\n                        // getting rate limited in the first place.\n                        // this is part of an attempt at solving the above comment\n                        this.requestLimit =\n                            result.response.error.data.rate.allowed_rps *\n                                (this.windowSizeMs / 1000);\n                        const limiter = (this.mustBackoff = sleep(backoffSeconds * 1000, signal));\n                        await this.mustBackoff;\n                        if (this.mustBackoff === limiter) {\n                            this.mustBackoff = null;\n                        }\n                        continue;\n                    }\n                    else {\n                        // we don't know how to parse this error, so we do nothing, I guess?\n                    }\n                }\n                return result;\n            }\n        }\n    }\n}\nexports.default = RateLimiter;\n//# sourceMappingURL=rate-limiter.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForkStateManager = void 0;\nconst rlp_1 = require(\"rlp\");\nconst stateManager_1 = __importDefault(require(\"@ethereumjs/vm/dist/state/stateManager\"));\nconst cache_1 = require(\"./cache\");\n/**\n * Interface for getting and setting data from an underlying\n * state trie.\n */\nclass ForkStateManager extends stateManager_1.default {\n    /**\n     * Instantiate the StateManager interface.\n     */\n    constructor(opts) {\n        super(opts);\n        this._cache = new cache_1.ForkCache(opts.trie);\n    }\n    /**\n     * Copies the current instance of the `StateManager`\n     * at the last fully committed point, i.e. as if all current\n     * checkpoints were reverted.\n     */\n    copy() {\n        return new ForkStateManager({\n            trie: this._trie.copy(false),\n            common: this._common\n        });\n    }\n    /**\n     * Creates a storage trie from the primary storage trie\n     * for an account and saves this in the storage cache.\n     * @private\n     */\n    async _lookupStorageTrie(address) {\n        // from state trie\n        const account = await this.getAccount(address);\n        const storageTrie = this._trie.copy(true);\n        storageTrie.setContext(account.stateRoot, address.buf, storageTrie.blockNumber);\n        // we copy checkpoints over only for the metadata checkpoints, not the trie\n        // checkpoints.\n        storageTrie.db.checkpoints = [];\n        return storageTrie;\n    }\n    /**\n     * Gets the storage value associated with the provided `address` and `key`.\n     * This method returns the shortest representation of the stored value.\n     * @param address - Address of the account to get the storage for\n     * @param key - Key in the account's storage to get the value for. Must be 32\n     * bytes long.\n     * @returns {Promise<Buffer>} - The storage value for the account\n     * corresponding to the provided address at the provided key. If this does not\n     * exist an empty `Buffer` is returned.\n     */\n    async getContractStorage(address, key) {\n        const trie = (await this._getStorageTrie(address));\n        const value = await trie.get(key);\n        return rlp_1.decode(value);\n    }\n}\nexports.ForkStateManager = ForkStateManager;\n//# sourceMappingURL=state-manager.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForkTrie = void 0;\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst utils_1 = require(\"@ganache/utils\");\nconst trie_1 = require(\"../helpers/trie\");\nconst subleveldown_1 = __importDefault(require(\"subleveldown\"));\nconst checkpointDb_1 = require(\"merkle-patricia-tree/dist/checkpointDb\");\nconst lexico = __importStar(require(\"./lexicographic-key-codec\"));\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst DELETED_VALUE = Buffer.allocUnsafe(1).fill(1);\nconst GET_CODE = \"eth_getCode\";\nconst GET_NONCE = \"eth_getTransactionCount\";\nconst GET_BALANCE = \"eth_getBalance\";\nconst GET_STORAGE_AT = \"eth_getStorageAt\";\nconst MetadataSingletons = new WeakMap();\nconst LEVELDOWN_OPTIONS = {\n    keyEncoding: \"binary\",\n    valueEncoding: \"binary\"\n};\nfunction isEqualKey(encodedKey, address, key) {\n    const decodedKey = lexico.decode(encodedKey);\n    const [_, keyAddress, deletedKey] = decodedKey;\n    return keyAddress.equals(address) && deletedKey.equals(key);\n}\nclass ForkTrie extends trie_1.GanacheTrie {\n    constructor(db, root, blockchain) {\n        super(db, root, blockchain);\n        this.address = null;\n        this.isPreForkBlock = false;\n        /**\n         * Gets an account from the fork/fallback.\n         *\n         * @param address the address of the account\n         * @param blockNumber the block number at which to query the fork/fallback.\n         * @param stateRoot the state root at the given blockNumber\n         */\n        this.accountFromFallback = async (address, blockNumber) => {\n            const { fallback } = this.blockchain;\n            const number = this.blockchain.fallback.selectValidForkBlockNumber(blockNumber);\n            // get nonce, balance, and code from the fork/fallback\n            const codeProm = fallback.request(GET_CODE, [address, number]);\n            const promises = [\n                fallback.request(GET_NONCE, [address, number]),\n                fallback.request(GET_BALANCE, [address, number]),\n                null\n            ];\n            // create an account so we can serialize everything later\n            const account = new ethereum_utils_1.Account(address);\n            // because code requires additional asynchronous processing, we await and\n            // process it ASAP\n            try {\n                const codeHex = await codeProm;\n                if (codeHex !== \"0x\") {\n                    const code = utils_1.Data.from(codeHex).toBuffer();\n                    // the codeHash is just the keccak hash of the code itself\n                    account.codeHash = utils_1.keccak(code);\n                    if (!account.codeHash.equals(ethereumjs_util_1.KECCAK256_NULL)) {\n                        // insert the code directly into the database with a key of `codeHash`\n                        promises[2] = this.db.put(account.codeHash, code);\n                    }\n                }\n            }\n            catch (e) {\n                // Since we fired off some promises that may throw themselves we need to\n                // catch these errors and discard them.\n                Promise.all(promises).catch(e => { });\n                throw e;\n            }\n            // finally, set the `nonce` and `balance` on the account before returning\n            // the serialized data\n            const [nonce, balance] = await Promise.all(promises);\n            account.nonce =\n                nonce === \"0x0\" ? utils_1.RPCQUANTITY_EMPTY : utils_1.Quantity.from(nonce, true);\n            account.balance =\n                balance === \"0x0\" ? utils_1.RPCQUANTITY_EMPTY : utils_1.Quantity.from(balance);\n            return account.serialize();\n        };\n        this.storageFromFallback = async (address, key, blockNumber) => {\n            const result = await this.blockchain.fallback.request(GET_STORAGE_AT, [\n                `0x${address.toString(\"hex\")}`,\n                `0x${key.toString(\"hex\")}`,\n                this.blockchain.fallback.selectValidForkBlockNumber(blockNumber)\n            ]);\n            if (!result)\n                return null;\n            // remove the `0x` and all leading 0 pairs:\n            const compressed = result.replace(/^0x(00)*/, \"\");\n            const buf = Buffer.from(compressed, \"hex\");\n            return rlp_1.encode(buf);\n        };\n        this.accounts = blockchain.accounts;\n        this.blockNumber = this.blockchain.fallback.blockNumber;\n        this.forkBlockNumber = this.blockNumber.toBigInt();\n        if (MetadataSingletons.has(db)) {\n            this.metadata = new checkpointDb_1.CheckpointDB(MetadataSingletons.get(db));\n        }\n        else {\n            const metadataDb = subleveldown_1.default(db, \"f\", LEVELDOWN_OPTIONS);\n            MetadataSingletons.set(db, metadataDb);\n            this.metadata = new checkpointDb_1.CheckpointDB(metadataDb);\n        }\n    }\n    set root(value) {\n        this._root = value;\n    }\n    get root() {\n        return this._root;\n    }\n    checkpoint() {\n        super.checkpoint();\n        this.metadata.checkpoint(this.root);\n    }\n    async commit() {\n        await Promise.all([super.commit(), this.metadata.commit()]);\n    }\n    async revert() {\n        await Promise.all([super.revert(), this.metadata.revert()]);\n    }\n    setContext(stateRoot, address, blockNumber) {\n        this._root = stateRoot;\n        this.address = address;\n        this.blockNumber = blockNumber;\n        this.isPreForkBlock = blockNumber.toBigInt() < this.forkBlockNumber;\n    }\n    async put(key, val) {\n        return super.put(key, val);\n    }\n    /**\n     * Removes saved metadata from the given block range (inclusive)\n     * @param startBlockNumber (inclusive)\n     * @param endBlockNumber (inclusive)\n     */\n    async revertMetaData(startBlockNumber, endBlockNumber) {\n        const db = this.metadata._leveldb;\n        const stream = db.createKeyStream({\n            gte: lexico.encode([startBlockNumber.toBuffer()]),\n            lt: lexico.encode([\n                utils_1.Quantity.from(endBlockNumber.toBigInt() + 1n).toBuffer()\n            ])\n        });\n        const batch = db.batch();\n        for await (const key of stream)\n            batch.del(key);\n        await batch.write();\n    }\n    createDelKey(key) {\n        const blockNum = this.blockNumber.toBuffer();\n        return lexico.encode([blockNum, this.address, key]);\n    }\n    /**\n     * Checks if the key was deleted (locally -- not on the fork)\n     * @param key\n     */\n    async keyWasDeleted(key) {\n        const selfAddress = this.address === null ? utils_1.BUFFER_EMPTY : this.address;\n        // check the uncommitted checkpoints for deleted keys before\n        // checking the database itself\n        // TODO(perf): there is probably a better/faster way of doing this for the\n        // common case.\n        const checkpoints = this.metadata.checkpoints;\n        for (let i = checkpoints.length - 1; i >= 0; i--) {\n            for (let [encodedKeyStr, value] of checkpoints[i].keyValueMap.entries()) {\n                if (!value || !value.equals(DELETED_VALUE))\n                    continue;\n                const encodedKey = Buffer.from(encodedKeyStr, \"binary\");\n                if (isEqualKey(encodedKey, selfAddress, key))\n                    return true;\n            }\n        }\n        // since we didn't find proof of deletion in a checkpoint let's check the\n        // database for it.\n        // We start searching from our database key (blockNum + address + key)\n        // down to the earliest block we know about.\n        // TODO(perf): this is just going to be slow once we get lots of keys\n        // because it just checks every single key we've ever deleted (before this\n        // one).\n        const stream = this.metadata._leveldb.createReadStream({\n            lte: this.createDelKey(key),\n            reverse: true\n        });\n        for await (const data of stream) {\n            const { key: encodedKey, value } = data;\n            if (!value || !value.equals(DELETED_VALUE))\n                continue;\n            if (isEqualKey(encodedKey, selfAddress, key))\n                return true;\n        }\n        // we didn't find proof of deletion so we return `false`\n        return false;\n    }\n    async del(key) {\n        await this.lock.wait();\n        // we only track if the key was deleted (locally) for state tries _after_\n        // the fork block because we can't possibly delete keys _before_ the fork\n        // block, since those happened before ganache was even started\n        // This little optimization can cut debug_traceTransaction time _in half_.\n        if (!this.isPreForkBlock) {\n            const delKey = this.createDelKey(key);\n            const metaDataPutPromise = this.metadata.put(delKey, DELETED_VALUE);\n            const hash = utils_1.keccak(key);\n            const { node, stack } = await this.findPath(hash);\n            if (node)\n                await this._deleteNode(hash, stack);\n            await metaDataPutPromise;\n        }\n        else {\n            const hash = utils_1.keccak(key);\n            const { node, stack } = await this.findPath(hash);\n            if (node)\n                await this._deleteNode(hash, stack);\n        }\n        this.lock.signal();\n    }\n    async get(key) {\n        const value = await super.get(key);\n        if (value != null)\n            return value;\n        // since we don't have this key in our local trie check if we've have\n        // deleted it (locally)\n        // we only check if the key was deleted (locally) for state tries _after_\n        // the fork block because we can't possibly delete keys _before_ the fork\n        // block, since those happened before ganache was even started\n        // This little optimization can cut debug_traceTransaction time _in half_.\n        if (!this.isPreForkBlock && (await this.keyWasDeleted(key)))\n            return null;\n        if (this.address === null) {\n            // if the trie context's address isn't set, our key represents an address:\n            return this.accountFromFallback(ethereum_address_1.Address.from(key), this.blockNumber);\n        }\n        else {\n            // otherwise the key represents storage at the given address:\n            return this.storageFromFallback(this.address, key, this.blockNumber);\n        }\n    }\n    /**\n     * Returns a copy of the underlying trie with the interface of ForkTrie.\n     * @param includeCheckpoints - If true and during a checkpoint, the copy will\n     * contain the checkpointing metadata and will use the same scratch as\n     * underlying db.\n     */\n    copy(includeCheckpoints = true) {\n        const db = this.db.copy();\n        const secureTrie = new ForkTrie(db._leveldb, this.root, this.blockchain);\n        secureTrie.accounts = this.accounts;\n        secureTrie.address = this.address;\n        secureTrie.blockNumber = this.blockNumber;\n        if (includeCheckpoints && this.isCheckpoint) {\n            secureTrie.db.checkpoints = [...this.db.checkpoints];\n            // Our `metadata.checkpoints` needs to be the same reference to the\n            // parent's metadata.checkpoints so that we can continue to track these\n            // changes on this copy, otherwise deletions made to a contract's storage\n            // may not be tracked.\n            // Note: db.checkpoints don't need this same treatment because of the way\n            // the statemanager uses a contract's trie: it doesn't ever save to it.\n            // Instead, it saves to its own internal cache, which eventually gets\n            // reverted or committed (flushed). Our metadata doesn't utilize a central\n            // cache.\n            secureTrie.metadata.checkpoints = this.metadata.checkpoints;\n        }\n        return secureTrie;\n    }\n}\nexports.ForkTrie = ForkTrie;\n//# sourceMappingURL=trie.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deriveFromIndex = exports.deriveFromPath = exports.createAccountFromSeed = exports.createAccountGeneratorFromSeedAndPath = void 0;\nconst crypto_1 = require(\"crypto\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst HARDENED_OFFSET = 0x80000000;\nconst MASTER_SECRET = Buffer.from(\"Bitcoin seed\", \"utf8\");\nfunction createAccountGeneratorFromSeedAndPath(seedBuffer, hdPath) {\n    const parent = createAccountFromSeed(seedBuffer);\n    const path = deriveFromPath(hdPath, parent);\n    return (index) => {\n        return deriveFromIndex(index, path);\n    };\n}\nexports.createAccountGeneratorFromSeedAndPath = createAccountGeneratorFromSeedAndPath;\nfunction createAccountFromSeed(seedBuffer) {\n    const I = crypto_1.createHmac(\"sha512\", MASTER_SECRET).update(seedBuffer).digest();\n    const privateKey = I.slice(0, 32);\n    const chainCode = I.slice(32);\n    const publicKey = makePublicKey(privateKey);\n    return {\n        privateKey,\n        chainCode,\n        publicKey\n    };\n}\nexports.createAccountFromSeed = createAccountFromSeed;\nfunction deriveFromPath(fullPath, child) {\n    fullPath.forEach(function (c, i) {\n        if (i === 0) {\n            if (!/^[mM]{1}/.test(c)) {\n                throw new Error('Path must start with \"m\" or \"M\"');\n            }\n            return;\n        }\n        const hardened = c.length > 1 && c[c.length - 1] === \"'\";\n        let childIndex = parseInt(c, 10);\n        if (childIndex >= HARDENED_OFFSET)\n            throw new Error(\"Invalid index\");\n        if (hardened)\n            childIndex += HARDENED_OFFSET;\n        child = deriveChild(childIndex, hardened, child.privateKey, child.publicKey, child.chainCode);\n    });\n    return child;\n}\nexports.deriveFromPath = deriveFromPath;\nfunction deriveFromIndex(index, child) {\n    if (index >= HARDENED_OFFSET)\n        throw new Error(\"Invalid index\");\n    return deriveChild(index, false, child.privateKey, child.publicKey, child.chainCode);\n}\nexports.deriveFromIndex = deriveFromIndex;\nfunction makePublicKey(privateKey) {\n    const publicKey = Buffer.allocUnsafe(33);\n    switch (secp256k1_1.default.publicKeyCreate(publicKey, privateKey)) {\n        case 0:\n            return publicKey;\n        case 1:\n            throw new Error(\"Private Key is invalid\");\n        case 2:\n            throw new Error(\"Public Key serialization error\");\n    }\n}\n/**\n * A buffer of size 4 that can be reused as long as all changes are consumed\n * within the same event loop.\n */\nconst SHARED_BUFFER_4 = Buffer.allocUnsafe(4);\nfunction deriveChild(index, isHardened, privateKey, publicKey, chainCode) {\n    const indexBuffer = SHARED_BUFFER_4;\n    indexBuffer.writeUInt32BE(index, 0);\n    let data;\n    const privateKeyLength = privateKey.length;\n    if (isHardened) {\n        // Hardened child\n        // privateKeyLength + 1 (BUFFER_ZERO.length) + 4 (indexBuffer.length)\n        const dataLength = privateKeyLength + 1 + 4;\n        data = Buffer.concat([utils_1.BUFFER_ZERO, privateKey, indexBuffer], dataLength);\n    }\n    else {\n        // Normal child\n        data = Buffer.concat([publicKey, indexBuffer], publicKey.length + 4);\n    }\n    const I = crypto_1.createHmac(\"sha512\", chainCode).update(data).digest();\n    const IL = I.slice(0, 32);\n    try {\n        const newPrivK = Buffer.allocUnsafe(privateKeyLength);\n        privateKey.copy(newPrivK, 0, 0, privateKeyLength);\n        switch (secp256k1_1.default.privateKeyTweakAdd(newPrivK, IL)) {\n            case 0:\n                return {\n                    privateKey: newPrivK,\n                    publicKey: makePublicKey(newPrivK),\n                    chainCode: I.slice(32)\n                };\n            case 1:\n                throw new Error(\"The tweak was out of range or the resulted private key is invalid\");\n        }\n    }\n    catch (err) {\n        return deriveChild(index + 1, isHardened, privateKey, publicKey, chainCode);\n    }\n}\n//# sourceMappingURL=hdkey.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertArgLength = void 0;\nfunction assertArgLength(min, max = min) {\n    return function (target, propertyKey, descriptor) {\n        const original = descriptor.value;\n        descriptor.value = function () {\n            const length = arguments.length;\n            if (length < min || length > max) {\n                throw new Error(`Incorrect number of arguments. '${propertyKey}' requires ${min === max\n                    ? `exactly ${min} ${min === 1 ? \"argument\" : \"arguments\"}.`\n                    : `between ${min} and ${max} arguments.`}`);\n            }\n            return Reflect.apply(original, this, arguments);\n        };\n        return descriptor;\n    };\n}\nexports.assertArgLength = assertArgLength;\n//# sourceMappingURL=assert-arg-length.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bufferify = void 0;\nconst PARTS = Buffer.from('[]{},\"\":null');\nconst SQUARE_BRACKET_PAIR = PARTS.slice(0, 2);\nconst SQUARE_BRACKET_OPEN = SQUARE_BRACKET_PAIR.slice(0, 1);\nconst SQUARE_BRACKET_CLOSE = SQUARE_BRACKET_PAIR.slice(1, 2);\nconst CURLY_BRACKET_PAIR = PARTS.slice(2, 4);\nconst CURLY_BRACKET_OPEN = CURLY_BRACKET_PAIR.slice(0, 1);\nconst CURLY_BRACKET_CLOSE = CURLY_BRACKET_PAIR.slice(1, 2);\nconst COMMA_QUOTE = PARTS.slice(4, 6);\nconst COMMA = COMMA_QUOTE.slice(0, 1);\nconst QUOTE_PAIR = PARTS.slice(5, 7);\nconst QUOTE_COLON = PARTS.slice(6, 8);\nconst COLON = QUOTE_COLON.slice(1, 2);\nconst NULL = PARTS.slice(8, 12);\nconst _EMPTY = PARTS.slice(0, 0);\nconst toStr = Object.prototype.toString;\nconst isObj = (val) => toStr.call(val) === \"[object Object]\";\nfunction numberToBuffer(value) {\n    const str = value.toString();\n    const { length } = str;\n    if (length > 0) {\n        const buf = Buffer.allocUnsafe(length);\n        buf.utf8Write(str, 0, length);\n        return buf;\n    }\n    else {\n        return _EMPTY;\n    }\n}\nfunction stringToQuotedBuffer(value) {\n    const { length } = value;\n    if (length > 0) {\n        const buf = Buffer.allocUnsafe(length + 2); // + 2 for the quotation marks\n        buf[0] = 34; // DOUBLE QUOTE\n        buf[length + 1] = 34; // DOUBLE QUOTE\n        buf.utf8Write(value, 1, length);\n        return buf;\n    }\n    else {\n        return QUOTE_PAIR;\n    }\n}\nfunction* arrayToBuffer(value) {\n    const { length } = value;\n    if (length === 0) {\n        yield SQUARE_BRACKET_PAIR;\n        return;\n    }\n    else {\n        yield SQUARE_BRACKET_OPEN;\n        // sends the first array value:\n        for (const chunkified of bufferify(value[0], \"0\")) {\n            // if the value ends up being nothing (undefined), return null\n            yield chunkified.length === 0 ? NULL : chunkified;\n        }\n        // sends the rest of the array values:\n        for (let i = 1; i < length; i++) {\n            yield COMMA;\n            for (const chunkified of bufferify(value[i], i.toString())) {\n                // if the value ends up being nothing (undefined), return null\n                yield chunkified.length === 0 ? NULL : chunkified;\n            }\n        }\n        yield SQUARE_BRACKET_CLOSE;\n        return;\n    }\n}\nfunction bufferToQuotedBuffer(value) {\n    const { length } = value;\n    const buf = Buffer.allocUnsafe(length + 2);\n    buf[0] = 34;\n    value.copy(buf, 1, 0, length);\n    buf[length + 1] = 34;\n    return buf;\n}\nfunction* objectToBuffer(obj, nameOrIndex) {\n    if (\"toJSON\" in obj) {\n        yield* bufferify(obj.toJSON(nameOrIndex), nameOrIndex);\n        return;\n    }\n    let yieldedOpen = false;\n    for (const key in obj) {\n        const value = obj[key];\n        let yieldPrefix = true;\n        for (const chunkified of bufferify(value, key)) {\n            // if the chunkified value ends up being nothing (undefined) ignore\n            // the property\n            const chunkLength = chunkified.length;\n            if (chunkLength === 0)\n                continue;\n            // only yield the prefix once per `key`\n            if (yieldPrefix) {\n                yieldPrefix = false;\n                const quotedKey = stringToQuotedBuffer(key);\n                if (!yieldedOpen) {\n                    yield Buffer.concat([\n                        CURLY_BRACKET_OPEN,\n                        quotedKey,\n                        COLON,\n                        chunkified\n                    ]);\n                    yieldedOpen = true;\n                }\n                else {\n                    yield Buffer.concat([COMMA, quotedKey, COLON, chunkified]);\n                }\n            }\n            else {\n                yield chunkified;\n            }\n        }\n    }\n    // if we yielded the\n    if (yieldedOpen) {\n        yield CURLY_BRACKET_CLOSE;\n        return;\n    }\n    else {\n        yield CURLY_BRACKET_PAIR;\n        return;\n    }\n}\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) Buffer\n * (utf-8 encoded).\n *\n * This is a hack. It:\n *  * Does not support circular references.\n *  * Does not support double quotes within Object keys; only alphanumerics are\n *    considered safe to use\n *  * Probably doesn't support non-ASCII characters\n *  * Is only tested on transaction traces\n *\n * Only useful if the `JSON.stringify`ed version would create a string larger\n * than what the JavaScript engine can handle.\n *\n * What is the maximum string size in Node/V8? It depends on the version! Some\n * versions are 256MB, some are ~1GB, and others are ~0.5GB.\n * See: https://stackoverflow.com/a/47781288/160173\n *\n * CAUTION: This method is approx 3 - 20 times slower than using:\n * `Buffer.from(JSON.stringify(value), \"utf-8\")`\n *\n * @param value A JavaScript value, usually an object or array, to be converted.\n * @param nameOrIndex JSON.stringify calls an object's toJSON method, and this\n * property is used by internal recursive calls to bufferify.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#tojson_behavior\n */\nfunction* bufferify(value, nameOrIndex) {\n    const type = typeof value;\n    if (type === \"number\" || type === \"boolean\") {\n        yield numberToBuffer(value);\n    }\n    else if (type === \"string\") {\n        yield stringToQuotedBuffer(value);\n    }\n    else if (Buffer.isBuffer(value)) {\n        yield bufferToQuotedBuffer(value);\n    }\n    else if (Array.isArray(value)) {\n        yield* arrayToBuffer(value);\n    }\n    else if (isObj(value)) {\n        yield* objectToBuffer(value, nameOrIndex);\n    }\n    else if (value === null) {\n        yield NULL;\n    }\n    else if (type === \"undefined\") {\n        // nothing is returned for undefined\n        yield _EMPTY;\n    }\n    else if (\"toJSON\" in value && typeof value.toJSON === \"function\") {\n        yield* bufferify(value.toJSON(), nameOrIndex);\n    }\n    else {\n        throw new Error(\"unsupported value in bufferify\");\n    }\n}\nexports.bufferify = bufferify;\n//# sourceMappingURL=bufferify.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseFilter = exports.parseFilterRange = exports.parseFilterDetails = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nfunction parseFilterDetails(filter) {\n    // `filter.address` may be a single address or an array\n    const addresses = filter.address\n        ? (Array.isArray(filter.address)\n            ? filter.address\n            : [filter.address]).map(a => ethereum_address_1.Address.from(a.toLowerCase()).toBuffer())\n        : [];\n    const topics = filter.topics ? filter.topics : [];\n    return { addresses, topics };\n}\nexports.parseFilterDetails = parseFilterDetails;\nfunction parseFilterRange(filter, blockchain) {\n    const latestBlock = blockchain.blocks.latest.header.number;\n    const fromBlock = blockchain.blocks.getEffectiveNumber(filter.fromBlock || ethereum_utils_1.Tag.LATEST);\n    const latestBlockNumber = latestBlock.toNumber();\n    const toBlock = blockchain.blocks.getEffectiveNumber(filter.toBlock || ethereum_utils_1.Tag.LATEST);\n    let toBlockNumber;\n    // don't search after the \"latest\" block, unless it's \"pending\", of course.\n    if (toBlock > latestBlock) {\n        toBlockNumber = latestBlockNumber;\n    }\n    else {\n        toBlockNumber = toBlock.toNumber();\n    }\n    return {\n        fromBlock,\n        toBlock,\n        toBlockNumber\n    };\n}\nexports.parseFilterRange = parseFilterRange;\nfunction parseFilter(filter = { address: [], topics: [] }, blockchain) {\n    const { addresses, topics } = parseFilterDetails(filter);\n    const { fromBlock, toBlock, toBlockNumber } = parseFilterRange(filter, blockchain);\n    return {\n        addresses,\n        fromBlock,\n        toBlock,\n        toBlockNumber,\n        topics\n    };\n}\nexports.parseFilter = parseFilter;\n//# sourceMappingURL=filter-parsing.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst bn = (val = 0) => new ethereumjs_util_1.BN(val);\nconst STIPEND = bn(2300);\nconst MULTIPLE = 64 / 63;\nconst check = set => opname => set.has(opname);\nconst isCall = check(new Set([\"CALL\", \"DELEGATECALL\", \"STATICCALL\", \"CALLCODE\"]));\nconst isCallOrCallcode = check(new Set([\"CALL\", \"CALLCODE\"]));\nconst isCreate = check(new Set([\"CREATE\", \"CREATE2\"]));\nconst isTerminator = check(new Set([\"STOP\", \"RETURN\", \"REVERT\", \"INVALID\", \"SELFDESTRUCT\"]));\nconst stepTracker = () => {\n    const sysOps = [];\n    const allOps = [];\n    const preCompile = new Set();\n    let preCompileCheck = false;\n    let precompileCallDepth = 0;\n    return {\n        collect: info => {\n            if (preCompileCheck) {\n                if (info.depth === precompileCallDepth) {\n                    // If the current depth is unchanged.\n                    // we record its position.\n                    preCompile.add(allOps.length - 1);\n                }\n                // Reset the flag immediately here\n                preCompileCheck = false;\n            }\n            if (isCall(info.opcode.name)) {\n                info.stack = info.stack.map(val => val.clone());\n                preCompileCheck = true;\n                precompileCallDepth = info.depth;\n                sysOps.push({\n                    index: allOps.length,\n                    depth: info.depth,\n                    name: info.opcode.name\n                });\n            }\n            else if (isCreate(info.opcode.name) || isTerminator(info.opcode.name)) {\n                sysOps.push({\n                    index: allOps.length,\n                    depth: info.depth,\n                    name: info.opcode.name\n                });\n            }\n            // This goes last so we can use the length for the index ^\n            allOps.push(info);\n        },\n        isPrecompile: index => preCompile.has(index),\n        done: () => !allOps.length ||\n            sysOps.length < 2 ||\n            !isTerminator(allOps[allOps.length - 1].opcode.name),\n        ops: allOps,\n        systemOps: sysOps\n    };\n};\nconst estimateGas = (generateVM, runArgs, callback) => {\n    exactimate(generateVM(), runArgs, (err, result) => {\n        if (err)\n            return callback(err);\n        binSearch(generateVM, runArgs, result, (err, result) => {\n            if (err)\n                return callback(err);\n            callback(null, result);\n        });\n    });\n};\nconst binSearch = async (generateVM, runArgs, result, callback) => {\n    const MAX = runArgs.block.header.gasLimit;\n    const gasRefund = result.execResult.gasRefund;\n    const startingGas = gasRefund\n        ? result.gasEstimate.add(gasRefund)\n        : result.gasEstimate;\n    const range = { lo: startingGas, hi: startingGas };\n    const isEnoughGas = async (gas) => {\n        const vm = generateVM(); // Generate fresh VM\n        runArgs.tx.gasLimit = new ethereumjs_util_1.BN(gas.toArrayLike(Buffer));\n        const result = await vm.runTx(runArgs).catch(vmerr => ({ vmerr }));\n        return !result.vmerr && !result.execResult.exceptionError;\n    };\n    if (!(await isEnoughGas(range.hi))) {\n        do {\n            range.hi = range.hi.muln(MULTIPLE);\n        } while (!(await isEnoughGas(range.hi)));\n        while (range.lo.addn(1).lt(range.hi)) {\n            const mid = range.lo.add(range.hi).divn(2);\n            if (await isEnoughGas(mid)) {\n                range.hi = mid;\n            }\n            else {\n                range.lo = mid;\n            }\n        }\n        if (range.hi.gte(MAX)) {\n            if (!(await isEnoughGas(range.hi))) {\n                return callback(new Error(\"gas required exceeds allowance or always failing transaction\"));\n            }\n        }\n    }\n    result.gasEstimate = range.hi;\n    callback(null, result);\n};\nconst exactimate = async (vm, runArgs, callback) => {\n    const steps = stepTracker();\n    vm.on(\"step\", steps.collect);\n    const Context = (index, fee) => {\n        const base = index === 0;\n        let start = index;\n        let stop = 0;\n        const cost = bn();\n        let sixtyFloorths = bn();\n        const op = steps.ops[index];\n        const next = steps.ops[index + 1];\n        const intermediateCost = op.gasLeft.sub(next.gasLeft);\n        const callingFee = fee || bn();\n        let compositeContext = false;\n        function addGas(val) {\n            // Add to our current context, but accounted for in sixtyfloorths\n            if (sixtyFloorths.gtn(0)) {\n                if (val.gte(sixtyFloorths)) {\n                    sixtyFloorths = bn();\n                }\n                else {\n                    sixtyFloorths.isub(val);\n                }\n            }\n            cost.iadd(val);\n        }\n        return {\n            start: () => start,\n            stop: () => stop,\n            setStart: val => {\n                start = val;\n                compositeContext = true;\n            },\n            setStop: val => {\n                stop = val;\n            },\n            getCost: () => ({ cost, sixtyFloorths }),\n            transfer: ctx => {\n                const values = ctx.getCost();\n                addGas(values.cost);\n                sixtyFloorths.iadd(values.sixtyFloorths);\n            },\n            addSixtyFloorth: sixtyFloorth => {\n                sixtyFloorths.iadd(sixtyFloorth);\n            },\n            addRange: (fee = bn()) => {\n                // only occurs on stack increasing ops\n                addGas(steps.ops[base || compositeContext ? start : start + 1].gasLeft\n                    .sub(steps.ops[stop].gasLeft)\n                    .add(fee));\n            },\n            finalizeRange: () => {\n                let range;\n                // if we have a composite context and we are NOT at the final terminator\n                if (compositeContext && stop !== steps.ops.length - 1) {\n                    range = steps.ops[start].gasLeft.sub(steps.ops[stop - 1].gasLeft);\n                    addGas(range);\n                    const tail = steps.ops[stop - 1].gasLeft.sub(steps.ops[stop].gasLeft);\n                    range = tail.add(intermediateCost);\n                }\n                else {\n                    range = steps.ops[start].gasLeft.sub(steps.ops[stop].gasLeft);\n                }\n                range.isub(callingFee);\n                addGas(range);\n                if (isCallOrCallcode(op.opcode.name) &&\n                    !op.stack[op.stack.length - 3].isZero()) {\n                    cost.iadd(sixtyFloorths);\n                    const innerCost = next.gasLeft.sub(steps.ops[stop - 1].gasLeft);\n                    if (innerCost.gt(STIPEND)) {\n                        sixtyFloorths = cost.divn(63);\n                    }\n                    else if (innerCost.lte(STIPEND)) {\n                        sixtyFloorths = STIPEND.sub(innerCost);\n                    }\n                }\n                else if (stop !== steps.ops.length - 1) {\n                    cost.iadd(sixtyFloorths);\n                    sixtyFloorths = cost.divn(63);\n                }\n            }\n        };\n    };\n    const getTotal = () => {\n        const sysops = steps.systemOps;\n        const ops = steps.ops;\n        const opIndex = cursor => sysops[cursor].index;\n        const stack = [];\n        let cursor = 0;\n        let context = Context(0);\n        while (cursor < sysops.length) {\n            const currentIndex = opIndex(cursor);\n            const current = ops[currentIndex];\n            const name = current.opcode.name;\n            if (isCall(name) || isCreate(name)) {\n                if (steps.isPrecompile(currentIndex)) {\n                    context.setStop(currentIndex + 1);\n                    context.addRange();\n                    context.setStart(currentIndex + 1);\n                    context.addSixtyFloorth(STIPEND);\n                }\n                else {\n                    context.setStop(currentIndex);\n                    context.addRange(bn(current.opcode.fee));\n                    stack.push(context);\n                    context = Context(currentIndex, bn(current.opcode.fee)); // setup next context\n                }\n            }\n            else if (isTerminator(name)) {\n                // only on the last operation\n                context.setStop(currentIndex + 1 < steps.ops.length ? currentIndex + 1 : currentIndex);\n                context.finalizeRange();\n                const ctx = stack.pop();\n                if (ctx) {\n                    ctx.transfer(context);\n                    context = ctx;\n                    context.setStart(currentIndex + 1);\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                throw new Error(\"INVALID OPCODE\");\n            }\n            cursor++;\n        }\n        const gas = context.getCost();\n        return gas.cost.add(gas.sixtyFloorths);\n    };\n    const result = await vm.runTx(runArgs).catch(vmerr => ({ vmerr }));\n    const vmerr = result.vmerr;\n    if (vmerr) {\n        return callback(vmerr);\n    }\n    else if (result.execResult.exceptionError) {\n        const error = new ethereum_utils_1.RuntimeError(\n        // erroneous gas estimations don't have meaningful hashes\n        utils_1.RPCQUANTITY_EMPTY, result, ethereum_utils_1.RETURN_TYPES.RETURN_VALUE);\n        return callback(error, result);\n    }\n    else if (steps.done()) {\n        const estimate = result.gasUsed;\n        result.gasEstimate = estimate;\n    }\n    else {\n        const actualUsed = steps.ops[0].gasLeft.sub(steps.ops[steps.ops.length - 1].gasLeft);\n        const sixtyFloorths = getTotal().sub(actualUsed);\n        result.gasEstimate = result.gasUsed.add(sixtyFloorths);\n    }\n    callback(vmerr, result);\n};\nexports.default = estimateGas;\n//# sourceMappingURL=gas-estimator.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.warmPrecompiles = exports.activatePrecompiles = void 0;\nconst NUM_PRECOMPILES = 18;\n/**\n * An account with a balance of 1\n */\nconst SERIALIZED_PRECOMPILE = Uint8Array.from([\n    248,\n    68,\n    128,\n    1,\n    160,\n    86,\n    232,\n    31,\n    23,\n    27,\n    204,\n    85,\n    166,\n    255,\n    131,\n    69,\n    230,\n    146,\n    192,\n    248,\n    110,\n    91,\n    72,\n    224,\n    27,\n    153,\n    108,\n    173,\n    192,\n    1,\n    98,\n    47,\n    181,\n    227,\n    99,\n    180,\n    33,\n    160,\n    197,\n    210,\n    70,\n    1,\n    134,\n    247,\n    35,\n    60,\n    146,\n    126,\n    125,\n    178,\n    220,\n    199,\n    3,\n    192,\n    229,\n    0,\n    182,\n    83,\n    202,\n    130,\n    39,\n    59,\n    123,\n    250,\n    216,\n    4,\n    93,\n    133,\n    164,\n    112\n]);\nconst PRECOMPILED_ACCOUNT = {\n    serialize: () => SERIALIZED_PRECOMPILE\n};\nconst accountCache = [];\nconst makeAccount = (i) => {\n    if (accountCache[i])\n        return accountCache[i];\n    // 10 bytes, the first 19 are 0, the last byte is the address\n    const buf = Buffer.allocUnsafe(20).fill(0, 0, 19);\n    buf[19] = i;\n    return (accountCache[i] = { buf });\n};\n/**\n * Puts the precompile accounts into the state tree\n * @param stateManager\n */\nconst activatePrecompiles = async (stateManager) => {\n    await stateManager.checkpoint();\n    const cache = stateManager._cache;\n    for (let i = 1; i <= NUM_PRECOMPILES; i++) {\n        const account = makeAccount(i);\n        cache.put(account, PRECOMPILED_ACCOUNT);\n        stateManager.touchAccount(account);\n    }\n    await stateManager.commit();\n};\nexports.activatePrecompiles = activatePrecompiles;\n/**\n * Puts the precompile accounts into the warmed addresses\n * @param stateManager\n */\nconst warmPrecompiles = async (stateManager) => {\n    for (let i = 1; i <= NUM_PRECOMPILES; i++) {\n        const account = makeAccount(i);\n        stateManager.addWarmedAddress(account.buf);\n    }\n};\nexports.warmPrecompiles = warmPrecompiles;\n//# sourceMappingURL=precompiles.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GanacheTrie = void 0;\nconst merkle_patricia_tree_1 = require(\"merkle-patricia-tree\");\nclass GanacheTrie extends merkle_patricia_tree_1.SecureTrie {\n    constructor(db, root, blockchain) {\n        super(db, root);\n        this.blockchain = blockchain;\n    }\n    setContext(stateRoot, address, blockNumber) {\n        this.root = stateRoot;\n    }\n    /**\n     * Returns a copy of the underlying trie with the interface of GanacheTrie.\n     * @param includeCheckpoints - If true and during a checkpoint, the copy will contain the checkpointing metadata and will use the same scratch as underlying db.\n     */\n    copy(includeCheckpoints = true) {\n        const db = this.db.copy();\n        const secureTrie = new GanacheTrie(db._leveldb, this.root, this.blockchain);\n        if (includeCheckpoints && this.isCheckpoint) {\n            secureTrie.db.checkpoints = [...this.db.checkpoints];\n        }\n        return secureTrie;\n    }\n}\nexports.GanacheTrie = GanacheTrie;\n//# sourceMappingURL=trie.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _currentlyExecutingPrice, _origins, _pending, _isBusy, _paused, _resumer, _currentBlockBaseFeePerGas, _resolver, _emitStepEvent, _executables, _options, _vm, _createBlock, _priced, _mine, _mineTxs, _runTx, _removeBestAndOrigin, _reset, _setPricedHeap, _updatePricedHeap, _setCurrentBlockBaseFeePerGas;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Capacity = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst merkle_patricia_tree_1 = require(\"merkle-patricia-tree\");\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst replace_from_heap_1 = __importDefault(require(\"./replace-from-heap\"));\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst provider_events_1 = require(\"../provider-events\");\n/**\n * How many transactions should be in the block.\n */\nvar Capacity;\n(function (Capacity) {\n    /**\n     * Keep mining transactions until there are no more transactions that can fit\n     * in the block, or there are no transactions left to mine.\n     */\n    Capacity[Capacity[\"FillBlock\"] = -1] = \"FillBlock\";\n    /**\n     * Mine an empty block, even if there are executable transactions available to\n     * mine.\n     */\n    Capacity[Capacity[\"Empty\"] = 0] = \"Empty\";\n    /**\n     * Mine a block with a single transaction, or empty if there are no executable\n     * transactions available to mine.\n     */\n    Capacity[Capacity[\"Single\"] = 1] = \"Single\";\n})(Capacity = exports.Capacity || (exports.Capacity = {}));\nconst updateBloom = (blockBloom, bloom) => {\n    let i = 256;\n    while (--i)\n        blockBloom[i] |= bloom[i];\n};\nconst sortByPrice = (values, a, b) => values[a].effectiveGasPrice > values[b].effectiveGasPrice;\nconst refresher = (item, context) => item.updateEffectiveGasPrice(context);\nclass Miner extends emittery_1.default.Typed {\n    /*\n     * @param executables A live Map of pending transactions from the transaction\n     * pool. The miner will update this Map by removing the best transactions\n     * and putting them in new blocks.\n     */\n    constructor(options, executables, vm, createBlock) {\n        super();\n        _currentlyExecutingPrice.set(this, 0n);\n        _origins.set(this, new Set());\n        _pending.set(this, void 0);\n        _isBusy.set(this, false);\n        _paused.set(this, false);\n        _resumer.set(this, void 0);\n        _currentBlockBaseFeePerGas.set(this, void 0);\n        _resolver.set(this, void 0);\n        /**\n         * Because step events are expensive, CPU-wise, to create and emit we only do\n         * it conditionally.\n         */\n        _emitStepEvent.set(this, false);\n        _executables.set(this, void 0);\n        _options.set(this, void 0);\n        _vm.set(this, void 0);\n        _createBlock.set(this, void 0);\n        // create a Heap that sorts by gasPrice\n        _priced.set(this, new utils_1.Heap(sortByPrice, refresher));\n        _mine.set(this, async (block, maxTransactions = Capacity.FillBlock, onlyOneBlock = false) => {\n            const { block: lastBlock, transactions } = await __classPrivateFieldGet(this, _mineTxs).call(this, block, maxTransactions, onlyOneBlock);\n            // if there are more txs to mine, start mining them without awaiting their\n            // result.\n            if (__classPrivateFieldGet(this, _pending)) {\n                __classPrivateFieldGet(this, _setPricedHeap).call(this);\n                __classPrivateFieldSet(this, _pending, false);\n                if (!onlyOneBlock && __classPrivateFieldGet(this, _priced).length > 0) {\n                    const nextBlock = __classPrivateFieldGet(this, _createBlock).call(this, lastBlock);\n                    await __classPrivateFieldGet(this, _mine).call(this, nextBlock, maxTransactions);\n                }\n            }\n            return transactions;\n        });\n        _mineTxs.set(this, async (runtimeBlock, maxTransactions, onlyOneBlock) => {\n            let block;\n            const vm = __classPrivateFieldGet(this, _vm);\n            const { pending, inProgress } = __classPrivateFieldGet(this, _executables);\n            const options = __classPrivateFieldGet(this, _options);\n            let keepMining = true;\n            const priced = __classPrivateFieldGet(this, _priced);\n            const legacyInstamine = __classPrivateFieldGet(this, _options).legacyInstamine;\n            const storageKeys = new Map();\n            let blockTransactions;\n            do {\n                keepMining = false;\n                __classPrivateFieldSet(this, _isBusy, true);\n                blockTransactions = [];\n                const transactionsTrie = new merkle_patricia_tree_1.BaseTrie(null, null);\n                const receiptTrie = new merkle_patricia_tree_1.BaseTrie(null, null);\n                // don't mine anything at all if maxTransactions is `0`\n                if (maxTransactions === Capacity.Empty) {\n                    await vm.stateManager.checkpoint();\n                    await vm.stateManager.commit();\n                    const finalizedBlockData = runtimeBlock.finalize(transactionsTrie.root, receiptTrie.root, utils_1.BUFFER_256_ZERO, vm.stateManager._trie.root, 0n, // gas used\n                    options.extraData, [], storageKeys);\n                    this.emit(\"block\", finalizedBlockData);\n                    __classPrivateFieldGet(this, _reset).call(this);\n                    return { block: finalizedBlockData.block, transactions: [] };\n                }\n                let numTransactions = 0;\n                let blockGasLeft = options.blockGasLimit.toBigInt();\n                let blockGasUsed = 0n;\n                const blockBloom = Buffer.allocUnsafe(256).fill(0);\n                const promises = [];\n                // Set a block-level checkpoint so our unsaved trie doesn't update the\n                // vm's \"live\" trie.\n                await vm.stateManager.checkpoint();\n                const TraceData = ethereum_utils_1.TraceDataFactory();\n                // We need to listen for any SSTORE opcodes so we can grab the raw, unhashed version\n                // of the storage key and save it to the db along with it's keccak hashed version of\n                // the storage key. Why you might ask? So we can reference the raw version in\n                // debug_storageRangeAt.\n                const stepListener = (event, next) => {\n                    if (event.opcode.name === \"SSTORE\") {\n                        const key = TraceData.from(event.stack[event.stack.length - 1].toArrayLike(Buffer)).toBuffer();\n                        const hashedKey = utils_1.keccak(key);\n                        storageKeys.set(hashedKey.toString(), { key, hashedKey });\n                    }\n                    next();\n                };\n                vm.on(\"step\", stepListener);\n                // Run until we run out of items, or until the inner loop stops us.\n                // we don't call `shift()` here because we will may need to `replace`\n                // this `best` transaction with the next best transaction from the same\n                // origin later.\n                let best;\n                while ((best = priced.peek())) {\n                    const origin = best.from.toString();\n                    if (best.calculateIntrinsicGas() > blockGasLeft) {\n                        // if the current best transaction can't possibly fit in this block\n                        // go ahead and run the next best transaction, ignoring all other\n                        // pending transactions from this account for this block.\n                        //  * We don't replace this \"best\" transaction with another from the\n                        // same account.\n                        //  * We do \"unlock\" this transaction in the transaction pool's `pending`\n                        // queue so it can be replaced, if needed.\n                        best.locked = false;\n                        __classPrivateFieldGet(this, _removeBestAndOrigin).call(this, origin);\n                        continue;\n                    }\n                    __classPrivateFieldSet(this, _currentlyExecutingPrice, best.effectiveGasPrice.toBigInt());\n                    // Set a transaction-level checkpoint so we can undo state changes in\n                    // the case where the transaction is rejected by the VM.\n                    await vm.stateManager.checkpoint();\n                    // Set the internal trie's block number (for forking)\n                    vm.stateManager._trie.blockNumber = utils_1.Quantity.from(runtimeBlock.header.number.toArrayLike(Buffer));\n                    const result = await __classPrivateFieldGet(this, _runTx).call(this, best, runtimeBlock, origin, pending);\n                    if (result !== null) {\n                        const gasUsed = utils_1.Quantity.from(result.gasUsed.toArrayLike(Buffer)).toBigInt();\n                        if (blockGasLeft >= gasUsed) {\n                            // if the transaction will fit in the block, commit it!\n                            await vm.stateManager.commit();\n                            blockTransactions[numTransactions] = best;\n                            blockGasLeft -= gasUsed;\n                            blockGasUsed += gasUsed;\n                            // calculate receipt and tx tries\n                            const txKey = rlp_1.encode(numTransactions === 0\n                                ? utils_1.BUFFER_EMPTY\n                                : utils_1.uintToBuffer(numTransactions));\n                            promises.push(transactionsTrie.put(txKey, best.serialized));\n                            const receipt = best.fillFromResult(result, blockGasUsed);\n                            promises.push(receiptTrie.put(txKey, receipt));\n                            // update the block's bloom\n                            updateBloom(blockBloom, result.bloom.bitvector);\n                            numTransactions++;\n                            const pendingOrigin = pending.get(origin);\n                            // since this transaction was successful, remove it from the \"pending\"\n                            // transaction pool.\n                            keepMining = pendingOrigin.removeBest();\n                            inProgress.add(best);\n                            best.once(\"finalized\").then(() => {\n                                // it is in the database (or thrown out) so delete it from the\n                                // `inProgress` Set\n                                inProgress.delete(best);\n                            });\n                            // if we:\n                            //  * don't have enough gas left for even the smallest of transactions\n                            //  * Or if we've mined enough transactions\n                            // we're done with this block!\n                            // notice: when `maxTransactions` is `-1` (AKA infinite), `numTransactions === maxTransactions`\n                            // will always return false, so this comparison works out fine.\n                            if (blockGasLeft <= ethereum_transaction_1.Params.TRANSACTION_GAS ||\n                                numTransactions === maxTransactions) {\n                                if (keepMining) {\n                                    // remove the newest (`best`) tx from this account's pending queue\n                                    // as we know we can fit another transaction in the block. Stick\n                                    // this tx into our `priced` heap.\n                                    keepMining = replace_from_heap_1.default(priced, pendingOrigin);\n                                }\n                                else {\n                                    keepMining = __classPrivateFieldGet(this, _removeBestAndOrigin).call(this, origin);\n                                }\n                                break;\n                            }\n                            if (keepMining) {\n                                // remove the newest (`best`) tx from this account's pending queue\n                                // as we know we can fit another transaction in the block. Stick\n                                // this tx into our `priced` heap.\n                                keepMining = replace_from_heap_1.default(priced, pendingOrigin);\n                            }\n                            else {\n                                // since we don't have any more txs from this account, just get the\n                                // next bext transaction sorted in our `priced` heap.\n                                keepMining = __classPrivateFieldGet(this, _removeBestAndOrigin).call(this, origin);\n                            }\n                        }\n                        else {\n                            // didn't fit in the current block\n                            await vm.stateManager.revert();\n                            // unlock the transaction so the transaction pool can reconsider this\n                            // transaction\n                            best.locked = false;\n                            // didn't fit. remove it from the priced transactions without replacing\n                            // it with another from the account. This transaction will have to be\n                            // run again in another block.\n                            keepMining = priced.removeBest();\n                        }\n                    }\n                    else {\n                        // no result means the transaction is an \"always failing tx\", so we\n                        // revert its changes here.\n                        // Note: we don't clean up (`removeBest`, etc) because `runTx`'s\n                        // error handler does the clean up itself.\n                        await vm.stateManager.revert();\n                    }\n                }\n                await Promise.all(promises);\n                await vm.stateManager.commit();\n                vm.removeListener(\"step\", stepListener);\n                const finalizedBlockData = runtimeBlock.finalize(transactionsTrie.root, receiptTrie.root, blockBloom, vm.stateManager._trie.root, blockGasUsed, options.extraData, blockTransactions, storageKeys);\n                block = finalizedBlockData.block;\n                const emitBlockProm = this.emit(\"block\", finalizedBlockData);\n                if (legacyInstamine === true) {\n                    // we need to wait for each block to be done mining when in legacy\n                    // mode because things like `mine` and `miner_start` must wait for the\n                    // first mine operation to be fully complete.\n                    await emitBlockProm;\n                }\n                if (onlyOneBlock) {\n                    __classPrivateFieldSet(this, _currentlyExecutingPrice, 0n);\n                    __classPrivateFieldGet(this, _reset).call(this);\n                    break;\n                }\n                else {\n                    __classPrivateFieldSet(this, _currentlyExecutingPrice, 0n);\n                    __classPrivateFieldGet(this, _updatePricedHeap).call(this);\n                    if (priced.length !== 0) {\n                        runtimeBlock = __classPrivateFieldGet(this, _createBlock).call(this, block);\n                        // if baseFeePerGas is undefined, we are pre london hard fork.\n                        // no need to refresh the order of the heap because all Txs only have gasPrice.\n                        if (__classPrivateFieldGet(this, _currentBlockBaseFeePerGas) !== undefined) {\n                            priced.refresh(__classPrivateFieldGet(this, _currentBlockBaseFeePerGas));\n                        }\n                    }\n                    else {\n                        // reset the miner\n                        __classPrivateFieldGet(this, _reset).call(this);\n                    }\n                }\n            } while (keepMining);\n            return { block, transactions: blockTransactions };\n        });\n        _runTx.set(this, async (tx, block, origin, pending) => {\n            const context = {};\n            const vm = __classPrivateFieldGet(this, _vm);\n            this.emit(\"ganache:vm:tx:before\", { context });\n            // we always listen to the step event even if `#emitStepEvent` is false in\n            // case the user starts listening in the middle of the transaction.\n            const stepListener = event => {\n                if (!__classPrivateFieldGet(this, _emitStepEvent))\n                    return;\n                this.emit(\"ganache:vm:tx:step\", provider_events_1.makeStepEvent(context, event));\n            };\n            vm.on(\"step\", stepListener);\n            try {\n                return await vm.runTx({\n                    tx: tx.toVmTransaction(),\n                    block: block\n                });\n            }\n            catch (err) {\n                const errorMessage = err.message;\n                // We do NOT want to re-run this transaction.\n                // Update the `priced` heap with the next best transaction from this\n                // account\n                const pendingOrigin = pending.get(origin);\n                if (pendingOrigin.removeBest()) {\n                    replace_from_heap_1.default(__classPrivateFieldGet(this, _priced), pendingOrigin);\n                }\n                else {\n                    // if there are no more transactions from this origin remove this tx\n                    // from the priced heap and clear out it's origin so it can accept new\n                    // transactions from this origin.\n                    __classPrivateFieldGet(this, _removeBestAndOrigin).call(this, origin);\n                }\n                const e = {\n                    execResult: {\n                        runState: { programCounter: 0 },\n                        exceptionError: { error: errorMessage },\n                        returnValue: utils_1.BUFFER_EMPTY\n                    }\n                };\n                const error = new ethereum_utils_1.RuntimeError(tx.hash, e, ethereum_utils_1.RETURN_TYPES.TRANSACTION_HASH);\n                tx.finalize(\"rejected\", error);\n                return null;\n            }\n            finally {\n                vm.removeListener(\"step\", stepListener);\n                this.emit(\"ganache:vm:tx:after\", { context });\n            }\n        });\n        _removeBestAndOrigin.set(this, (origin) => {\n            __classPrivateFieldGet(this, _origins).delete(origin);\n            return __classPrivateFieldGet(this, _priced).removeBest();\n        });\n        _reset.set(this, () => {\n            __classPrivateFieldGet(this, _origins).clear();\n            __classPrivateFieldGet(this, _priced).clear();\n            __classPrivateFieldSet(this, _isBusy, false);\n        });\n        /**\n         * Adds one transaction from each origin into the \"priced\" heap, which\n         * sorts each tx by gasPrice (high to low)\n         */\n        _setPricedHeap.set(this, () => {\n            const { pending } = __classPrivateFieldGet(this, _executables);\n            const origins = __classPrivateFieldGet(this, _origins);\n            const priced = __classPrivateFieldGet(this, _priced);\n            for (let mapping of pending) {\n                const heap = mapping[1];\n                const next = heap.peek();\n                if (next && !next.locked) {\n                    const origin = next.from.toString();\n                    origins.add(origin);\n                    next.updateEffectiveGasPrice(__classPrivateFieldGet(this, _currentBlockBaseFeePerGas));\n                    priced.push(next);\n                    next.locked = true;\n                }\n            }\n        });\n        /**\n         * Updates the \"priced\" heap with transactions from origins it doesn't yet\n         * contain.\n         */\n        _updatePricedHeap.set(this, () => {\n            const { pending } = __classPrivateFieldGet(this, _executables);\n            const origins = __classPrivateFieldGet(this, _origins);\n            const priced = __classPrivateFieldGet(this, _priced);\n            // Note: the `pending` Map passed here is \"live\", meaning it is constantly\n            // being updated by the `transactionPool`. This allows us to begin\n            // processing a block with the _current_ pending transactions, and while\n            // that is processing, to receive new transactions, updating our `priced`\n            // heap with these new pending transactions.\n            for (let mapping of pending) {\n                const heap = mapping[1];\n                const next = heap.peek();\n                if (next && !next.locked) {\n                    const price = next.effectiveGasPrice.toBigInt();\n                    if (__classPrivateFieldGet(this, _currentlyExecutingPrice) > price) {\n                        // don't insert a transaction into the miner's `priced` heap\n                        // if it will be better than its last\n                        continue;\n                    }\n                    const origin = next.from.toString();\n                    if (origins.has(origin)) {\n                        // don't insert a transaction into the miner's `priced` heap if it\n                        // has already queued up transactions for that origin\n                        continue;\n                    }\n                    origins.add(origin);\n                    next.updateEffectiveGasPrice(__classPrivateFieldGet(this, _currentBlockBaseFeePerGas));\n                    priced.push(next);\n                    next.locked = true;\n                }\n            }\n        });\n        /**\n         * Sets the #currentBlockBaseFeePerGas property if the current block\n         * has a baseFeePerGas property\n         */\n        _setCurrentBlockBaseFeePerGas.set(this, (block) => {\n            const baseFeePerGas = block.header.baseFeePerGas;\n            // before london hard fork, there will be no baseFeePerGas on the block\n            __classPrivateFieldSet(this, _currentBlockBaseFeePerGas, baseFeePerGas === undefined\n                ? undefined\n                : utils_1.Quantity.from(baseFeePerGas.buf));\n        });\n        __classPrivateFieldSet(this, _vm, vm);\n        __classPrivateFieldSet(this, _options, options);\n        __classPrivateFieldSet(this, _executables, executables);\n        __classPrivateFieldSet(this, _createBlock, (previousBlock) => {\n            const newBlock = createBlock(previousBlock);\n            __classPrivateFieldGet(this, _setCurrentBlockBaseFeePerGas).call(this, newBlock);\n            return newBlock;\n        });\n        // initialize the heap with an empty array\n        __classPrivateFieldGet(this, _priced).init([]);\n    }\n    async pause() {\n        if (!__classPrivateFieldGet(this, _paused)) {\n            __classPrivateFieldSet(this, _paused, true);\n            __classPrivateFieldSet(this, _resumer, new Promise(resolve => {\n                __classPrivateFieldSet(this, _resolver, resolve);\n            }));\n        }\n        if (__classPrivateFieldGet(this, _isBusy)) {\n            await this.once(\"idle\");\n        }\n    }\n    resume() {\n        if (!__classPrivateFieldGet(this, _paused))\n            return;\n        __classPrivateFieldSet(this, _paused, false);\n        __classPrivateFieldGet(this, _resolver).call(this);\n    }\n    /**\n     * @param maxTransactions: maximum number of transactions per block. If `-1`,\n     * unlimited.\n     * @param onlyOneBlock: set to `true` if only 1 block should be mined.\n     *\n     * @returns the transactions mined in the _first_ block\n     */\n    async mine(block, maxTransactions = Capacity.FillBlock, onlyOneBlock = false) {\n        if (__classPrivateFieldGet(this, _paused)) {\n            await __classPrivateFieldGet(this, _resumer);\n        }\n        // only allow mining a single block at a time (per miner)\n        if (__classPrivateFieldGet(this, _isBusy)) {\n            // if we are currently mining a block, set the `pending` property\n            // so the miner knows it can immediately start mining another block once\n            // it is done with its current work.\n            __classPrivateFieldSet(this, _pending, true);\n            __classPrivateFieldGet(this, _updatePricedHeap).call(this);\n            return;\n        }\n        else {\n            __classPrivateFieldGet(this, _setCurrentBlockBaseFeePerGas).call(this, block);\n            __classPrivateFieldGet(this, _setPricedHeap).call(this);\n            const result = await __classPrivateFieldGet(this, _mine).call(this, block, maxTransactions, onlyOneBlock);\n            this.emit(\"idle\");\n            return result;\n        }\n    }\n    toggleStepEvent(enable) {\n        __classPrivateFieldSet(this, _emitStepEvent, enable);\n    }\n}\nexports.default = Miner;\n_currentlyExecutingPrice = new WeakMap(), _origins = new WeakMap(), _pending = new WeakMap(), _isBusy = new WeakMap(), _paused = new WeakMap(), _resumer = new WeakMap(), _currentBlockBaseFeePerGas = new WeakMap(), _resolver = new WeakMap(), _emitStepEvent = new WeakMap(), _executables = new WeakMap(), _options = new WeakMap(), _vm = new WeakMap(), _createBlock = new WeakMap(), _priced = new WeakMap(), _mine = new WeakMap(), _mineTxs = new WeakMap(), _runTx = new WeakMap(), _removeBestAndOrigin = new WeakMap(), _reset = new WeakMap(), _setPricedHeap = new WeakMap(), _updatePricedHeap = new WeakMap(), _setCurrentBlockBaseFeePerGas = new WeakMap();\n//# sourceMappingURL=miner.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction replaceFromHeap(priced, source) {\n    // get the next best for this account, removing from the source Heap:\n    const next = source.peek();\n    if (next) {\n        // remove the current best priced transaction from this account and replace\n        // it with the account's next lowest nonce transaction:\n        priced.replaceBest(next);\n        next.locked = true;\n        return true;\n    }\n    else {\n        // since we don't have a next, just remove this item from priced\n        return priced.removeBest();\n    }\n}\nexports.default = replaceFromHeap;\n//# sourceMappingURL=replace-from-heap.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeStepEvent = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nfunction normalizeEvent(event) {\n    const { account, memory: originalMemory, opcode } = event;\n    const memoryLength = originalMemory.length;\n    // We need to copy some buffers so the user can't mutate them on us:\n    // Instead of making a bunch of individual buffers, we just make 1 and then\n    // fill it in as needed.\n    const sharedBuffer = Buffer.allocUnsafe(104 + memoryLength);\n    account.stateRoot.copy(sharedBuffer, 0, 0, 32); // always 32 bytes\n    account.codeHash.copy(sharedBuffer, 32, 0, 32); // always 32 bytes\n    event.address.buf.copy(sharedBuffer, 64, 0, 20); // always 20 bytes\n    event.codeAddress.buf.copy(sharedBuffer, 84, 0, 20); // always 20 bytes\n    const stateRoot = sharedBuffer.slice(0, 32);\n    const codeHash = sharedBuffer.slice(32, 64);\n    const address = sharedBuffer.slice(64, 84);\n    const codeAddress = sharedBuffer.slice(84, 104);\n    let memory;\n    if (memoryLength !== 0) {\n        originalMemory.copy(sharedBuffer, 104, 0, memoryLength);\n        memory = sharedBuffer.slice(104, 104 + memoryLength);\n    }\n    else {\n        memory = utils_1.BUFFER_ZERO;\n    }\n    return {\n        account: {\n            nonce: utils_1.Quantity.from(account.nonce.toArrayLike(Buffer)).toBigInt(),\n            balance: utils_1.Quantity.from(account.balance.toArrayLike(Buffer)).toBigInt(),\n            stateRoot,\n            codeHash\n        },\n        address,\n        codeAddress,\n        depth: BigInt(event.depth),\n        gasLeft: utils_1.Quantity.from(event.gasLeft.toArrayLike(Buffer)).toBigInt(),\n        gasRefund: utils_1.Quantity.from(event.gasRefund.toArrayLike(Buffer)).toBigInt(),\n        memory,\n        memoryWordCount: utils_1.Quantity.from(event.memoryWordCount.toArrayLike(Buffer)).toBigInt(),\n        opcode: {\n            name: opcode.name,\n            fee: opcode.fee\n        },\n        pc: BigInt(event.pc),\n        returnStack: event.returnStack.map(rs => rs.toArrayLike(Buffer)),\n        stack: event.stack.map(s => s.toArrayLike(Buffer))\n    };\n}\nfunction makeStepEvent(context, event) {\n    return {\n        context,\n        data: normalizeEvent(event)\n    };\n}\nexports.makeStepEvent = makeStepEvent;\n//# sourceMappingURL=provider-events.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _options, _api, _executor, _wallet, _blockchain, _send, _logRequest, _legacySendPayloads, _legacySendPayload;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst api_1 = __importDefault(require(\"./api\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_options_1 = require(\"@ganache/ethereum-options\");\nconst lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\nconst wallet_1 = __importDefault(require(\"./wallet\"));\nconst blockchain_1 = __importDefault(require(\"./blockchain\"));\nconst fork_1 = require(\"./forking/fork\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nfunction parseCoinbase(coinbase, initialAccounts) {\n    switch (typeof coinbase) {\n        case \"object\":\n            return coinbase;\n        case \"number\":\n            const account = initialAccounts[coinbase];\n            if (account) {\n                return account.address;\n            }\n            else {\n                throw new Error(`invalid coinbase address index: ${coinbase}`);\n            }\n        case \"string\":\n            return ethereum_address_1.Address.from(coinbase);\n        default: {\n            throw new Error(`coinbase address must be string or number, received: ${coinbase}`);\n        }\n    }\n}\n/**\n * Detects when a ganache:vm:tx:step listener is active and signals the onChange\n * function when the status changes\n * @param provider\n * @param onChange\n */\nfunction hookEventSystem(provider, onChange) {\n    let listenerCount = 0;\n    provider.on(emittery_1.default.listenerAdded, ({ eventName }) => {\n        if (eventName === \"ganache:vm:tx:step\" || eventName === undefined) {\n            if (listenerCount === 0) {\n                onChange(true);\n            }\n            listenerCount++;\n        }\n    });\n    provider.on(emittery_1.default.listenerRemoved, ({ eventName }) => {\n        if (eventName === \"ganache:vm:tx:step\" || eventName === undefined) {\n            listenerCount--;\n            if (listenerCount === 0) {\n                onChange(false);\n            }\n        }\n    });\n}\nclass EthereumProvider extends emittery_1.default.Typed {\n    constructor(options = {}, executor) {\n        super();\n        _options.set(this, void 0);\n        _api.set(this, void 0);\n        _executor.set(this, void 0);\n        _wallet.set(this, void 0);\n        _blockchain.set(this, void 0);\n        /**\n         * Remove an event subscription\n         */\n        this.removeListener = this.off;\n        _send.set(this, (arg1, arg2) => {\n            let method;\n            let params;\n            let response;\n            if (typeof arg1 === \"string\") {\n                // this signature is (not) non-standard and is only a ganache thing!!!\n                // we should probably remove it, but I really like it so I haven't yet.\n                method = arg1;\n                params = arg2;\n                response = this.request({ method, params });\n            }\n            else if (typeof arg2 === \"function\") {\n                // handle backward compatibility with callback-style ganache-core\n                if (Array.isArray(arg1)) {\n                    const callback = arg2;\n                    __classPrivateFieldGet(this, _legacySendPayloads).call(this, arg1).then(({ error, result }) => {\n                        callback(error, result);\n                    });\n                }\n                else {\n                    const callback = arg2;\n                    __classPrivateFieldGet(this, _legacySendPayload).call(this, arg1).then(({ error, result }) => {\n                        callback(error, result);\n                    });\n                }\n            }\n            else {\n                throw new Error(\"No callback provided to provider's send function. As of web3 1.0, provider.send \" +\n                    \"is no longer synchronous and must be passed a callback as its final argument.\");\n            }\n            return response;\n        });\n        _logRequest.set(this, (method, params) => {\n            const options = __classPrivateFieldGet(this, _options);\n            if (options.logging.verbose) {\n                options.logging.logger.log(`   >  ${method}: ${params == null\n                    ? params\n                    : JSON.stringify(params, null, 2).split(\"\\n\").join(\"\\n   > \")}`);\n            }\n            else {\n                options.logging.logger.log(method);\n            }\n        });\n        this.disconnect = async () => {\n            await __classPrivateFieldGet(this, _blockchain).stop();\n            this.emit(\"disconnect\");\n            return;\n        };\n        //#region legacy\n        _legacySendPayloads.set(this, (payloads) => {\n            return Promise.all(payloads.map(__classPrivateFieldGet(this, _legacySendPayload))).then(results => {\n                let mainError = null;\n                const responses = [];\n                results.forEach(({ error, result }, i) => {\n                    responses.push(result);\n                    if (error) {\n                        if (mainError == null) {\n                            mainError = new Error(\"Batch error:\");\n                        }\n                        mainError.errors[i] = error;\n                    }\n                });\n                return { error: mainError, result: responses };\n            });\n        });\n        _legacySendPayload.set(this, async (payload) => {\n            const method = payload.method;\n            const params = payload.params;\n            try {\n                const result = await this.request({ method, params });\n                return {\n                    error: null,\n                    result: utils_1.makeResponse(payload.id, JSON.parse(JSON.stringify(result)))\n                };\n            }\n            catch (error) {\n                let result;\n                // In order to provide `vmErrorsOnRPCResponse`, the `error` might have\n                // a `result` property that we need to move to the result field. Yes,\n                // it's super weird behavior!\n                if (utils_1.hasOwn(error, \"result\")) {\n                    result = error.result;\n                    delete error.result;\n                }\n                return { error, result: utils_1.makeError(payload.id, error, result) };\n            }\n        });\n        __classPrivateFieldSet(this, _executor, executor);\n        const providerOptions = (__classPrivateFieldSet(this, _options, ethereum_options_1.EthereumOptionsConfig.normalize(options)));\n        const wallet = (__classPrivateFieldSet(this, _wallet, new wallet_1.default(providerOptions.wallet)));\n        const accounts = wallet.initialAccounts;\n        const fork = providerOptions.fork.url || providerOptions.fork.provider;\n        const fallback = fork ? new fork_1.Fork(providerOptions, accounts) : null;\n        const coinbase = parseCoinbase(providerOptions.miner.coinbase, accounts);\n        const blockchain = new blockchain_1.default(providerOptions, coinbase, fallback);\n        __classPrivateFieldSet(this, _blockchain, blockchain);\n        blockchain.on(\"ganache:vm:tx:before\", event => {\n            this.emit(\"ganache:vm:tx:before\", event);\n        });\n        blockchain.on(\"ganache:vm:tx:step\", event => {\n            this.emit(\"ganache:vm:tx:step\", event);\n        });\n        blockchain.on(\"ganache:vm:tx:after\", event => {\n            this.emit(\"ganache:vm:tx:after\", event);\n        });\n        hookEventSystem(this, (enable) => {\n            blockchain.toggleStepEvent(enable);\n        });\n        __classPrivateFieldSet(this, _api, new api_1.default(providerOptions, wallet, blockchain));\n    }\n    async initialize() {\n        await __classPrivateFieldGet(this, _blockchain).initialize(__classPrivateFieldGet(this, _wallet).initialAccounts);\n        this.emit(\"connect\");\n    }\n    /**\n     * Returns the options, including defaults and generated, used to start Ganache.\n     */\n    getOptions() {\n        return lodash_clonedeep_1.default(__classPrivateFieldGet(this, _options));\n    }\n    /**\n     * Returns the unlocked accounts\n     */\n    getInitialAccounts() {\n        const accounts = {};\n        const wallet = __classPrivateFieldGet(this, _wallet);\n        const unlockedAccounts = __classPrivateFieldGet(this, _wallet).unlockedAccounts;\n        wallet.initialAccounts.forEach(account => {\n            const address = account.address.toString();\n            accounts[address] = {\n                secretKey: account.privateKey.toString(),\n                balance: account.balance.toBigInt(),\n                unlocked: unlockedAccounts.has(address)\n            };\n        });\n        return accounts;\n    }\n    send(arg1, arg2) {\n        return __classPrivateFieldGet(this, _send).call(this, arg1, arg2);\n    }\n    sendAsync(arg1, arg2) {\n        __classPrivateFieldGet(this, _send).call(this, arg1, arg2);\n    }\n    /**\n     * EIP-1193 style request method\n     * @param args - the args\n     * @returns A Promise that resolves with the method's result or rejects with a CodedError\n     * @EIP [1193](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md)\n     */\n    async request(args) {\n        const rawResult = await this._requestRaw(args);\n        const value = await rawResult.value;\n        return JSON.parse(JSON.stringify(value));\n    }\n    /**\n     * INTERNAL. Used when the caller wants to access the original `PromiEvent`,\n     * which would otherwise be flattened into a regular Promise through the\n     * Promise chain.\n     * @param request - the request\n     */\n    async _requestRaw({ method, params }) {\n        __classPrivateFieldGet(this, _logRequest).call(this, method, params);\n        const result = await __classPrivateFieldGet(this, _executor).execute(__classPrivateFieldGet(this, _api), method, params);\n        const promise = result.value;\n        if (promise instanceof utils_1.PromiEvent) {\n            promise.on(\"message\", data => {\n                // EIP-1193\n                this.emit(\"message\", data);\n                // legacy\n                this.emit(\"data\", {\n                    jsonrpc: \"2.0\",\n                    method: \"eth_subscription\",\n                    params: data.data\n                });\n            });\n        }\n        const value = promise.catch((error) => {\n            if (__classPrivateFieldGet(this, _options).chain.vmErrorsOnRPCResponse) {\n                if (utils_1.hasOwn(error, \"result\")) {\n                    // stringify the result here\n                    // TODO: not sure why the stringification is even needed.\n                    error.result = JSON.parse(JSON.stringify(error.result));\n                }\n            }\n            // then rethrow\n            throw error;\n        });\n        return { value: value };\n    }\n}\nexports.default = EthereumProvider;\n_options = new WeakMap(), _api = new WeakMap(), _executor = new WeakMap(), _wallet = new WeakMap(), _blockchain = new WeakMap(), _send = new WeakMap(), _logRequest = new WeakMap(), _legacySendPayloads = new WeakMap(), _legacySendPayload = new WeakMap();\n//# sourceMappingURL=provider.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _options, _priceBump, _blockchain, _origins, _accountPromises, _validateTransaction;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TriageOption = void 0;\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst utils_2 = require(\"@ganache/utils\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\n/**\n * Checks if the `replacer` is eligible to replace the `replacee` transaction\n * in the transaction pool queue. Replacement eligibility requires that\n * the transactions have the same nonce and the `replacer` has a gas price\n * that is `gasPrice * priceBump` better than our `replacee`.\n * @param replacee\n * @param replaceeNonce\n * @param replacerNonce\n * @param replacerGasPrice\n * @param priceBump\n */\nfunction shouldReplace(replacee, replacerNonce, replacerGasPrice, priceBump) {\n    const replaceeNonce = replacee.nonce.toBigInt();\n    // if the nonces differ, our replacer is not eligible to replace\n    if (replaceeNonce !== replacerNonce) {\n        return false;\n    }\n    const gasPrice = replacee.effectiveGasPrice.toBigInt();\n    const thisPricePremium = gasPrice + (gasPrice * priceBump) / 100n;\n    // if our replacer's price is `gasPrice * priceBumpPercent` better than our\n    // replacee's price, we should do the replacement!.\n    if (!replacee.locked && replacerGasPrice > thisPricePremium) {\n        return true;\n    }\n    else {\n        throw new ethereum_utils_1.CodedError(ethereum_utils_1.UNDERPRICED, utils_2.JsonRpcErrorCode.TRANSACTION_REJECTED);\n    }\n}\nfunction byNonce(values, a, b) {\n    return ((values[b].nonce.toBigInt() || 0n) > (values[a].nonce.toBigInt() || 0n));\n}\n/**\n * Used to track a transaction's placement in the transaction pool based off\n * of the its nonce.\n */\nvar TriageOption;\n(function (TriageOption) {\n    /**\n     * Default value. A tx will be added to the future queue if it is not yet\n     * executable based off of the transaction's nonce.\n     */\n    TriageOption[TriageOption[\"FutureQueue\"] = 0] = \"FutureQueue\";\n    /**\n     * The transaction is currently executable based off the transaction's nonce.\n     */\n    TriageOption[TriageOption[\"Executable\"] = 1] = \"Executable\";\n    /**\n     * The transaction is currently executable, has the same nonce as a pending\n     * transaction of the same origin, and has a gas price that is high enough to\n     * replace the currently pending transaction.\n     */\n    TriageOption[TriageOption[\"ReplacesPendingExecutable\"] = 2] = \"ReplacesPendingExecutable\";\n    /**\n     * The transaction is not currently executable but has the same nonce as a\n     * future queued transaction of the same origin and has a gas price that is\n     * high enough to replace the future queued transaction.\n     */\n    TriageOption[TriageOption[\"ReplacesFutureTransaction\"] = 3] = \"ReplacesFutureTransaction\";\n})(TriageOption = exports.TriageOption || (exports.TriageOption = {}));\nclass TransactionPool extends emittery_1.default.Typed {\n    constructor(options, blockchain, origins = new Map()) {\n        super();\n        _options.set(this, void 0);\n        /**\n         * Minimum price bump percentage to replace an already existing transaction (nonce)\n         */\n        _priceBump.set(this, 10n);\n        _blockchain.set(this, void 0);\n        this.executables = {\n            inProgress: new Set(),\n            pending: new Map()\n        };\n        _origins.set(this, void 0);\n        _accountPromises.set(this, new Map());\n        this.drain = () => {\n            // notify listeners (the blockchain, then the miner, eventually) that we\n            // have executable transactions ready\n            this.emit(\"drain\");\n        };\n        _validateTransaction.set(this, (transaction) => {\n            // Check the transaction doesn't exceed the current block limit gas.\n            if (transaction.gas > __classPrivateFieldGet(this, _options).blockGasLimit) {\n                return new ethereum_utils_1.CodedError(ethereum_utils_1.GAS_LIMIT, utils_2.JsonRpcErrorCode.INVALID_INPUT);\n            }\n            // Should supply enough intrinsic gas\n            const gas = transaction.calculateIntrinsicGas();\n            if (gas === -1n || transaction.gas.toBigInt() < gas) {\n                return new ethereum_utils_1.CodedError(ethereum_utils_1.INTRINSIC_GAS_TOO_LOW, utils_2.JsonRpcErrorCode.INVALID_INPUT);\n            }\n            return null;\n        });\n        __classPrivateFieldSet(this, _blockchain, blockchain);\n        __classPrivateFieldSet(this, _options, options);\n        __classPrivateFieldSet(this, _origins, origins);\n    }\n    /**\n     * Inserts a transaction into the pending queue, if executable, or future pool\n     * if not.\n     *\n     * @param transaction\n     * @param secretKey\n     * @returns data that can be used to drain the queue\n     */\n    async prepareTransaction(transaction, secretKey) {\n        let err;\n        err = __classPrivateFieldGet(this, _validateTransaction).call(this, transaction);\n        if (err != null) {\n            throw err;\n        }\n        const from = transaction.from;\n        let txNonce;\n        if (!transaction.nonce.isNull()) {\n            txNonce = transaction.nonce.toBigInt();\n        }\n        const origin = from.toString();\n        // We await the `transactorNoncePromise` async request to ensure we process\n        // transactions in FIFO order *by account*. We look up accounts because\n        // ganache fills in missing nonces automatically, and we need to do it in\n        // order.\n        // The trick here is that we might actually get the next nonce from the\n        // account's pending executable transactions, not the account...\n        // But another transaction might currently be getting the nonce from the\n        // account, if it is, we need to wait for it to be done doing that. Hence:\n        let transactorNoncePromise = __classPrivateFieldGet(this, _accountPromises).get(origin);\n        if (transactorNoncePromise) {\n            await transactorNoncePromise;\n        }\n        // if the user called sendTransaction or sendRawTransaction, effectiveGasPrice\n        // hasn't been set yet on the tx. calculating the effectiveGasPrice requires\n        // the block context, so we need to set it outside of the transaction. this\n        // value is updated in the miner as we're more sure of what block the tx will\n        // actually go on, but we still need to set it here to check for valid\n        // transaction replacements of same origin/nonce transactions\n        if (!transaction.effectiveGasPrice &&\n            __classPrivateFieldGet(this, _blockchain).common.isActivatedEIP(1559)) {\n            const baseFeePerGas = __classPrivateFieldGet(this, _blockchain).blocks.latest.header.baseFeePerGas;\n            transaction.updateEffectiveGasPrice(baseFeePerGas);\n        }\n        // we should _probably_ cache `highestNonce`, but it's actually a really hard thing to cache as the current highest\n        // nonce might be invalidated (like if the sender doesn't have enough funds), so we'd have to go back to the previous\n        // highest nonce... but what if that previous highest nonce was also invalidated?! we have to go back to the... you\n        // get the picture.\n        // So... we currently do things sub-optimally:\n        // if we currently have txs in `executableOriginTransactions`, we iterate over them to find the highest nonce\n        // and use that. Otherwise, we just fetch it from the database.\n        // Beware! There might still be race conditions here:\n        //  * if the highest tx executes, which causes it to be removed from the `executableOriginTransactions` heap,\n        // then a new tx comes in _before_ the block is persisted to the database, the nonce might be of the second\n        // tx would be too low.\n        //  * rough idea for a fix: transactions have a `finalize` method that is called _after_ the tx is saved. Maybe\n        // when tx's are executed their nonce is moved to a `highNonceByOrigin` map? We'd check this map in addition to the\n        // `executableOriginTransactions` map, always taking the highest of the two.\n        let highestNonce = 0n;\n        const origins = __classPrivateFieldGet(this, _origins);\n        const queuedOriginTransactions = origins.get(origin);\n        let transactionPlacement = TriageOption.FutureQueue;\n        const executables = this.executables.pending;\n        let executableOriginTransactions = executables.get(origin);\n        const priceBump = __classPrivateFieldGet(this, _priceBump);\n        const newGasPrice = transaction.effectiveGasPrice.toBigInt();\n        let length;\n        if (executableOriginTransactions &&\n            (length = executableOriginTransactions.length)) {\n            // check if a transaction with the same nonce is in the origin's\n            // executables queue already. Replace the matching transaction or throw this\n            // new transaction away as necessary.\n            const pendingArray = executableOriginTransactions.array;\n            // Notice: we're iterating over the raw heap array, which isn't\n            // necessarily sorted\n            for (let i = 0; i < length; i++) {\n                const pendingTx = pendingArray[i];\n                if (shouldReplace(pendingTx, txNonce, newGasPrice, priceBump)) {\n                    // do an in-place replace without triggering a re-sort because we\n                    // already know where this transaction should go in this \"byNonce\"\n                    // heap.\n                    pendingArray[i] = transaction;\n                    // we don't want to mark this transaction as \"executable\" and thus\n                    // have it added to the pool again. so use this flag to skip\n                    // a re-queue.\n                    transactionPlacement = TriageOption.ReplacesPendingExecutable;\n                    pendingTx.finalize(\"rejected\", new ethereum_utils_1.CodedError(ethereum_utils_1.REPLACED, utils_2.JsonRpcErrorCode.TRANSACTION_REJECTED));\n                    break;\n                }\n                // track the highest nonce for all transactions pending from this\n                // origin. If this transaction can't be used as a replacement, it will\n                // use this next highest nonce.\n                const pendingTxNonce = pendingTx.nonce.toBigInt();\n                if (pendingTxNonce > highestNonce)\n                    highestNonce = pendingTxNonce;\n            }\n            if (txNonce === void 0) {\n                // if we aren't signed and don't have a transactionNonce yet set it now\n                txNonce = highestNonce + 1n;\n                transaction.nonce = utils_2.Quantity.from(txNonce);\n                transactionPlacement = TriageOption.Executable;\n            }\n            else if (txNonce === highestNonce + 1n) {\n                // if our transaction's nonce is 1 higher than the last transaction in the\n                // origin's heap we are executable.\n                transactionPlacement = TriageOption.Executable;\n            }\n        }\n        else {\n            // since we don't have any executable transactions at the moment, we need\n            // to find our nonce from the account itself...\n            if (!transactorNoncePromise) {\n                transactorNoncePromise = __classPrivateFieldGet(this, _blockchain).accounts.getNonce(from);\n                __classPrivateFieldGet(this, _accountPromises).set(origin, transactorNoncePromise);\n                transactorNoncePromise.then(() => {\n                    __classPrivateFieldGet(this, _accountPromises).delete(origin);\n                });\n            }\n            const transactor = await transactorNoncePromise;\n            const transactorNonce = transactor ? transactor.toBigInt() : 0n;\n            if (txNonce === void 0) {\n                // if we don't have a transactionNonce, just use the account's next\n                // nonce and mark as executable\n                txNonce = transactorNonce ? transactorNonce : 0n;\n                transaction.nonce = utils_2.Quantity.from(txNonce);\n                transactionPlacement = TriageOption.Executable;\n            }\n            else if (txNonce < transactorNonce) {\n                // it's an error if the transaction's nonce is <= the persisted nonce\n                throw new Error(`the tx doesn't have the correct nonce. account has nonce of: ${transactorNonce} tx has nonce of: ${txNonce}`);\n            }\n            else if (txNonce === transactorNonce) {\n                transactionPlacement = TriageOption.Executable;\n            }\n        }\n        // we have future transactions for this origin, this transaction is not yet\n        // executable, and this transaction is not replacing a previously queued/\n        // executable transaction, then this is potentially eligible to replace a\n        // future transaction\n        if (queuedOriginTransactions &&\n            transactionPlacement !== TriageOption.Executable &&\n            transactionPlacement !== TriageOption.ReplacesPendingExecutable &&\n            (length = queuedOriginTransactions.length)) {\n            // check if a transaction with the same nonce is in the origin's\n            // future queue already. Replace the matching transaction or throw this\n            // new transaction away as necessary.\n            const queuedArray = queuedOriginTransactions.array;\n            // Notice: we're iterating over the raw heap array, which isn't\n            // necessarily sorted\n            for (let i = 0; i < length; i++) {\n                const queuedTx = queuedArray[i];\n                if (shouldReplace(queuedTx, txNonce, newGasPrice, priceBump)) {\n                    // do an in-place replace without triggering a re-sort because we\n                    // already know where this transaction should go in this \"byNonce\"\n                    // heap.\n                    queuedArray[i] = transaction;\n                    // we don't want to mark this transaction as \"FutureQueue\" and thus\n                    // have it added to the pool again. so use this flag to skip\n                    // a re-queue.\n                    transactionPlacement = TriageOption.ReplacesFutureTransaction;\n                    queuedTx.finalize(\"rejected\", new ethereum_utils_1.CodedError(ethereum_utils_1.REPLACED, utils_2.JsonRpcErrorCode.TRANSACTION_REJECTED));\n                    break;\n                }\n            }\n        }\n        // now that we know we have a transaction nonce we can sign the transaction\n        // (if we have the secret key)\n        if (secretKey) {\n            transaction.signAndHash(secretKey.toBuffer());\n        }\n        else if (transaction.v == null) {\n            // if we don't have the secret key and we aren't already signed,\n            // then we are a \"fake transaction\", so we sign it with a fake key.\n            const from = transaction.from.toBuffer();\n            let fakePrivateKey;\n            if (from.equals(utils_2.ACCOUNT_ZERO)) {\n                // allow signing with the 0x0 address...\n                // always sign with the same fake key, a 31 `0`s followed by a single\n                // `1`. The key is arbitrary. It just must not be all `0`s and must be\n                // deterministic.\n                // see: https://github.com/ethereumjs/ethereumjs-monorepo/issues/829#issue-674385636\n                fakePrivateKey = Buffer.allocUnsafe(32).fill(0, 0, 31);\n                fakePrivateKey[31] = 1;\n            }\n            else {\n                fakePrivateKey = Buffer.concat([from, from.slice(0, 12)]);\n            }\n            transaction.signAndHash(fakePrivateKey);\n        }\n        switch (transactionPlacement) {\n            case TriageOption.Executable:\n                // if it is executable add it to the executables queue\n                if (executableOriginTransactions) {\n                    executableOriginTransactions.push(transaction);\n                }\n                else {\n                    // if we don't yet have an executables queue for this origin make one now\n                    executableOriginTransactions = utils_1.Heap.from(transaction, byNonce);\n                    executables.set(origin, executableOriginTransactions);\n                }\n                // Now we need to drain any queued transactions that were previously\n                // not executable due to nonce gaps into the origin's queue...\n                if (queuedOriginTransactions) {\n                    let nextExpectedNonce = txNonce + 1n;\n                    while (true) {\n                        const nextTx = queuedOriginTransactions.peek();\n                        const nextTxNonce = nextTx.nonce.toBigInt() || 0n;\n                        if (nextTxNonce !== nextExpectedNonce) {\n                            break;\n                        }\n                        // we've got a an executable nonce! Put it in the executables queue.\n                        executableOriginTransactions.push(nextTx);\n                        // And then remove this transaction from its origin's queue\n                        if (!queuedOriginTransactions.removeBest()) {\n                            // removeBest() returns `false` when there are no more items after\n                            // the removed item. Let's do some cleanup when that happens.\n                            origins.delete(origin);\n                            break;\n                        }\n                        nextExpectedNonce += 1n;\n                    }\n                }\n                return true;\n            case TriageOption.FutureQueue:\n                // otherwise, put it in the future queue\n                if (queuedOriginTransactions) {\n                    queuedOriginTransactions.push(transaction);\n                }\n                else {\n                    origins.set(origin, utils_1.Heap.from(transaction, byNonce));\n                }\n                return false;\n            case TriageOption.ReplacesPendingExecutable:\n                // we've replaced the best transaction from this origin for this nonce,\n                // and it is executable\n                return true;\n            case TriageOption.ReplacesFutureTransaction:\n                // we've replaced the best transaction from this origin for a future\n                // nonce, so this one isn't executable\n                return false;\n        }\n    }\n    clear() {\n        __classPrivateFieldGet(this, _origins).clear();\n        __classPrivateFieldGet(this, _accountPromises).clear();\n        this.executables.pending.clear();\n    }\n    /**\n     * Returns the transaction matching the given hash.\n     *\n     * This isn't the fastest thing... but querying for pending transactions is\n     * likely rare, so leaving this slow so other code paths can be faster might\n     * be okay.\n     *\n     * @param transactionHash\n     */\n    find(transactionHash) {\n        const { pending, inProgress } = this.executables;\n        // first search pending transactions\n        for (let [_, transactions] of __classPrivateFieldGet(this, _origins)) {\n            if (transactions === undefined)\n                continue;\n            const arr = transactions.array;\n            for (let i = 0; i < transactions.length; i++) {\n                const tx = arr[i];\n                if (tx.hash.toBuffer().equals(transactionHash)) {\n                    return tx;\n                }\n            }\n        }\n        // then transactions eligible for execution\n        for (let [_, transactions] of pending) {\n            const arr = transactions.array;\n            for (let i = 0; i < transactions.length; i++) {\n                const tx = arr[i];\n                if (tx.hash.toBuffer().equals(transactionHash)) {\n                    return tx;\n                }\n            }\n        }\n        // and finally transactions that have just been processed, but not yet saved\n        for (let tx of inProgress) {\n            if (tx.hash.toBuffer().equals(transactionHash)) {\n                return tx;\n            }\n        }\n        return null;\n    }\n}\nexports.default = TransactionPool;\n_options = new WeakMap(), _priceBump = new WeakMap(), _blockchain = new WeakMap(), _origins = new WeakMap(), _accountPromises = new WeakMap(), _validateTransaction = new WeakMap();\n//# sourceMappingURL=transaction-pool.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _randomRng, _randomBytes, _initializeAccounts, _lockAccount;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst hdkey_1 = require(\"./hdkey\");\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst bip39_1 = require(\"bip39\");\nconst seedrandom_1 = require(\"seedrandom\");\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst keccak_1 = __importDefault(require(\"keccak\"));\nconst fs_1 = require(\"fs\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\n//#region Constants\nconst SCRYPT_PARAMS = {\n    dklen: 32,\n    n: 1024,\n    p: 8,\n    r: 1\n};\nconst CIPHER = \"aes-128-ctr\";\nconst scrypt = (...args) => {\n    return new Promise((resolve, reject) => {\n        crypto_1.default.scrypt.call(crypto_1.default, ...args, (err, derivedKey) => {\n            if (err) {\n                return void reject(err);\n            }\n            return resolve(derivedKey);\n        });\n    });\n};\n/**\n * A Buffer that can be reused by `uncompressedPublicKeyToAddress`.\n */\nconst SHARED_BUFFER = Buffer.allocUnsafe(65);\nconst uncompressedPublicKeyToAddress = (uncompressedPublicKey) => {\n    const status = secp256k1_1.default.publicKeyConvert(SHARED_BUFFER, uncompressedPublicKey);\n    switch (status) {\n        case 0:\n            return ethereum_address_1.Address.from(utils_1.keccak(SHARED_BUFFER.slice(1)).slice(-20));\n        case 1:\n            throw new Error(\"Public Key could not be parsed\");\n        case 2:\n            throw new Error(\"Public Key serialization error\");\n    }\n};\nconst asUUID = (uuid) => {\n    return `${uuid.toString(\"hex\", 0, 4)}-${uuid.toString(\"hex\", 4, 6)}-${uuid.toString(\"hex\", 6, 8)}-${uuid.toString(\"hex\", 8, 10)}-${uuid.toString(\"hex\", 10)}`;\n};\nclass Wallet {\n    constructor(opts) {\n        this.knownAccounts = new Set();\n        this.encryptedKeyFiles = new Map();\n        this.unlockedAccounts = new Map();\n        this.lockTimers = new Map();\n        _randomRng.set(this, void 0);\n        _randomBytes.set(this, (length) => {\n            // Since this is a mock RPC library, the rng doesn't need to be\n            // cryptographically secure, and determinism is desired.\n            const buf = Buffer.allocUnsafe(length);\n            const rand = __classPrivateFieldGet(this, _randomRng);\n            for (let i = 0; i < length; i++) {\n                buf[i] = (rand() * 256) | 0; // generates a random number from 0 to 255\n            }\n            return buf;\n        });\n        _initializeAccounts.set(this, (options) => {\n            let makeAccountAtIndex;\n            try {\n                makeAccountAtIndex = hdkey_1.createAccountGeneratorFromSeedAndPath(bip39_1.mnemonicToSeedSync(options.mnemonic, null), options.hdPath);\n            }\n            catch (e) {\n                console.log(e);\n            }\n            // convert a potentially fractional balance of Ether to WEI\n            const balanceParts = options.defaultBalance.toString().split(\".\", 2);\n            const significand = BigInt(balanceParts[0]);\n            const fractionalStr = balanceParts[1] || \"0\";\n            const fractional = BigInt(fractionalStr);\n            const magnitude = 10n ** BigInt(fractionalStr.length);\n            const defaultBalanceInWei = utils_1.WEI * significand + fractional * (utils_1.WEI / magnitude);\n            const etherInWei = utils_1.Quantity.from(defaultBalanceInWei);\n            let accounts;\n            let givenAccounts = options.accounts;\n            let accountsLength;\n            if (givenAccounts && (accountsLength = givenAccounts.length) !== 0) {\n                accounts = Array(accountsLength);\n                for (let i = 0; i < accountsLength; i++) {\n                    const account = givenAccounts[i];\n                    const secretKey = account.secretKey;\n                    let privateKey;\n                    let address;\n                    if (!secretKey) {\n                        const account = makeAccountAtIndex(i);\n                        address = uncompressedPublicKeyToAddress(account.publicKey);\n                        privateKey = utils_1.Data.from(account.privateKey);\n                        accounts[i] = Wallet.createAccount(utils_1.Quantity.from(account.balance), privateKey, address);\n                    }\n                    else {\n                        privateKey = utils_1.Data.from(secretKey);\n                        const a = (accounts[i] = Wallet.createAccountFromPrivateKey(privateKey));\n                        a.balance = utils_1.Quantity.from(account.balance);\n                    }\n                }\n            }\n            else {\n                const numberOfAccounts = options.totalAccounts;\n                if (numberOfAccounts != null) {\n                    accounts = Array(numberOfAccounts);\n                    for (let index = 0; index < numberOfAccounts; index++) {\n                        const account = makeAccountAtIndex(index);\n                        const address = uncompressedPublicKeyToAddress(account.publicKey);\n                        const privateKey = utils_1.Data.from(account.privateKey);\n                        accounts[index] = Wallet.createAccount(etherInWei, privateKey, address);\n                    }\n                }\n            }\n            return accounts;\n        });\n        _lockAccount.set(this, (lowerAddress) => {\n            this.lockTimers.delete(lowerAddress);\n            this.unlockedAccounts.delete(lowerAddress);\n            return true;\n        });\n        // create a RNG from our initial starting conditions (opts.mnemonic)\n        __classPrivateFieldSet(this, _randomRng, seedrandom_1.alea(\"ganache \" + opts.mnemonic));\n        const initialAccounts = (this.initialAccounts = __classPrivateFieldGet(this, _initializeAccounts).call(this, opts));\n        const l = initialAccounts.length;\n        const knownAccounts = this.knownAccounts;\n        const unlockedAccounts = this.unlockedAccounts;\n        //#region Unlocked Accounts\n        const givenUnlockedAccounts = opts.unlockedAccounts;\n        if (givenUnlockedAccounts) {\n            const ul = givenUnlockedAccounts.length;\n            for (let i = 0; i < ul; i++) {\n                let arg = givenUnlockedAccounts[i];\n                let address;\n                switch (typeof arg) {\n                    case \"string\":\n                        // `toLowerCase` so we handle uppercase `0X` formats\n                        const addressOrIndex = arg.toLowerCase();\n                        if (addressOrIndex.indexOf(\"0x\") === 0) {\n                            address = addressOrIndex;\n                            break;\n                        }\n                        else {\n                            // try to convert the arg string to a number.\n                            // don't use parseInt because strings like `\"123abc\"` parse\n                            // to `123`, and there is probably an error on the user's side we'd\n                            // want to uncover.\n                            const index = arg - 0;\n                            // if we don't have a valid number, or the number isn't a valid JS\n                            // integer (no bigints or decimals, please), throw an error.\n                            if (!Number.isSafeInteger(index)) {\n                                throw new Error(`Invalid value in wallet.unlockedAccounts: ${arg}`);\n                            }\n                            arg = index;\n                            // not `break`ing here because I want this to fall through to the\n                            //  `\"number\"` case below.\n                            // Refactor it if you want.\n                            // break; // no break, please.\n                        }\n                    case \"number\":\n                        const account = initialAccounts[arg];\n                        if (account == null) {\n                            throw new Error(`Account at index ${arg} not found. Max index available is ${l - 1}.`);\n                        }\n                        address = account.address.toString().toLowerCase();\n                        break;\n                    default:\n                        throw new Error(`Invalid value specified in unlocked_accounts`);\n                }\n                if (unlockedAccounts.has(address))\n                    continue;\n                // if we don't have the secretKey for an account we use `null`\n                unlockedAccounts.set(address, null);\n            }\n        }\n        //#endregion\n        //#region Configure Known + Unlocked Accounts\n        const accountsCache = (this.addresses = Array(l));\n        for (let i = 0; i < l; i++) {\n            const account = initialAccounts[i];\n            const address = account.address;\n            const strAddress = address.toString();\n            accountsCache[i] = strAddress;\n            knownAccounts.add(strAddress);\n            // if the `secure` option has been set do NOT add these accounts to the\n            // unlockedAccounts, unless the account was already added to\n            // unlockedAccounts, in which case we need to add the account's private\n            // key.\n            if (opts.secure && !unlockedAccounts.has(strAddress))\n                continue;\n            unlockedAccounts.set(strAddress, account.privateKey);\n        }\n        //#endregion\n        //#region save accounts to disk\n        if (opts.accountKeysPath != null) {\n            const fileData = {\n                addresses: {},\n                private_keys: {}\n            };\n            unlockedAccounts.forEach((privateKey, address) => {\n                fileData.addresses[address] = address;\n                fileData.private_keys[address] = privateKey;\n            });\n            // WARNING: Do not turn this to an async method without\n            // making a Wallet.initialize() function and calling it via\n            // Provider.initialize(). No async methods in constructors.\n            // writeFileSync here is acceptable.\n            fs_1.writeFileSync(opts.accountKeysPath, JSON.stringify(fileData));\n        }\n        //#endregion\n    }\n    async encrypt(privateKey, passphrase) {\n        const random = __classPrivateFieldGet(this, _randomBytes).call(this, 32 + 16 + 16);\n        const salt = random.slice(0, 32); // first 32 bytes\n        const iv = random.slice(32, 32 + 16); // next 16 bytes\n        const uuid = random.slice(32 + 16); // last 16 bytes\n        const derivedKey = await scrypt(passphrase, salt, SCRYPT_PARAMS.dklen, {\n            ...SCRYPT_PARAMS,\n            N: SCRYPT_PARAMS.n\n        });\n        const cipher = crypto_1.default.createCipheriv(CIPHER, derivedKey.slice(0, 16), iv);\n        const ciphertext = Buffer.concat([\n            cipher.update(privateKey.toBuffer()),\n            cipher.final()\n        ]);\n        const mac = keccak_1.default(\"keccak256\")\n            .update(Buffer.concat([derivedKey.slice(16, 32), ciphertext]))\n            .digest();\n        return {\n            crypto: {\n                cipher: CIPHER,\n                ciphertext: utils_1.Data.from(ciphertext),\n                cipherparams: {\n                    iv: utils_1.Data.from(iv)\n                },\n                kdf: \"scrypt\",\n                kdfParams: {\n                    ...SCRYPT_PARAMS,\n                    salt: utils_1.Data.from(salt)\n                },\n                mac: utils_1.Data.from(mac)\n            },\n            id: asUUID(uuid),\n            version: 3\n        };\n    }\n    async decrypt(keyfile, passphrase) {\n        const crypt = keyfile.crypto;\n        if (crypt.cipher !== CIPHER) {\n            throw new Error(`keyfile cypher must be \"${CIPHER}\"`);\n        }\n        if (crypt.kdf !== \"scrypt\") {\n            throw new Error(`keyfile kdf must be \"script\"`);\n        }\n        const kdfParams = crypt.kdfParams;\n        const salt = kdfParams.salt;\n        const mac = crypt.mac;\n        const ciphertext = crypt.ciphertext.toBuffer();\n        let derivedKey;\n        let localMac;\n        if (passphrase != null) {\n            try {\n                derivedKey = await scrypt(passphrase, salt.toBuffer(), kdfParams.dklen, { ...kdfParams, N: kdfParams.n });\n                localMac = keccak_1.default(\"keccak256\")\n                    .update(Buffer.concat([derivedKey.slice(16, 32), ciphertext]))\n                    .digest();\n            }\n            catch {\n                localMac = null;\n            }\n        }\n        if (!localMac || !mac.toBuffer().equals(localMac)) {\n            throw new Error(\"could not decrypt key with given password\");\n        }\n        const decipher = crypto_1.default.createDecipheriv(crypt.cipher, derivedKey.slice(0, 16), crypt.cipherparams.iv.toBuffer());\n        const plaintext = decipher.update(ciphertext);\n        return plaintext;\n    }\n    static createAccount(balance, privateKey, address) {\n        const account = new ethereum_utils_1.Account(address);\n        account.privateKey = privateKey;\n        account.balance = balance;\n        return account;\n    }\n    static createAccountFromPrivateKey(privateKey) {\n        const address = ethereum_address_1.Address.from(ethereumjs_util_1.privateToAddress(privateKey.toBuffer()));\n        const account = new ethereum_utils_1.Account(address);\n        account.privateKey = privateKey;\n        return account;\n    }\n    createRandomAccount() {\n        // create some seeded deterministic psuedo-randomness based on the chain's\n        // initial starting conditions\n        const seed = __classPrivateFieldGet(this, _randomBytes).call(this, 128);\n        const acct = hdkey_1.createAccountFromSeed(seed);\n        const address = uncompressedPublicKeyToAddress(acct.publicKey);\n        const privateKey = utils_1.Data.from(acct.privateKey);\n        return Wallet.createAccount(utils_1.RPCQUANTITY_ZERO, privateKey, address);\n    }\n    async unlockAccount(lowerAddress, passphrase, duration) {\n        const encryptedKeyFile = this.encryptedKeyFiles.get(lowerAddress);\n        if (encryptedKeyFile == null) {\n            return false;\n        }\n        const secretKey = await this.decrypt(encryptedKeyFile, passphrase);\n        const existingTimer = this.lockTimers.get(lowerAddress);\n        if (existingTimer) {\n            clearTimeout(existingTimer);\n        }\n        // a duration <= 0 will remain unlocked\n        const durationMs = (duration * 1000) | 0;\n        if (durationMs > 0) {\n            const timeout = setTimeout(__classPrivateFieldGet(this, _lockAccount), durationMs, lowerAddress);\n            utils_1.unref(timeout);\n            this.lockTimers.set(lowerAddress, timeout);\n        }\n        this.unlockedAccounts.set(lowerAddress, utils_1.Data.from(secretKey));\n        return true;\n    }\n    async unlockUnknownAccount(lowerAddress, duration) {\n        if (this.unlockedAccounts.has(lowerAddress)) {\n            // already unlocked, return `false` since we didn't do anything\n            return false;\n        }\n        // if we \"know\" about this account, it cannot be unlocked this way\n        if (this.knownAccounts.has(lowerAddress)) {\n            throw new Error(\"cannot unlock known/personal account\");\n        }\n        // a duration <= 0 will remain unlocked\n        const durationMs = (duration * 1000) | 0;\n        if (durationMs > 0) {\n            const timeout = setTimeout(__classPrivateFieldGet(this, _lockAccount), durationMs, lowerAddress);\n            utils_1.unref(timeout);\n            this.lockTimers.set(lowerAddress, timeout);\n        }\n        // otherwise, unlock it!\n        this.unlockedAccounts.set(lowerAddress, null);\n        return true;\n    }\n    lockAccount(lowerAddress) {\n        if (!this.unlockedAccounts.has(lowerAddress))\n            return false;\n        clearTimeout(this.lockTimers.get(lowerAddress));\n        return __classPrivateFieldGet(this, _lockAccount).call(this, lowerAddress);\n    }\n}\nexports.default = Wallet;\n_randomRng = new WeakMap(), _randomBytes = new WeakMap(), _initializeAccounts = new WeakMap(), _lockAccount = new WeakMap();\n//# sourceMappingURL=wallet.js.map","\"use strict\";\n/*!\n * @ganache/ethereum-options\n *\n * @author David Murdoch <david@trufflesuite.com> (https://davidmurdoch.com)\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChainOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst HARDFORKS = [\n    \"constantinople\",\n    \"byzantium\",\n    \"petersburg\",\n    \"istanbul\",\n    \"muirGlacier\",\n    \"berlin\",\n    \"london\"\n];\nexports.ChainOptions = {\n    allowUnlimitedContractSize: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Allows unlimited contract sizes while debugging. Setting this to `true` will cause ganache to behave differently than production environments.\",\n        default: () => false,\n        legacyName: \"allowUnlimitedContractSize\",\n        cliType: \"boolean\"\n    },\n    asyncRequestProcessing: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"When set to `false` only one request will be processed at a time.\",\n        default: () => true,\n        legacyName: \"asyncRequestProcessing\",\n        cliType: \"boolean\"\n    },\n    chainId: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The currently configured chain id.\",\n        default: () => 1337,\n        legacyName: \"chainId\",\n        cliType: \"number\"\n    },\n    networkId: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The id of the network returned by the RPC method `net_version`.\",\n        default: () => Date.now(),\n        defaultDescription: \"System time at process start or Network ID of forked blockchain if configured.\",\n        legacyName: \"network_id\",\n        cliAliases: [\"i\", \"networkId\"],\n        cliType: \"number\"\n    },\n    time: {\n        normalize: rawInput => {\n            if (typeof rawInput === \"string\") {\n                return new Date(rawInput);\n            }\n            else {\n                return rawInput;\n            }\n        },\n        cliDescription: \"Date that the first block should start.\",\n        legacyName: \"time\",\n        cliAliases: [\"t\", \"time\"],\n        cliType: \"number\"\n    },\n    hardfork: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Set the hardfork rules for the EVM.\",\n        default: () => \"london\",\n        legacyName: \"hardfork\",\n        cliAliases: [\"k\", \"hardfork\"],\n        cliType: \"string\",\n        cliChoices: HARDFORKS\n    },\n    vmErrorsOnRPCResponse: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Whether to report runtime errors from EVM code as RPC errors.\",\n        default: () => false,\n        legacyName: \"vmErrorsOnRPCResponse\",\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=chain-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nexports.DatabaseOptions = {\n    db: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specify an alternative database instance, like MemDOWN\",\n        disableInCLI: true,\n        legacyName: \"db\",\n        conflicts: [\"dbPath\"]\n    },\n    dbPath: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specify a path to a directory to save the chain database.\",\n        legacyName: \"db_path\",\n        cliAliases: [\"db\", \"db_path\"],\n        cliType: \"string\",\n        conflicts: [\"db\"]\n    }\n};\n//# sourceMappingURL=database-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForkOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst url_1 = require(\"url\");\nconst { version } = { \"version\": \"7.0.0-alpha.1\" };\n// we aren't going to treat block numbers as a bigint, so we don't want to\n// accept block numbers we can't add to\nconst MAX_BLOCK_NUMBER = Math.floor(Number.MAX_SAFE_INTEGER / 2);\nconst reColonSplit = /:\\s?(?:.+)/;\nfunction coerceHeaders(headers, input) {\n    // split *1* time on the first colon, this also ignores leading whitespace\n    // from the value per RFC7230\n    const [name, value] = input.split(reColonSplit);\n    headers.push({ name, value });\n    return headers;\n}\nconst ALLOWED_PROTOCOLS = [\"ws:\", \"wss:\", \"http:\", \"https:\"];\nconst arrayToOxfordList = (arr, conjunction = \"and\") => {\n    const last = arr.pop();\n    switch (arr.length) {\n        case 0:\n            return \"\";\n        case 1:\n            return last;\n        case 2:\n            return arr[0] + ` ${conjunction} ` + last;\n        default:\n            return arr.join(\", \") + `, ${conjunction} ` + last;\n    }\n};\nexports.ForkOptions = {\n    // url's definition _must_ come before blockNumber, username, and password\n    // as the defaults are processed in order, and they rely on the `fork.url`\n    url: {\n        normalize: rawInput => {\n            if (typeof rawInput !== \"string\")\n                return;\n            let url = new url_1.URL(rawInput);\n            const path = url.pathname + url.search;\n            const lastIndex = path.lastIndexOf(\"@\");\n            // pull the blockNumber out of the URL\n            if (lastIndex !== -1) {\n                // remove everything after the last @\n                url = new url_1.URL(path.substr(0, lastIndex), url);\n                const blockNumber = path.substr(lastIndex + 1);\n                if (blockNumber && blockNumber !== ethereum_utils_1.Tag.LATEST) {\n                    // don't use parseInt because strings like `\"123abc\"` parse\n                    // to `123`, and there is probably an error on the user's side we'd\n                    // want to uncover.\n                    const asNum = blockNumber - 0;\n                    // don't allow invalid, negative, or decimals\n                    if (isNaN(asNum) ||\n                        asNum < 0 ||\n                        (asNum | 0) !== asNum ||\n                        asNum > MAX_BLOCK_NUMBER) {\n                        console.warn(`Ignoring invalid block number in fork url: \"${blockNumber}\". Block number must be an integer from [0 - ${MAX_BLOCK_NUMBER}].`);\n                    }\n                    else {\n                        url._blockNumber = asNum;\n                    }\n                }\n                if (!ALLOWED_PROTOCOLS.includes(url.protocol)) {\n                    throw new Error(`Invalid protocol for fork url: ${url.protocol}. Supported protocols are: ${arrayToOxfordList(ALLOWED_PROTOCOLS)}.`);\n                }\n            }\n            return url;\n        },\n        cliDescription: `Fork from another currently running Ethereum client at a given block. Input should be the URL of the node, e.g. \\`\"http://localhost:1337\"\\`. You can optionally specify the block to fork from using an @ sign: \\`\"http://localhost:1337@8675309\"\\`.\n\nYou can specify Basic Authentication credentials in the URL as well. e.g., \\`\"wss://user:password@example.com/\"\\`. If you need to use an Infura Project Secret, you would use it like this: \\`\"wss://:{YOUR-PROJECT-SECRET}@mainnet.infura.com/...\"\\`\n\nAlternatively, you can use the \\`fork.username\\` and \\`fork.password\\` options.`,\n        legacyName: \"fork\",\n        cliAliases: [\"f\", \"fork\"]\n    },\n    provider: {\n        normalize: rawInput => {\n            // if rawInput is a string it will be handled by the `url` handler\n            if (typeof rawInput === \"string\")\n                return;\n            return rawInput;\n        },\n        cliDescription: \"Specify an EIP-1193 provider to use instead of a url.\",\n        disableInCLI: true,\n        legacyName: \"fork\"\n    },\n    blockNumber: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Block number the provider should fork from.\",\n        legacyName: \"fork_block_number\",\n        default: ({ url, provider }) => {\n            if (url) {\n                // use the url's _blockNumber, if present, otherwise use \"latest\"\n                if (url._blockNumber) {\n                    return url._blockNumber;\n                }\n                else {\n                    return ethereum_utils_1.Tag.LATEST;\n                }\n            }\n            else if (provider) {\n                return ethereum_utils_1.Tag.LATEST;\n            }\n            else {\n                return;\n            }\n        },\n        defaultDescription: `Latest block number`\n        //implies: [\"url\"]\n    },\n    preLatestConfirmations: {\n        normalize: helpers_1.normalize,\n        cliDescription: 'When the `fork.blockNumber` is set to \"latest\" (default), the number of blocks before the remote node\\'s \"latest\" block to fork from.',\n        default: () => 5,\n        defaultDescription: \"5\",\n        cliType: \"number\"\n    },\n    username: {\n        normalize: helpers_1.normalize,\n        cliDescription: `* Username to use for Basic Authentication. Does not require setting \\`fork.password\\`.\n    \nWhen combined with \\`fork.password\\`, is shorthand for \\`fork: { headers: { \"Authorization\": \"Basic {ENCODED-BASIC-HEADER}\" } }\\`\n\nIf the \\`fork.headers\\` option specifies an \"Authorization\" header, it will be be inserted _after_ this Basic token.`,\n        default: ({ url }) => {\n            // use the url's username, if present\n            if (url) {\n                if (url.username) {\n                    return url.username;\n                }\n            }\n        },\n        defaultDescription: \"\"\n        //implies: [\"url\"]\n    },\n    password: {\n        normalize: helpers_1.normalize,\n        cliDescription: `Password to use for Basic Authentication. Does not require setting \\`fork.username\\`.\n\nWhen combined with \\`fork.username\\`, is shorthand for \\`fork: { headers: { \"Authorization\": \"Basic {ENCODED-BASIC-HEADER}\" } }\\`\n\nIf the \\`fork.headers\\` option specifies an \"Authorization\" header, it will be be inserted _after_ this Basic token.`,\n        default: ({ url }) => {\n            // use the url's password, if present\n            if (url) {\n                if (url.password) {\n                    return url.password;\n                }\n            }\n        },\n        defaultDescription: \"\"\n        //implies: [\"url\"]\n    },\n    jwt: {\n        normalize: helpers_1.normalize,\n        cliDescription: `_Encoded_ JSON Web Token (JWT) used for authenticating to some servers.\n\nShorthand for \\`fork: { headers: { \"Authorization\": \"Bearer {YOUR-ENCODED-JWT}\" } }\\`\n\n If the \\`fork.headers\\` option specifies an \"Authorization\" header, it will be be inserted _after_ the JWT Bearer token.`\n        //implies: [\"url\"]\n    },\n    userAgent: {\n        normalize: helpers_1.normalize,\n        cliDescription: `The User-Agent header sent to the fork on each request.\n\nSent as Api-User-Agent when used in the browser.\n \nWill be overridden by a \\`\"User-Agent\"\\` defined in the \\`fork.headers\\` option, if provided.`,\n        default: () => {\n            return `Ganache/${version} (https://www.trufflesuite.com/ganache; ganache<at>trufflesuite.com)`;\n        }\n        // implies: [\"url\"]\n    },\n    origin: {\n        normalize: helpers_1.normalize,\n        cliDescription: `The Origin header sent to the fork on each request.\n\nIgnored in the browser.\n\nWill be overridden by an \\`\"Origin\"\\` value defined in the \\`fork.headers\\` option, if provided.`\n        //implies: [\"url\"]\n    },\n    headers: {\n        normalize: helpers_1.normalize,\n        cliDescription: `Headers to supply on each request to the forked provider.\n\nHeaders set here override headers set by other options, unless otherwise specified.\n\nDefaults to: \\`[\"User-Agent: Ganache/VERSION (https://www.trufflesuite.com/ganache; ganache<at>trufflesuite.com)\"]\\``,\n        cliType: \"array:string\",\n        implies: [\"url\"],\n        cliCoerce: rawInput => rawInput.reduce(coerceHeaders, [])\n    },\n    requestsPerSecond: {\n        normalize(rawValue) {\n            if (rawValue < 0) {\n                throw new Error(`fork.requestsPerSecond is invalid: \"${rawValue}\"; must be a positive number`);\n            }\n            return rawValue;\n        },\n        default: () => 0,\n        cliDescription: \"Restrict the number of requests per second sent to the fork provider. `0` means no limit is applied.\",\n        cliType: \"number\"\n        //implies: [\"url\"]\n    },\n    disableCache: {\n        normalize: helpers_1.normalize,\n        default: () => false,\n        cliDescription: \"Disables caching of all forking requests.\",\n        cliType: \"boolean\"\n    },\n    deleteCache: {\n        normalize: helpers_1.normalize,\n        default: () => false,\n        cliDescription: \"Deletes the persistent cache before starting.\",\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=fork-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalize = void 0;\nconst normalize = (rawInput) => rawInput;\nexports.normalize = normalize;\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthereumOptionsConfig = exports.EthereumDefaults = void 0;\nconst chain_options_1 = require(\"./chain-options\");\nconst database_options_1 = require(\"./database-options\");\nconst logging_options_1 = require(\"./logging-options\");\nconst miner_options_1 = require(\"./miner-options\");\nconst wallet_options_1 = require(\"./wallet-options\");\nconst fork_options_1 = require(\"./fork-options\");\nconst options_1 = require(\"@ganache/options\");\nexports.EthereumDefaults = {\n    chain: chain_options_1.ChainOptions,\n    database: database_options_1.DatabaseOptions,\n    logging: logging_options_1.LoggingOptions,\n    miner: miner_options_1.MinerOptions,\n    wallet: wallet_options_1.WalletOptions,\n    fork: fork_options_1.ForkOptions\n};\nexports.EthereumOptionsConfig = new options_1.OptionsConfig(exports.EthereumDefaults);\n__exportStar(require(\"./chain-options\"), exports);\n__exportStar(require(\"./database-options\"), exports);\n__exportStar(require(\"./helpers\"), exports);\n__exportStar(require(\"./logging-options\"), exports);\n__exportStar(require(\"./miner-options\"), exports);\n__exportStar(require(\"./wallet-options\"), exports);\n__exportStar(require(\"./fork-options\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggingOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst logger = { log: console.log };\nexports.LoggingOptions = {\n    debug: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Set to `true` to log EVM opcodes.\",\n        default: () => false,\n        legacyName: \"debug\",\n        cliType: \"boolean\"\n    },\n    logger: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"An object, like `console`, that implements a `log` function.\",\n        disableInCLI: true,\n        default: () => logger,\n        legacyName: \"logger\"\n    },\n    verbose: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Set to `true` to log all RPC requests and responses.\",\n        default: () => false,\n        legacyName: \"verbose\",\n        cliAliases: [\"v\", \"verbose\"],\n        cliType: \"boolean\"\n    },\n    quiet: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Set to `true` to disable logging.\",\n        default: () => false,\n        cliAliases: [\"q\", \"quiet\"],\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=logging-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinerOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\n/**\n * Attempts to convert strings that don't start with `0x` to a BigInt\n *\n * @param str a string that represents a bigint, number, or hex number\n */\nconst toBigIntOrString = (str) => {\n    if (str.startsWith(\"0x\")) {\n        return str;\n    }\n    else {\n        return BigInt(str);\n    }\n};\nexports.MinerOptions = {\n    blockTime: {\n        normalize: rawInput => {\n            if (rawInput < 0) {\n                throw new Error(\"miner.blockTime must be 0 or a positive number.\");\n            }\n            return rawInput;\n        },\n        cliDescription: 'Sets the `blockTime` in seconds for automatic mining. A blockTime of `0` enables \"instamine mode\", where new executable transactions will be mined instantly.',\n        default: () => 0,\n        legacyName: \"blockTime\",\n        cliAliases: [\"b\", \"blockTime\"],\n        cliType: \"number\"\n    },\n    defaultGasPrice: {\n        normalize: utils_1.Quantity.from,\n        cliDescription: \"Sets the default gas price in WEI for transactions if not otherwise specified.\",\n        default: () => utils_1.Quantity.from(2000000000),\n        legacyName: \"gasPrice\",\n        cliAliases: [\"g\", \"gasPrice\"],\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    blockGasLimit: {\n        normalize: utils_1.Quantity.from,\n        cliDescription: \"Sets the block gas limit in WEI.\",\n        default: () => utils_1.Quantity.from(12000000),\n        legacyName: \"gasLimit\",\n        cliAliases: [\"l\", \"gasLimit\"],\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    defaultTransactionGasLimit: {\n        normalize: rawType => rawType === \"estimate\" ? utils_1.RPCQUANTITY_EMPTY : utils_1.Quantity.from(rawType),\n        cliDescription: 'Sets the default transaction gas limit in WEI. Set to \"estimate\" to use an estimate (slows down transaction execution by 40%+).',\n        default: () => utils_1.Quantity.from(90000),\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    difficulty: {\n        normalize: utils_1.Quantity.from,\n        cliDescription: \"Sets the block difficulty.\",\n        default: () => utils_1.RPCQUANTITY_ONE,\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    callGasLimit: {\n        normalize: utils_1.Quantity.from,\n        cliDescription: \"Sets the transaction gas limit in WEI for `eth_call` and `eth_estimateGas` calls.\",\n        default: () => utils_1.Quantity.from(Number.MAX_SAFE_INTEGER),\n        legacyName: \"callGasLimit\",\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    legacyInstamine: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Enables legacy instamine mode, where transactions are fully mined before the transaction's hash is returned to the caller.\",\n        default: () => false,\n        legacyName: \"legacyInstamine\",\n        cliType: \"boolean\"\n    },\n    coinbase: {\n        normalize: rawType => {\n            return typeof rawType === \"number\" ? rawType : ethereum_address_1.Address.from(rawType);\n        },\n        cliDescription: \"Sets the address where mining rewards will go.\",\n        default: () => ethereum_address_1.Address.from(utils_1.ACCOUNT_ZERO)\n    },\n    extraData: {\n        normalize: (extra) => {\n            const bytes = utils_1.Data.from(extra);\n            if (bytes.toBuffer().length > 32) {\n                throw new Error(`extra exceeds max length. ${bytes.toBuffer().length} > 32`);\n            }\n            return bytes;\n        },\n        cliDescription: \"Set the extraData block header field a miner can include.\",\n        default: () => utils_1.DATA_EMPTY,\n        cliType: \"string\"\n    }\n};\n//# sourceMappingURL=miner-options.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst seedrandom_1 = __importDefault(require(\"seedrandom\"));\nconst bip39_1 = require(\"bip39\");\nconst options_1 = require(\"@ganache/options\");\nconst unseededRng = seedrandom_1.default();\n/**\n * WARNING: to maintain compatibility with ganache v2 this RNG only generates\n * numbers from 0-254 instead of 0-255! Hence the name, `notVeryRandomBytes`\n * @param length\n * @param rng\n */\nfunction notVeryRandomBytes(length, rng) {\n    const buf = Buffer.allocUnsafe(length);\n    for (let i = 0; i < length; i++) {\n        buf[i] = (rng() * 255) | 0;\n    }\n    return buf;\n}\nconst randomAlphaNumericString = (() => {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const alphabetLength = alphabet.length;\n    return (length, rng) => {\n        let text = \"\";\n        for (let i = 0; i < length; i++) {\n            text += alphabet[(rng() * alphabetLength) | 0];\n        }\n        return text;\n    };\n})();\nexports.WalletOptions = {\n    accounts: {\n        normalize: helpers_1.normalize,\n        cliDescription: `Account data in the form \\`<private_key>,<initial_balance>\\`, can be specified multiple times. Note that private keys are 64 characters long and must be entered as an 0x-prefixed hex string. Balance can either be input as an integer, or as a 0x-prefixed hex string with either form specifying the initial balance in wei.`,\n        legacyName: \"accounts\",\n        cliAliases: [\"account\"],\n        cliType: \"array:string\",\n        cliCoerce: rawInput => {\n            return rawInput.map(accountString => {\n                // split *1* time on the first comma\n                const [secretKey, balance] = accountString.split(/,(.+)/);\n                return {\n                    secretKey,\n                    balance: BigInt(balance)\n                };\n            });\n        },\n        conflicts: [\"totalAccounts\"]\n    },\n    totalAccounts: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Number of accounts to generate at startup.\",\n        default: config => (config.accounts == null ? 10 : 0),\n        legacyName: \"total_accounts\",\n        cliAliases: [\"a\", \"accounts\"],\n        cliType: \"number\",\n        conflicts: [\"accounts\"]\n    },\n    deterministic: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Use pre-defined, deterministic seed.\",\n        default: () => false,\n        cliAliases: [\"d\", \"deterministic\"],\n        cliType: \"boolean\",\n        conflicts: [\"mnemonic\", \"seed\"]\n    },\n    seed: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Seed to use to generate a mnemonic.\",\n        // The order of the options matter here! `wallet.deterministic`\n        // needs to be prior to `wallet.seed` for `config.deterministic`\n        // below to be set correctly\n        default: config => config.deterministic === true\n            ? options_1.DeterministicSeedPhrase\n            : randomAlphaNumericString(10, unseededRng),\n        defaultDescription: \"Random value, unless wallet.deterministic is specified\",\n        legacyName: \"seed\",\n        cliAliases: [\"s\", \"seed\"],\n        cliType: \"string\",\n        conflicts: [\"mnemonic\", \"deterministic\"]\n    },\n    mnemonic: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Use a specific HD wallet mnemonic to generate initial addresses.\",\n        // The order of the options matter here! `wallet.seed`\n        // needs to be prior to `wallet.mnemonic` for `config.seed`\n        // below to be set correctly\n        default: config => bip39_1.entropyToMnemonic(notVeryRandomBytes(16, seedrandom_1.default(config.seed))),\n        defaultDescription: \"Generated from wallet.seed\",\n        legacyName: \"mnemonic\",\n        cliAliases: [\"m\", \"mnemonic\"],\n        cliType: \"string\",\n        conflicts: [\"seed\", \"deterministic\"]\n    },\n    unlockedAccounts: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Array of addresses or address indexes specifying which accounts should be unlocked.\",\n        legacyName: \"unlocked_accounts\",\n        cliAliases: [\"u\", \"unlock\"],\n        cliType: \"array:string\"\n    },\n    secure: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Lock available accounts by default (good for third party transaction signing).\",\n        default: () => false,\n        legacyName: \"secure\",\n        cliAliases: [\"n\", \"secure\"],\n        cliType: \"boolean\"\n    },\n    accountKeysPath: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specifies a file to save accounts and private keys to, for testing.\",\n        legacyName: \"account_keys_path\",\n        cliAliases: [\"account_keys_path\", \"acctKeys\"],\n        cliType: \"string\"\n    },\n    defaultBalance: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The default account balance, specified in ether.\",\n        default: () => 1000,\n        legacyName: \"default_balance_ether\",\n        cliAliases: [\"e\", \"defaultBalanceEther\"],\n        cliType: \"number\"\n    },\n    hdPath: {\n        normalize: (path) => {\n            return path.split(\"/\");\n        },\n        cliDescription: \"The hierarchical deterministic path to use when generating accounts.\",\n        default: () => [\"m\", \"44'\", \"60'\", \"0'\", \"0\"],\n        legacyName: \"hd_path\",\n        cliType: \"string\"\n    }\n};\n//# sourceMappingURL=wallet-options.js.map","\"use strict\";\n/*!\n * @ganache/ethereum-transaction\n *\n * @author David Murdoch\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/eip2930-access-list-transaction\"), exports);\n__exportStar(require(\"./src/eip1559-fee-market-transaction\"), exports);\n__exportStar(require(\"./src/base-transaction\"), exports);\n__exportStar(require(\"./src/hardfork\"), exports);\n__exportStar(require(\"./src/legacy-transaction\"), exports);\n__exportStar(require(\"./src/params\"), exports);\n__exportStar(require(\"./src/raw\"), exports);\n__exportStar(require(\"./src/rpc-transaction\"), exports);\n__exportStar(require(\"./src/runtime-transaction\"), exports);\n__exportStar(require(\"./src/transaction-receipt\"), exports);\n__exportStar(require(\"./src/transaction-factory\"), exports);\n__exportStar(require(\"./src/transaction-types\"), exports);\n__exportStar(require(\"./src/vm-transaction\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessLists = void 0;\nconst tx_1 = require(\"@ethereumjs/tx\");\nconst utils_1 = require(\"@ganache/utils\");\nconst params_1 = require(\"./params\");\nclass AccessLists {\n    static getAccessListData(accessList) {\n        let AccessListJSON;\n        let bufferAccessList;\n        let slots = 0;\n        const accessListStorageKeyCost = params_1.Params.ACCESS_LIST_STORAGE_KEY_GAS;\n        const accessListAddressCost = params_1.Params.ACCESS_LIST_ADDRESS_GAS;\n        if (accessList && tx_1.isAccessList(accessList)) {\n            AccessListJSON = accessList;\n            const newAccessList = [];\n            for (let i = 0; i < accessList.length; i++) {\n                const item = accessList[i];\n                const addressBuffer = utils_1.Data.from(item.address, 32).toBuffer();\n                const storageItems = [];\n                const storageKeysLength = item.storageKeys.length;\n                slots += storageKeysLength;\n                for (let index = 0; index < storageKeysLength; index++) {\n                    storageItems.push(utils_1.Data.from(item.storageKeys[index]).toBuffer());\n                }\n                newAccessList.push([addressBuffer, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList ? accessList : [];\n            // build the JSON\n            const json = [];\n            for (let i = 0; i < bufferAccessList.length; i++) {\n                const data = bufferAccessList[i];\n                const address = utils_1.Data.from(data[0], 32).toString();\n                const storageKeys = [];\n                const storageKeysLength = data[1].length;\n                slots += storageKeysLength;\n                for (let item = 0; item < storageKeysLength; item++) {\n                    storageKeys.push(utils_1.Data.from(data[1][item], 32).toString());\n                }\n                const jsonItem = {\n                    address,\n                    storageKeys\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        const dataFee = BigInt(bufferAccessList.length * accessListAddressCost +\n            slots * accessListStorageKeyCost);\n        return {\n            AccessListJSON,\n            accessList: bufferAccessList,\n            dataFeeEIP2930: dataFee\n        };\n    }\n}\nexports.AccessLists = AccessLists;\n//# sourceMappingURL=access-lists.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTransaction = exports.calculateIntrinsicGas = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst params_1 = require(\"./params\");\nconst MAX_UINT64 = 1n << (64n - 1n);\n/**\n * Compute the 'intrinsic gas' for a message with the given data.\n * @param data - The transaction's data\n * @param hasToAddress - boolean,\n * @param common - The Common use to determine gas costs\n * @returns The absolute minimum amount of gas this transaction will consume,\n * or `-1` if the data in invalid (gas consumption would exceed `MAX_UINT64`\n * (`(2n ** 64n) - 1n`).\n */\nconst calculateIntrinsicGas = (data, hasToAddress, common) => {\n    const hardfork = common.hardfork();\n    // Set the starting gas for the raw transaction\n    let gas = params_1.Params.TRANSACTION_GAS;\n    // if it doesn't have a \"to\" address this is a contract creation and it costs\n    // `TRANSACTION_CREATION` more gas.\n    if (!hasToAddress)\n        gas += params_1.Params.TRANSACTION_CREATION;\n    if (data) {\n        const input = data.toBuffer();\n        // Bump the required gas by the amount of transactional data\n        const dataLength = input.byteLength;\n        if (dataLength > 0) {\n            const TRANSACTION_DATA_NON_ZERO_GAS = params_1.Params.TRANSACTION_DATA_NON_ZERO_GAS.get(hardfork);\n            const TRANSACTION_DATA_ZERO_GAS = params_1.Params.TRANSACTION_DATA_ZERO_GAS;\n            // Zero and non-zero bytes are priced differently\n            let nonZeroBytes = 0n;\n            for (const b of input) {\n                if (b !== 0) {\n                    nonZeroBytes++;\n                }\n            }\n            // Make sure we don't exceed uint64 for all data combinations.\n            // TODO: make sure these upper-bound checks are safe to remove, then\n            // remove if so.\n            // NOTE: This is an upper-bounds limit ported from geth that doesn't\n            // make sense for Ethereum, as exceeding the upper bound would require\n            // something like 200+ Petabytes of data.\n            // https://github.com/ethereum/go-ethereum/blob/cf856ea1ad96ac39ea477087822479b63417036a/core/state_transition.go#L106-L141\n            //\n            // explanation:\n            // `(MAX_UINT64 - gas) / TRANSACTION_DATA_NON_ZERO_GAS` is the maximum\n            // number of \"non-zero bytes\" geth can handle.\n            if ((MAX_UINT64 - gas) / TRANSACTION_DATA_NON_ZERO_GAS < nonZeroBytes) {\n                return -1n;\n            }\n            gas += nonZeroBytes * TRANSACTION_DATA_NON_ZERO_GAS;\n            const zeroBytes = BigInt(dataLength) - nonZeroBytes;\n            // explanation:\n            // `(MAX_UINT64 - gas) / TRANSACTION_DATA_ZERO_GAS` is the maximum number\n            // of \"zero bytes\" geth can handle after subtracting out the cost of\n            // the \"non-zero bytes\"\n            if ((MAX_UINT64 - gas) / TRANSACTION_DATA_ZERO_GAS < zeroBytes) {\n                return -1n;\n            }\n            gas += zeroBytes * TRANSACTION_DATA_ZERO_GAS;\n        }\n    }\n    return gas;\n};\nexports.calculateIntrinsicGas = calculateIntrinsicGas;\nclass BaseTransaction {\n    constructor(common, extra) {\n        this.common = common;\n        if (extra) {\n            this.setExtra(extra);\n        }\n    }\n    setExtra(raw) {\n        const [from, hash, blockHash, blockNumber, index, effectiveGasPrice] = raw;\n        this.from = ethereum_address_1.Address.from(from);\n        this.hash = utils_1.Data.from(hash, 32);\n        this.blockHash = utils_1.Data.from(blockHash, 32);\n        this.blockNumber = utils_1.Quantity.from(blockNumber);\n        this.index = utils_1.Quantity.from(index);\n        this.effectiveGasPrice = utils_1.Quantity.from(effectiveGasPrice);\n    }\n    calculateIntrinsicGas() {\n        const hasToAddress = this.to != null && !this.to.toBuffer().equals(utils_1.BUFFER_EMPTY);\n        return exports.calculateIntrinsicGas(this.data, hasToAddress, this.common);\n    }\n}\nexports.BaseTransaction = BaseTransaction;\n//# sourceMappingURL=base-transaction.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP1559FeeMarketTransaction = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst runtime_transaction_1 = require(\"./runtime-transaction\");\nconst access_lists_1 = require(\"./access-lists\");\nconst signing_1 = require(\"./signing\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nfunction ecsign(msgHash, privateKey) {\n    const object = { signature: new Uint8Array(64), recid: null };\n    const status = secp256k1_1.default.ecdsaSign(object, msgHash, privateKey);\n    if (status === 0) {\n        const buffer = object.signature.buffer;\n        const r = Buffer.from(buffer, 0, 32);\n        const s = Buffer.from(buffer, 32, 32);\n        return { r, s, v: object.recid };\n    }\n    else {\n        throw new Error(\"The nonce generation function failed, or the private key was invalid\");\n    }\n}\nconst CAPABILITIES = [2718, 2930, 1559];\nclass EIP1559FeeMarketTransaction extends runtime_transaction_1.RuntimeTransaction {\n    constructor(data, common, extra) {\n        super(data, common, extra);\n        this.type = utils_1.Quantity.from(\"0x2\");\n        if (Array.isArray(data)) {\n            this.chainId = utils_1.Quantity.from(data[0]);\n            this.nonce = utils_1.Quantity.from(data[1]);\n            this.maxPriorityFeePerGas = utils_1.Quantity.from(data[2]);\n            this.maxFeePerGas = utils_1.Quantity.from(data[3]);\n            this.gas = utils_1.Quantity.from(data[4]);\n            this.to = data[5].length == 0 ? utils_1.RPCQUANTITY_EMPTY : ethereum_address_1.Address.from(data[5]);\n            this.value = utils_1.Quantity.from(data[6]);\n            this.data = utils_1.Data.from(data[7]);\n            const accessListData = access_lists_1.AccessLists.getAccessListData(data[8]);\n            this.accessList = accessListData.accessList;\n            this.accessListJSON = accessListData.AccessListJSON;\n            this.v = utils_1.Quantity.from(data[9]);\n            this.r = utils_1.Quantity.from(data[10]);\n            this.s = utils_1.Quantity.from(data[11]);\n            this.raw = [this.type.toBuffer(), ...data];\n            if (!extra) {\n                // TODO(hack): we use the presence of `extra` to determine if this data\n                // come from the \"database\" or not. Transactions that come from the\n                // database must not be validated since they may come from a fork.\n                if (common.chainId() !== this.chainId.toNumber()) {\n                    throw new ethereum_utils_1.CodedError(`Invalid chain id (${this.chainId.toNumber()}) for chain with id ${common.chainId()}.`, utils_1.JsonRpcErrorCode.INVALID_INPUT);\n                }\n                const { from, serialized, hash, encodedData, encodedSignature } = this.computeIntrinsics(this.v, this.raw);\n                this.from = from;\n                this.serialized = serialized;\n                this.hash = hash;\n                this.encodedData = encodedData;\n                this.encodedSignature = encodedSignature;\n            }\n        }\n        else {\n            if (data.chainId) {\n                this.chainId = utils_1.Quantity.from(data.chainId);\n                if (this.common.chainId() !== this.chainId.toNumber()) {\n                    throw new ethereum_utils_1.CodedError(`Invalid chain id (${this.chainId.toNumber()}) for chain with id ${common.chainId()}.`, utils_1.JsonRpcErrorCode.INVALID_INPUT);\n                }\n            }\n            else {\n                this.chainId = utils_1.Quantity.from(common.chainIdBN().toArrayLike(Buffer));\n            }\n            this.maxPriorityFeePerGas = utils_1.Quantity.from(data.maxPriorityFeePerGas);\n            this.maxFeePerGas = utils_1.Quantity.from(data.maxFeePerGas);\n            const accessListData = access_lists_1.AccessLists.getAccessListData(data.accessList);\n            this.accessList = accessListData.accessList;\n            this.accessListJSON = accessListData.AccessListJSON;\n            this.validateAndSetSignature(data);\n        }\n    }\n    toJSON(_common) {\n        return {\n            type: this.type,\n            hash: this.hash,\n            chainId: this.chainId,\n            nonce: this.nonce,\n            blockHash: this.blockHash ? this.blockHash : null,\n            blockNumber: this.blockNumber ? this.blockNumber : null,\n            transactionIndex: this.index ? this.index : null,\n            from: this.from,\n            to: this.to.isNull() ? null : this.to,\n            value: this.value,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasPrice: this.effectiveGasPrice,\n            gas: this.gas,\n            input: this.data,\n            accessList: this.accessListJSON,\n            v: this.v,\n            r: this.r,\n            s: this.s\n        };\n    }\n    static fromTxData(data, common, extra) {\n        return new EIP1559FeeMarketTransaction(data, common, extra);\n    }\n    toVmTransaction() {\n        const sender = this.from.toBuffer();\n        const to = this.to.toBuffer();\n        const data = this.data.toBuffer();\n        return {\n            hash: () => utils_1.BUFFER_32_ZERO,\n            nonce: new ethereumjs_util_1.BN(this.nonce.toBuffer()),\n            maxPriorityFeePerGas: new ethereumjs_util_1.BN(this.maxPriorityFeePerGas.toBuffer()),\n            maxFeePerGas: new ethereumjs_util_1.BN(this.maxFeePerGas.toBuffer()),\n            gasLimit: new ethereumjs_util_1.BN(this.gas.toBuffer()),\n            to: to.length === 0\n                ? null\n                : { buf: to, equals: (a) => to.equals(a.buf) },\n            value: new ethereumjs_util_1.BN(this.value.toBuffer()),\n            data,\n            AccessListJSON: this.accessListJSON,\n            getSenderAddress: () => ({\n                buf: sender,\n                equals: (a) => sender.equals(a.buf)\n            }),\n            /**\n             * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n             */\n            getBaseFee: () => {\n                const fee = this.calculateIntrinsicGas();\n                return new ethereumjs_util_1.BN(utils_1.Quantity.from(fee).toBuffer());\n            },\n            getUpfrontCost: (baseFee = new ethereumjs_util_1.BN(0)) => {\n                const { gas, maxPriorityFeePerGas, maxFeePerGas, value } = this;\n                const maxPriorityFeePerGasBN = new ethereumjs_util_1.BN(maxPriorityFeePerGas.toBuffer());\n                const maxFeePerGasBN = new ethereumjs_util_1.BN(maxFeePerGas.toBuffer());\n                const gasLimitBN = new ethereumjs_util_1.BN(gas.toBuffer());\n                const valueBN = new ethereumjs_util_1.BN(value.toBuffer());\n                const inclusionFeePerGas = ethereumjs_util_1.BN.min(maxPriorityFeePerGasBN, maxFeePerGasBN.sub(baseFee));\n                const gasPrice = inclusionFeePerGas.add(baseFee);\n                return gasLimitBN.mul(gasPrice).add(valueBN);\n            },\n            supports: (capability) => {\n                return CAPABILITIES.includes(capability);\n            }\n        };\n    }\n    /**\n     * sign a transaction with a given private key, then compute and set the `hash`.\n     *\n     * @param privateKey - Must be 32 bytes in length\n     */\n    signAndHash(privateKey) {\n        if (this.v != null) {\n            throw new Error(\"Internal Error: RuntimeTransaction `sign` called but transaction has already been signed\");\n        }\n        const typeBuf = this.type.toBuffer();\n        const raw = this.toEthRawTransaction(utils_1.BUFFER_ZERO, utils_1.BUFFER_ZERO, utils_1.BUFFER_ZERO);\n        const data = rlp_1.encodeRange(raw, 1, 9);\n        const dataLength = data.length;\n        const msgHash = utils_1.keccak(Buffer.concat([typeBuf, rlp_1.digest([data.output], dataLength)]));\n        const sig = ecsign(msgHash, privateKey);\n        this.v = utils_1.Quantity.from(sig.v);\n        this.r = utils_1.Quantity.from(sig.r);\n        this.s = utils_1.Quantity.from(sig.s);\n        raw[10] = this.v.toBuffer();\n        raw[11] = this.r.toBuffer();\n        raw[12] = this.s.toBuffer();\n        this.raw = raw;\n        const encodedSignature = rlp_1.encodeRange(raw, 10, 3);\n        // raw data is type concatenated with the rest of the data rlp encoded\n        this.serialized = Buffer.concat([\n            typeBuf,\n            rlp_1.digest([data.output, encodedSignature.output], dataLength + encodedSignature.length)\n        ]);\n        this.hash = utils_1.Data.from(utils_1.keccak(this.serialized));\n        this.encodedData = data;\n        this.encodedSignature = encodedSignature;\n    }\n    toEthRawTransaction(v, r, s) {\n        return [\n            this.type.toBuffer(),\n            this.chainId.toBuffer(),\n            this.nonce.toBuffer(),\n            this.maxPriorityFeePerGas.toBuffer(),\n            this.maxFeePerGas.toBuffer(),\n            this.gas.toBuffer(),\n            this.to.toBuffer(),\n            this.value.toBuffer(),\n            this.data.toBuffer(),\n            this.accessList,\n            v,\n            r,\n            s\n        ];\n    }\n    computeIntrinsics(v, raw) {\n        return signing_1.computeIntrinsicsFeeMarketTx(v, raw);\n    }\n    updateEffectiveGasPrice(baseFeePerGas) {\n        const baseFeePerGasBigInt = baseFeePerGas.toBigInt();\n        const maxFeePerGas = this.maxFeePerGas.toBigInt();\n        const maxPriorityFeePerGas = this.maxPriorityFeePerGas.toBigInt();\n        const a = maxFeePerGas - baseFeePerGasBigInt;\n        const tip = a < maxPriorityFeePerGas ? a : maxPriorityFeePerGas;\n        this.effectiveGasPrice = utils_1.Quantity.from(baseFeePerGasBigInt + tip);\n    }\n}\nexports.EIP1559FeeMarketTransaction = EIP1559FeeMarketTransaction;\n//# sourceMappingURL=eip1559-fee-market-transaction.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP2930AccessListTransaction = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst runtime_transaction_1 = require(\"./runtime-transaction\");\nconst access_lists_1 = require(\"./access-lists\");\nconst signing_1 = require(\"./signing\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nfunction ecsign(msgHash, privateKey) {\n    const object = { signature: new Uint8Array(64), recid: null };\n    const status = secp256k1_1.default.ecdsaSign(object, msgHash, privateKey);\n    if (status === 0) {\n        const buffer = object.signature.buffer;\n        const r = Buffer.from(buffer, 0, 32);\n        const s = Buffer.from(buffer, 32, 32);\n        return { r, s, v: object.recid };\n    }\n    else {\n        throw new Error(\"The nonce generation function failed, or the private key was invalid\");\n    }\n}\nconst CAPABILITIES = [2718, 2930];\nclass EIP2930AccessListTransaction extends runtime_transaction_1.RuntimeTransaction {\n    constructor(data, common, extra) {\n        super(data, common, extra);\n        this.type = utils_1.Quantity.from(\"0x1\");\n        if (Array.isArray(data)) {\n            this.chainId = utils_1.Quantity.from(data[0]);\n            this.nonce = utils_1.Quantity.from(data[1]);\n            this.gasPrice = this.effectiveGasPrice = utils_1.Quantity.from(data[2]);\n            this.gas = utils_1.Quantity.from(data[3]);\n            this.to = data[4].length == 0 ? utils_1.RPCQUANTITY_EMPTY : ethereum_address_1.Address.from(data[4]);\n            this.value = utils_1.Quantity.from(data[5]);\n            this.data = utils_1.Data.from(data[6]);\n            const accessListData = access_lists_1.AccessLists.getAccessListData(data[7]);\n            this.accessList = accessListData.accessList;\n            this.accessListJSON = accessListData.AccessListJSON;\n            this.accessListDataFee = accessListData.dataFeeEIP2930;\n            this.v = utils_1.Quantity.from(data[8]);\n            this.r = utils_1.Quantity.from(data[9]);\n            this.s = utils_1.Quantity.from(data[10]);\n            this.raw = [this.type.toBuffer(), ...data];\n            if (!extra) {\n                // TODO(hack): we use the presence of `extra` to determine if this data\n                // come from the \"database\" or not. Transactions that come from the\n                // database must not be validated since they may come from a fork.\n                if (common.chainId() !== this.chainId.toNumber()) {\n                    throw new ethereum_utils_1.CodedError(`Invalid chain id (${this.chainId.toNumber()}) for chain with id ${common.chainId()}.`, utils_1.JsonRpcErrorCode.INVALID_INPUT);\n                }\n                const { from, serialized, hash, encodedData, encodedSignature } = this.computeIntrinsics(this.v, this.raw);\n                this.from = from;\n                this.serialized = serialized;\n                this.hash = hash;\n                this.encodedData = encodedData;\n                this.encodedSignature = encodedSignature;\n            }\n        }\n        else {\n            if (data.chainId) {\n                this.chainId = utils_1.Quantity.from(data.chainId);\n                if (this.common.chainId() !== this.chainId.toNumber()) {\n                    throw new ethereum_utils_1.CodedError(`Invalid chain id (${this.chainId.toNumber()}) for chain with id ${common.chainId()}.`, utils_1.JsonRpcErrorCode.INVALID_INPUT);\n                }\n            }\n            else {\n                this.chainId = utils_1.Quantity.from(common.chainIdBN().toArrayLike(Buffer));\n            }\n            this.gasPrice = this.effectiveGasPrice = utils_1.Quantity.from(data.gasPrice);\n            const accessListData = access_lists_1.AccessLists.getAccessListData(data.accessList);\n            this.accessList = accessListData.accessList;\n            this.accessListJSON = accessListData.AccessListJSON;\n            this.accessListDataFee = accessListData.dataFeeEIP2930;\n            this.validateAndSetSignature(data);\n        }\n    }\n    toJSON(_common) {\n        return {\n            hash: this.hash,\n            type: this.type,\n            chainId: this.chainId,\n            nonce: this.nonce,\n            blockHash: this.blockHash ? this.blockHash : null,\n            blockNumber: this.blockNumber ? this.blockNumber : null,\n            transactionIndex: this.index ? this.index : null,\n            from: this.from,\n            to: this.to.isNull() ? null : this.to,\n            value: this.value,\n            gas: this.gas,\n            gasPrice: this.gasPrice,\n            input: this.data,\n            accessList: this.accessListJSON,\n            v: this.v,\n            r: this.r,\n            s: this.s\n        };\n    }\n    static fromTxData(data, common, extra) {\n        return new EIP2930AccessListTransaction(data, common, extra);\n    }\n    toVmTransaction() {\n        const sender = this.from.toBuffer();\n        const to = this.to.toBuffer();\n        const data = this.data.toBuffer();\n        return {\n            hash: () => utils_1.BUFFER_32_ZERO,\n            nonce: new ethereumjs_util_1.BN(this.nonce.toBuffer()),\n            gasPrice: new ethereumjs_util_1.BN(this.gasPrice.toBuffer()),\n            gasLimit: new ethereumjs_util_1.BN(this.gas.toBuffer()),\n            to: to.length === 0\n                ? null\n                : { buf: to, equals: (a) => to.equals(a.buf) },\n            value: new ethereumjs_util_1.BN(this.value.toBuffer()),\n            data,\n            AccessListJSON: this.accessListJSON,\n            getSenderAddress: () => ({\n                buf: sender,\n                equals: (a) => sender.equals(a.buf)\n            }),\n            /**\n             * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n             */\n            getBaseFee: () => {\n                const fee = this.calculateIntrinsicGas();\n                return new ethereumjs_util_1.BN(utils_1.Quantity.from(fee + this.accessListDataFee).toBuffer());\n            },\n            getUpfrontCost: () => {\n                const { gas, gasPrice, value } = this;\n                try {\n                    const c = gas.toBigInt() * gasPrice.toBigInt() + value.toBigInt();\n                    return new ethereumjs_util_1.BN(utils_1.Quantity.from(c).toBuffer());\n                }\n                catch (e) {\n                    throw e;\n                }\n            },\n            supports: (capability) => {\n                return CAPABILITIES.includes(capability);\n            }\n        };\n    }\n    /**\n     * sign a transaction with a given private key, then compute and set the `hash`.\n     *\n     * @param privateKey - Must be 32 bytes in length\n     */\n    signAndHash(privateKey) {\n        if (this.v != null) {\n            throw new Error(\"Internal Error: RuntimeTransaction `sign` called but transaction has already been signed\");\n        }\n        const typeBuf = this.type.toBuffer();\n        const raw = this.toEthRawTransaction(utils_1.BUFFER_ZERO, utils_1.BUFFER_ZERO, utils_1.BUFFER_ZERO);\n        const data = rlp_1.encodeRange(raw, 1, 8);\n        const dataLength = data.length;\n        const msgHash = utils_1.keccak(Buffer.concat([typeBuf, rlp_1.digest([data.output], dataLength)]));\n        const sig = ecsign(msgHash, privateKey);\n        this.v = utils_1.Quantity.from(sig.v);\n        this.r = utils_1.Quantity.from(sig.r);\n        this.s = utils_1.Quantity.from(sig.s);\n        raw[9] = this.v.toBuffer();\n        raw[10] = this.r.toBuffer();\n        raw[11] = this.s.toBuffer();\n        this.raw = raw;\n        const encodedSignature = rlp_1.encodeRange(raw, 9, 3);\n        // raw data is type concatenated with the rest of the data rlp encoded\n        this.serialized = Buffer.concat([\n            typeBuf,\n            rlp_1.digest([data.output, encodedSignature.output], dataLength + encodedSignature.length)\n        ]);\n        this.hash = utils_1.Data.from(utils_1.keccak(this.serialized));\n        this.encodedData = data;\n        this.encodedSignature = encodedSignature;\n    }\n    toEthRawTransaction(v, r, s) {\n        return [\n            this.type.toBuffer(),\n            this.chainId.toBuffer(),\n            this.nonce.toBuffer(),\n            this.gasPrice.toBuffer(),\n            this.gas.toBuffer(),\n            this.to.toBuffer(),\n            this.value.toBuffer(),\n            this.data.toBuffer(),\n            this.accessList,\n            v,\n            r,\n            s\n        ];\n    }\n    computeIntrinsics(v, raw) {\n        return signing_1.computeIntrinsicsAccessListTx(v, raw);\n    }\n    updateEffectiveGasPrice() { }\n}\nexports.EIP2930AccessListTransaction = EIP2930AccessListTransaction;\n//# sourceMappingURL=eip2930-access-list-transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=hardfork.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LegacyTransaction = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereumjs_util_2 = require(\"ethereumjs-util\");\nconst runtime_transaction_1 = require(\"./runtime-transaction\");\nconst signing_1 = require(\"./signing\");\nclass LegacyTransaction extends runtime_transaction_1.RuntimeTransaction {\n    constructor(data, common, extra) {\n        super(data, common, extra);\n        this.type = utils_1.Quantity.from(\"0x0\");\n        if (Array.isArray(data)) {\n            this.nonce = utils_1.Quantity.from(data[0]);\n            this.gasPrice = this.effectiveGasPrice = utils_1.Quantity.from(data[1]);\n            this.gas = utils_1.Quantity.from(data[2]);\n            this.to = data[3].length == 0 ? utils_1.RPCQUANTITY_EMPTY : ethereum_address_1.Address.from(data[3]);\n            this.value = utils_1.Quantity.from(data[4]);\n            this.data = utils_1.Data.from(data[5]);\n            this.v = utils_1.Quantity.from(data[6]);\n            this.r = utils_1.Quantity.from(data[7]);\n            this.s = utils_1.Quantity.from(data[8]);\n            this.raw = data;\n            if (!extra) {\n                // TODO(hack): Transactions that come from the database must not be\n                // validated since they may come from a fork.\n                const { from, serialized, hash, encodedData, encodedSignature } = this.computeIntrinsics(this.v, this.raw, this.common.chainId());\n                this.from = from;\n                this.serialized = serialized;\n                this.hash = hash;\n                this.encodedData = encodedData;\n                this.encodedSignature = encodedSignature;\n            }\n        }\n        else {\n            this.gasPrice = this.effectiveGasPrice = utils_1.Quantity.from(data.gasPrice);\n            this.validateAndSetSignature(data);\n        }\n    }\n    toJSON(common) {\n        const json = {\n            hash: this.hash,\n            nonce: this.nonce,\n            blockHash: this.blockHash ? this.blockHash : null,\n            blockNumber: this.blockNumber ? this.blockNumber : null,\n            transactionIndex: this.index ? this.index : null,\n            from: this.from,\n            to: this.to.isNull() ? null : this.to,\n            value: this.value,\n            gas: this.gas,\n            gasPrice: this.gasPrice,\n            input: this.data,\n            v: this.v,\n            r: this.r,\n            s: this.s\n        };\n        if ((this.common || common).isActivatedEIP(2718)) {\n            json.type = this.type;\n        }\n        return json;\n    }\n    static fromTxData(data, common, extra) {\n        return new LegacyTransaction(data, common, extra);\n    }\n    static fromEIP2930AccessListTransaction(data, common) {\n        if (Array.isArray(data)) {\n            // remove 1st item, chainId, and 7th item, accessList\n            return new LegacyTransaction(data.slice(1, 7).concat(data.slice(8)), common);\n        }\n        return new LegacyTransaction(data, common);\n    }\n    toVmTransaction() {\n        const sender = this.from.toBuffer();\n        const to = this.to.toBuffer();\n        const data = this.data.toBuffer();\n        return {\n            hash: () => utils_1.BUFFER_32_ZERO,\n            nonce: new ethereumjs_util_2.BN(this.nonce.toBuffer()),\n            gasPrice: new ethereumjs_util_2.BN(this.gasPrice.toBuffer()),\n            gasLimit: new ethereumjs_util_2.BN(this.gas.toBuffer()),\n            to: to.length === 0\n                ? null\n                : { buf: to, equals: (a) => to.equals(a.buf) },\n            value: new ethereumjs_util_2.BN(this.value.toBuffer()),\n            data,\n            getSenderAddress: () => ({\n                buf: sender,\n                equals: (a) => sender.equals(a.buf)\n            }),\n            /**\n             * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n             */\n            getBaseFee: () => {\n                const fee = this.calculateIntrinsicGas();\n                return new ethereumjs_util_2.BN(utils_1.Quantity.from(fee).toBuffer());\n            },\n            getUpfrontCost: () => {\n                const { gas, gasPrice, value } = this;\n                try {\n                    const c = gas.toBigInt() * gasPrice.toBigInt() + value.toBigInt();\n                    return new ethereumjs_util_2.BN(utils_1.Quantity.from(c).toBuffer());\n                }\n                catch (e) {\n                    throw e;\n                }\n            },\n            supports: (capability) => {\n                return false;\n            }\n        };\n    }\n    /**\n     * sign a transaction with a given private key, then compute and set the `hash`.\n     *\n     * @param privateKey - Must be 32 bytes in length\n     */\n    signAndHash(privateKey) {\n        if (this.v != null) {\n            throw new Error(\"Internal Error: RuntimeTransaction `sign` called but transaction has already been signed\");\n        }\n        const chainId = this.common.chainId();\n        const raw = this.toEthRawTransaction(utils_1.Quantity.from(chainId).toBuffer(), utils_1.BUFFER_EMPTY, utils_1.BUFFER_EMPTY);\n        const data = rlp_1.encodeRange(raw, 0, 6);\n        const dataLength = data.length;\n        const ending = rlp_1.encodeRange(raw, 6, 3);\n        const msgHash = utils_1.keccak(rlp_1.digest([data.output, ending.output], dataLength + ending.length));\n        const sig = ethereumjs_util_1.ecsign(msgHash, privateKey, chainId);\n        this.v = utils_1.Quantity.from(sig.v);\n        this.r = utils_1.Quantity.from(sig.r);\n        this.s = utils_1.Quantity.from(sig.s);\n        raw[6] = this.v.toBuffer();\n        raw[7] = this.r.toBuffer();\n        raw[8] = this.s.toBuffer();\n        this.raw = raw;\n        const encodedSignature = rlp_1.encodeRange(raw, 6, 3);\n        this.serialized = rlp_1.digest([data.output, encodedSignature.output], dataLength + encodedSignature.length);\n        this.hash = utils_1.Data.from(utils_1.keccak(this.serialized));\n        this.encodedData = data;\n        this.encodedSignature = encodedSignature;\n    }\n    toEthRawTransaction(v, r, s) {\n        return [\n            this.nonce.toBuffer(),\n            this.gasPrice.toBuffer(),\n            this.gas.toBuffer(),\n            this.to.toBuffer(),\n            this.value.toBuffer(),\n            this.data.toBuffer(),\n            v,\n            r,\n            s\n        ];\n    }\n    computeIntrinsics(v, raw, chainId) {\n        return signing_1.computeIntrinsicsLegacyTx(v, raw, chainId);\n    }\n    updateEffectiveGasPrice() { }\n}\nexports.LegacyTransaction = LegacyTransaction;\n//# sourceMappingURL=legacy-transaction.js.map","\"use strict\";\n// NOTE these params may need to be changed at each hardfork\n// they can be tracked here: https://github.com/ethereumjs/ethereumjs-vm/blob/master/packages/common/src/hardforks/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Params = void 0;\nexports.Params = {\n    /**\n     *  Per transaction not creating a contract. NOTE: Not payable on data of calls between transactions.\n     */\n    TRANSACTION_GAS: 21000n,\n    /**\n     * Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions.\n     */\n    TRANSACTION_DATA_NON_ZERO_GAS: new Map([\n        [\"constantinople\", 68n],\n        [\"byzantium\", 68n],\n        [\"petersburg\", 68n],\n        [\"istanbul\", 16n],\n        [\"muirGlacier\", 16n],\n        [\"berlin\", 16n],\n        [\"london\", 16n]\n    ]),\n    /**\n     * Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions.\n     */\n    TRANSACTION_DATA_ZERO_GAS: 4n,\n    /**\n     * Fee for creation a transaction\n     */\n    TRANSACTION_CREATION: 32000n,\n    /* ... */\n    /**\n     * Gas cost per address in an EIP-2930 Access List transaction\n     */\n    ACCESS_LIST_ADDRESS_GAS: 2400,\n    /**\n     * Gas cost per storage key in an EIP-2930 Access List transaction\n     */\n    ACCESS_LIST_STORAGE_KEY_GAS: 1900\n};\n//# sourceMappingURL=params.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=raw.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=rpc-transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RuntimeTransaction = exports.hasPartialSignature = exports.toValidLengthAddress = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst base_transaction_1 = require(\"./base-transaction\");\nconst transaction_receipt_1 = require(\"./transaction-receipt\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst toValidLengthAddress = (address, fieldName) => {\n    const buffer = utils_1.Data.from(address).toBuffer();\n    if (buffer.byteLength !== ethereum_address_1.Address.ByteLength) {\n        throw new Error(`The field ${fieldName} must have byte length of ${ethereum_address_1.Address.ByteLength}`);\n    }\n    return ethereum_address_1.Address.from(buffer);\n};\nexports.toValidLengthAddress = toValidLengthAddress;\nconst hasPartialSignature = (data) => {\n    return data[\"v\"] != null || data[\"r\"] != null || data[\"s\"] != null;\n};\nexports.hasPartialSignature = hasPartialSignature;\nconst ONE_BUFFER = utils_1.RPCQUANTITY_ONE.toBuffer();\n/**\n * A RuntimeTransaction can be changed; its hash is not finalized and it is not\n * yet part of a block.\n */\nclass RuntimeTransaction extends base_transaction_1.BaseTransaction {\n    constructor(data, common, extra) {\n        super(common, extra);\n        /**\n         * used by the miner to mark if this transaction is eligible for reordering or\n         * removal\n         */\n        this.locked = false;\n        this.validateAndSetSignature = (data) => {\n            // If we have v, r, or s validate and use them\n            if (exports.hasPartialSignature(data)) {\n                if (data.v == null || data.r == null || data.s == null) {\n                    throw new Error(\"Transaction signature is incomplete; v, r, and s are required.\");\n                }\n                // if we have a signature the `nonce` field is required\n                if (data.nonce == null) {\n                    throw new Error(\"Signed transaction is incomplete; nonce is required.\");\n                }\n                this.v = utils_1.Quantity.from(data.v, true);\n                this.r = utils_1.Quantity.from(data.r, true);\n                this.s = utils_1.Quantity.from(data.s, true);\n                // compute the `hash` and the `from` address\n                const raw = this.toEthRawTransaction(this.v.toBuffer(), this.r.toBuffer(), this.s.toBuffer());\n                this.raw = raw;\n                if (!this.from) {\n                    const { from, serialized, hash, encodedData, encodedSignature } = this.computeIntrinsics(this.v, raw, this.common.chainId());\n                    // if the user specified a `from` address in addition to the  `v`, `r`,\n                    //  and `s` values, make sure the `from` address matches\n                    if (data.from !== null) {\n                        const userFrom = exports.toValidLengthAddress(data.from, \"from\");\n                        if (!from.toBuffer().equals(userFrom.toBuffer())) {\n                            throw new Error(\"Transaction is signed and contains a `from` field, but the signature doesn't match.\");\n                        }\n                    }\n                    this.from = from;\n                    this.serialized = serialized;\n                    this.hash = hash;\n                    this.encodedData = encodedData;\n                    this.encodedSignature = encodedSignature;\n                }\n            }\n            else if (data.from != null) {\n                // we don't have a signature yet, so we just need to record the `from`\n                // address for now. The TransactionPool will fill in the `hash` and\n                // `raw` fields during signing\n                this.from = exports.toValidLengthAddress(data.from, \"from\");\n            }\n        };\n        let finalizer;\n        this.finalized = new Promise(resolve => {\n            finalizer = (...args) => process.nextTick(resolve, ...args);\n        });\n        this.finalizer = finalizer;\n        if (!Array.isArray(data)) {\n            // handle JSON\n            this.nonce = utils_1.Quantity.from(data.nonce, true);\n            this.gas = utils_1.Quantity.from(data.gas == null ? data.gasLimit : data.gas);\n            this.to =\n                data.to == null\n                    ? utils_1.RPCQUANTITY_EMPTY\n                    : exports.toValidLengthAddress(data.to, \"to\");\n            this.value = utils_1.Quantity.from(data.value);\n            this.data = utils_1.Data.from(data.data == null ? data.input : data.data);\n        }\n    }\n    serializeForDb(blockHash, blockNumber, transactionIndex) {\n        // todo(perf):make this work with encodeRange and digest\n        const txAndExtraData = [\n            this.raw,\n            [\n                this.from.toBuffer(),\n                this.hash.toBuffer(),\n                blockHash.toBuffer(),\n                blockNumber.toBuffer(),\n                transactionIndex.toBuffer(),\n                this.effectiveGasPrice.toBuffer()\n            ]\n        ];\n        return rlp_1.encode(txAndExtraData);\n    }\n    /**\n     * Initializes the receipt and logs\n     * @param result\n     * @returns RLP encoded data for use in a transaction trie\n     */\n    fillFromResult(result, cumulativeGasUsed) {\n        const vmResult = result.execResult;\n        const execException = vmResult.exceptionError;\n        let status;\n        if (execException) {\n            status = utils_1.BUFFER_ZERO;\n            this.execException = new ethereum_utils_1.RuntimeError(this.hash, result, ethereum_utils_1.RETURN_TYPES.TRANSACTION_HASH);\n        }\n        else {\n            status = ONE_BUFFER;\n        }\n        const receipt = (this.receipt = transaction_receipt_1.TransactionReceipt.fromValues(status, utils_1.Quantity.from(cumulativeGasUsed).toBuffer(), result.bloom.bitvector, (this.logs = vmResult.logs || []), result.gasUsed.toArrayLike(Buffer), result.createdAddress ? result.createdAddress.buf : null, this.type));\n        return receipt.serialize(false);\n    }\n    getReceipt() {\n        return this.receipt;\n    }\n    getLogs() {\n        return this.logs;\n    }\n    /**\n     * Returns a Promise that is resolved with the confirmation status and, if\n     * appropriate, an error property.\n     *\n     * Note: it is possible to be confirmed AND have an error\n     *\n     * @param event \"finalized\"\n     */\n    once(_event) {\n        return this.finalized;\n    }\n    /**\n     * Mark this transaction as finalized, notifying all past and future\n     * \"finalized\" event subscribers.\n     *\n     * Note:\n     *\n     * @param status\n     * @param error\n     */\n    finalize(status, error = null) {\n        // resolves the `#finalized` promise\n        this.finalizer({ status, error });\n    }\n}\nexports.RuntimeTransaction = RuntimeTransaction;\n//# sourceMappingURL=runtime-transaction.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeIntrinsicsFeeMarketTx = exports.computeIntrinsicsAccessListTx = exports.computeIntrinsicsLegacyTx = exports.computeFromAddress = exports.publicKeyConvert = exports.ecdsaRecover = exports.isValidSigRecovery = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst intToBuffer = (value) => value === 0 ? utils_1.BUFFER_EMPTY : utils_1.uintToBuffer(value);\n/**\n * Copies `length` bytes from `source` to the `target`, filling remaining\n * bytes beyond `length - source.length` with `0`. Fills to the left.\n *\n * ```typescript\n * const source = Buffer.from([1, 2, 3]);\n * const target = Buffer.from([9, 9, 9, 9, 9, 9]);\n * copyOrFill(source, target, 1, 4);\n * // target.equals(Buffer.from([9, 0, 1, 2, 3, 9]));\n * //                               ^  ^  ^  ^\n * ```\n *\n * @param source A Buffer to copy from.\n * @param target A Buffer to copy into.\n * @param targetStart The offset within `target` at which to begin writing.\n * @param length The amount of bytes to copy or fill into the `target`.\n */\nfunction copyOrFill(source, target, targetStart, length) {\n    if (source.byteLength > length)\n        throw new Error(\"Invalid signature\");\n    // first, copy zeroes\n    const numZeroes = length - source.byteLength;\n    const endZeroes = targetStart + numZeroes;\n    let i = targetStart;\n    for (; i < endZeroes; i++) {\n        target[i] = 0;\n    }\n    // then copy the source into the target:\n    let end = targetStart + length;\n    const sourceOffset = targetStart + numZeroes;\n    for (; i < end; i++) {\n        target[i] = source[i - sourceOffset];\n    }\n}\nconst isValidSigRecovery = (recovery) => {\n    return recovery === 1 || recovery === 0;\n};\nexports.isValidSigRecovery = isValidSigRecovery;\n/**\n *\n * @param sharedBuffer A Buffer, where bytes 0 - 97 are to be used by this function\n * @param r\n * @param s\n * @param msgHash\n * @param recovery\n */\nconst ecdsaRecover = (partialRlp, sharedBuffer, v, chainId, rBuf, sBuf) => {\n    let data;\n    let recid;\n    const eip155V = chainId * 2 + 35;\n    const isEip155 = v === eip155V || v === eip155V + 1;\n    if (isEip155) {\n        const chainBuf = intToBuffer(chainId);\n        const extras = [chainBuf, utils_1.BUFFER_EMPTY, utils_1.BUFFER_EMPTY];\n        const epilogue = rlp_1.encodeRange(extras, 0, 3);\n        data = rlp_1.digest([partialRlp.output, epilogue.output], partialRlp.length + epilogue.length);\n        recid = v - eip155V;\n    }\n    else {\n        data = rlp_1.digest([partialRlp.output], partialRlp.length);\n        recid = v - 27;\n    }\n    return _ecdsaRecover(data, sharedBuffer, rBuf, sBuf, recid);\n};\nexports.ecdsaRecover = ecdsaRecover;\nfunction _ecdsaRecover(data, sharedBuffer, rBuf, sBuf, recid) {\n    if (!exports.isValidSigRecovery(recid)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const message = utils_1.keccak(data);\n    const signature = sharedBuffer.slice(0, 64);\n    copyOrFill(rBuf, signature, 0, 32);\n    copyOrFill(sBuf, signature, 32, 32);\n    const output = sharedBuffer.slice(0, 33);\n    const success = secp256k1_1.default.ecdsaRecover(output, signature, recid, message);\n    if (success !== 0) {\n        throw new Error(\"Invalid Signature\");\n    }\n    return output;\n}\n/**\n *\n * @param sharedBuffer A Buffer, bytes 0 - 65 will be overwritten\n * @param senderPubKey\n */\nconst publicKeyConvert = (sharedBuffer, senderPubKey) => {\n    const publicKey = sharedBuffer.slice(0, 65);\n    const result = secp256k1_1.default.publicKeyConvert(publicKey, senderPubKey);\n    if (result !== 0) {\n        throw new Error(\"Invalid Signature\");\n    }\n    return publicKey;\n};\nexports.publicKeyConvert = publicKeyConvert;\n/**\n * A Buffer that can be reused by `computeFromAddress`.\n */\nconst SHARED_BUFFER = Buffer.allocUnsafe(65);\nconst computeFromAddress = (partialRlp, v, rBuf, sBuf, chainId) => {\n    const senderPubKey = exports.ecdsaRecover(partialRlp, SHARED_BUFFER, v, chainId, rBuf, sBuf);\n    const publicKey = exports.publicKeyConvert(SHARED_BUFFER, senderPubKey);\n    return ethereum_address_1.Address.from(utils_1.keccak(publicKey.slice(1)).slice(-20));\n};\nexports.computeFromAddress = computeFromAddress;\nconst computeIntrinsicsLegacyTx = (v, raw, chainId) => {\n    const encodedData = rlp_1.encodeRange(raw, 0, 6);\n    const encodedSignature = rlp_1.encodeRange(raw, 6, 3);\n    const serialized = rlp_1.digest([encodedData.output, encodedSignature.output], encodedData.length + encodedSignature.length);\n    return {\n        from: exports.computeFromAddress(encodedData, v.toNumber(), raw[7], raw[8], chainId),\n        hash: utils_1.Data.from(utils_1.keccak(serialized), 32),\n        serialized,\n        encodedData,\n        encodedSignature\n    };\n};\nexports.computeIntrinsicsLegacyTx = computeIntrinsicsLegacyTx;\nconst computeIntrinsicsAccessListTx = (v, raw) => {\n    const typeBuf = raw[0];\n    const encodedData = rlp_1.encodeRange(raw, 1, 8);\n    const encodedSignature = rlp_1.encodeRange(raw, 9, 3);\n    const serialized = Buffer.concat([\n        typeBuf,\n        rlp_1.digest([encodedData.output, encodedSignature.output], encodedData.length + encodedSignature.length)\n    ]);\n    const data = Buffer.concat([\n        typeBuf,\n        rlp_1.digest([encodedData.output], encodedData.length)\n    ]);\n    const senderPubKey = _ecdsaRecover(data, SHARED_BUFFER, raw[10], raw[11], v.toNumber());\n    const publicKey = exports.publicKeyConvert(SHARED_BUFFER, senderPubKey);\n    const from = ethereum_address_1.Address.from(utils_1.keccak(publicKey.slice(1)).slice(-20));\n    return {\n        from: from,\n        hash: utils_1.Data.from(utils_1.keccak(serialized), 32),\n        serialized,\n        encodedData,\n        encodedSignature\n    };\n};\nexports.computeIntrinsicsAccessListTx = computeIntrinsicsAccessListTx;\nconst computeIntrinsicsFeeMarketTx = (v, raw) => {\n    const typeBuf = raw[0];\n    const encodedData = rlp_1.encodeRange(raw, 1, 9);\n    const encodedSignature = rlp_1.encodeRange(raw, 10, 3);\n    const serialized = Buffer.concat([\n        typeBuf,\n        rlp_1.digest([encodedData.output, encodedSignature.output], encodedData.length + encodedSignature.length)\n    ]);\n    const data = Buffer.concat([\n        typeBuf,\n        rlp_1.digest([encodedData.output], encodedData.length)\n    ]);\n    const senderPubKey = _ecdsaRecover(data, SHARED_BUFFER, raw[11], raw[12], v.toNumber());\n    const publicKey = exports.publicKeyConvert(SHARED_BUFFER, senderPubKey);\n    const from = ethereum_address_1.Address.from(utils_1.keccak(publicKey.slice(1)).slice(-20));\n    return {\n        from: from,\n        hash: utils_1.Data.from(utils_1.keccak(serialized), 32),\n        serialized,\n        encodedData,\n        encodedSignature\n    };\n};\nexports.computeIntrinsicsFeeMarketTx = computeIntrinsicsFeeMarketTx;\n//# sourceMappingURL=signing.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = exports.TransactionType = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst legacy_transaction_1 = require(\"./legacy-transaction\");\nconst eip2930_access_list_transaction_1 = require(\"./eip2930-access-list-transaction\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst eip1559_fee_market_transaction_1 = require(\"./eip1559-fee-market-transaction\");\nconst UNTYPED_TX_START_BYTE = 0xc0; // all txs with first byte >= 0xc0 are untyped\nvar TransactionType;\n(function (TransactionType) {\n    TransactionType[TransactionType[\"Legacy\"] = 0] = \"Legacy\";\n    TransactionType[TransactionType[\"EIP2930AccessList\"] = 1] = \"EIP2930AccessList\";\n    TransactionType[TransactionType[\"EIP1559AccessList\"] = 2] = \"EIP1559AccessList\";\n})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));\nclass TransactionFactory {\n    constructor(raw, common) {\n        const [txData, extra] = rlp_1.decode(raw);\n        this.tx = TransactionFactory.fromDatabaseTx(txData, common, extra);\n    }\n    static _fromData(txData, txType, common, extra) {\n        // if tx type envelope isn't available yet on this HF,\n        // return legacy txs as is and convert typed txs to legacy\n        if (!common.isActivatedEIP(2718)) {\n            return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n        }\n        else if (!common.isActivatedEIP(1559)) {\n            if (txType === TransactionType.Legacy) {\n                return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n            }\n            else if (txType === TransactionType.EIP2930AccessList) {\n                if (common.isActivatedEIP(2930)) {\n                    return eip2930_access_list_transaction_1.EIP2930AccessListTransaction.fromTxData(txData, common, extra);\n                }\n                else {\n                    // TODO: I believe this is unreachable with current architecture.\n                    // If 2718 is supported, so is 2930.\n                    throw new ethereum_utils_1.CodedError(`EIP 2930 is not activated.`, utils_1.JsonRpcErrorCode.INVALID_PARAMS);\n                }\n            }\n            else if (txType === TransactionType.EIP1559AccessList) {\n                throw new ethereum_utils_1.CodedError(`EIP 1559 is not activated.`, utils_1.JsonRpcErrorCode.INVALID_PARAMS);\n            }\n        }\n        // eip 1559, 2930, and 2718 are activated\n        else {\n            // we can assume that all database transactions came from us, so\n            // the type doesn't need to be normalized.\n            if (Array.isArray(txData)) {\n                if (txType === TransactionType.Legacy) {\n                    return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n                }\n                else if (txType === TransactionType.EIP2930AccessList) {\n                    return eip2930_access_list_transaction_1.EIP2930AccessListTransaction.fromTxData(txData, common, extra);\n                }\n                else if (txType === TransactionType.EIP1559AccessList) {\n                    return eip1559_fee_market_transaction_1.EIP1559FeeMarketTransaction.fromTxData(txData, common, extra);\n                }\n            }\n            else {\n                const toEIP1559 = (txType === TransactionType.Legacy ||\n                    txType === TransactionType.EIP2930AccessList) &&\n                    txData.gasPrice === undefined;\n                if (txType === TransactionType.EIP1559AccessList || toEIP1559) {\n                    const tx = eip1559_fee_market_transaction_1.EIP1559FeeMarketTransaction.fromTxData(txData, common, extra);\n                    if (toEIP1559) {\n                        // they didn't specify the type as eip-1559 (type 2), so we are\n                        // upgrading it. BUT, there's still a chance they sent us this data,\n                        // so we don't want to overwrite it.\n                        if (!txData.maxFeePerGas) {\n                            tx.maxFeePerGas = utils_1.Quantity.from(null);\n                        }\n                        if (!txData.maxPriorityFeePerGas) {\n                            tx.maxPriorityFeePerGas = utils_1.RPCQUANTITY_ZERO;\n                        }\n                    }\n                    return tx;\n                }\n                else if (txType === TransactionType.Legacy) {\n                    return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n                }\n                else if (txType === TransactionType.EIP2930AccessList) {\n                    // if no access list is provided, we convert to legacy\n                    if (txData.accessList === undefined) {\n                        return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n                    }\n                    else {\n                        return eip2930_access_list_transaction_1.EIP2930AccessListTransaction.fromTxData(txData, common, extra);\n                    }\n                }\n            }\n        }\n        throw new ethereum_utils_1.CodedError(`Tx instantiation with supplied type not supported`, utils_1.JsonRpcErrorCode.METHOD_NOT_FOUND);\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The rpc transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param common - Options to pass on to the constructor of the transaction\n     */\n    static fromRpc(txData, common, extra) {\n        const txType = this.typeOfRPC(txData);\n        return this._fromData(txData, txType, common, extra);\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The raw transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param common - Options to pass on to the constructor of the transaction\n     */\n    static fromDatabaseTx(txData, common, extra) {\n        const txType = this.typeOfRaw(txData);\n        switch (txType) {\n            case TransactionType.EIP1559AccessList:\n                return eip1559_fee_market_transaction_1.EIP1559FeeMarketTransaction.fromTxData(txData.slice(1), common, extra);\n            case TransactionType.Legacy:\n                return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n            case TransactionType.EIP2930AccessList:\n                return eip2930_access_list_transaction_1.EIP2930AccessListTransaction.fromTxData(txData.slice(1), common, extra);\n            default:\n                throw new ethereum_utils_1.CodedError(`Transactions with supplied type ${txType} not supported`, utils_1.JsonRpcErrorCode.METHOD_NOT_FOUND);\n        }\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * When transaction types are activated (EIP 2718) the txData will be checked\n     * for a transaction envelope (first byte < 192) before determining the\n     * decoding strategy, otherwise it will be decoded as a Legacy Transaction. If\n     * the transaction contains a transaction envelop, but EIP 2718 is not active\n     * decoding will fail and an exception will be thrown.\n     *\n     * @param txData - The raw hex string transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param common - Options to pass on to the constructor of the transaction\n     */\n    static fromString(txData, common) {\n        let data = utils_1.Data.from(txData).toBuffer();\n        const type = data[0];\n        const txType = this.typeOf(type);\n        if (common.isActivatedEIP(2718)) {\n            let raw;\n            try {\n                raw = rlp_1.decode(txType === TransactionType.Legacy ? data : data.slice(1));\n            }\n            catch (e) {\n                throw new Error(\"Could not decode transaction: \" + e.message);\n            }\n            return this._fromData(raw, txType, common);\n        }\n        else {\n            let raw;\n            try {\n                raw = rlp_1.decode(data);\n            }\n            catch (e) {\n                throw new Error(\"Could not decode transaction: \" + e.message);\n            }\n            return this._fromData(raw, TransactionType.Legacy, common);\n        }\n    }\n    static typeOf(type) {\n        if (type === TransactionType.EIP1559AccessList ||\n            type === TransactionType.EIP2930AccessList) {\n            return type;\n        }\n        else if (type >= UNTYPED_TX_START_BYTE ||\n            type === TransactionType.Legacy ||\n            type === undefined) {\n            return TransactionType.Legacy;\n        }\n        else {\n            throw new Error(`Invalid transaction type: ${type}`);\n        }\n    }\n    static typeOfRaw(raw) {\n        // LegacyTransactions won't have the type up front to parse\n        if (raw.length === 9) {\n            return TransactionType.Legacy;\n        }\n        const type = raw[0][0];\n        return this.typeOf(type);\n    }\n    static typeOfRPC(rpc) {\n        if (!(\"type\" in rpc) || rpc.type === undefined) {\n            return TransactionType.Legacy;\n        }\n        else {\n            // The type must be a hex value\n            const txType = parseInt(rpc.type, 16);\n            return this.typeOf(txType);\n        }\n    }\n}\nexports.TransactionFactory = TransactionFactory;\n//# sourceMappingURL=transaction-factory.js.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar _gasUsed, _init;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionReceipt = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst utils_1 = require(\"@ganache/utils\");\nconst utils_2 = require(\"@ganache/utils\");\nconst STATUSES = [utils_2.RPCQUANTITY_ZERO, utils_2.RPCQUANTITY_ONE];\nclass TransactionReceipt {\n    constructor(data) {\n        _gasUsed.set(this, void 0);\n        _init.set(this, (status, cumulativeGasUsed, logsBloom, logs, gasUsed, contractAddress = null, type = null) => {\n            this.raw = [status, cumulativeGasUsed, logsBloom, logs];\n            this.contractAddress = contractAddress;\n            __classPrivateFieldSet(this, _gasUsed, gasUsed);\n            this.txType = type;\n        });\n        if (data) {\n            const decoded = rlp_1.decode(data);\n            __classPrivateFieldGet(this, _init).call(this, decoded[0], decoded[1], decoded[2], decoded[3], decoded[4], decoded[5]);\n        }\n    }\n    static fromValues(status, cumulativeGasUsed, logsBloom, logs, gasUsed, contractAddress, type = null) {\n        const receipt = new TransactionReceipt();\n        __classPrivateFieldGet(receipt, _init).call(receipt, status, cumulativeGasUsed, logsBloom, logs, gasUsed, contractAddress, type);\n        return receipt;\n    }\n    serialize(all) {\n        if (this.encoded == null) {\n            this.encoded = rlp_1.encodeRange(this.raw, 0, 4);\n        }\n        if (all) {\n            // the database format includes gasUsed and the contractAddress:\n            const extras = [\n                __classPrivateFieldGet(this, _gasUsed),\n                this.contractAddress\n            ];\n            const epilogue = rlp_1.encodeRange(extras, 0, 2);\n            return rlp_1.digest([this.encoded.output, epilogue.output], this.encoded.length + epilogue.length);\n        }\n        else {\n            // receipt trie format:\n            const serialized = rlp_1.digest([this.encoded.output], this.encoded.length);\n            return this.txType\n                ? Buffer.concat([this.txType.toBuffer(), serialized])\n                : serialized;\n        }\n    }\n    toJSON(block, transaction, common) {\n        const raw = this.raw;\n        const contractAddress = this.contractAddress.length === 0\n            ? null\n            : utils_1.Data.from(this.contractAddress);\n        const blockHash = block.hash();\n        const blockNumber = block.header.number;\n        const blockLog = ethereum_utils_1.BlockLogs.create(blockHash);\n        const transactionHash = transaction.hash;\n        const transactionIndex = transaction.index;\n        blockLog.blockNumber = blockNumber;\n        raw[3].forEach(l => blockLog.append(transactionIndex, transactionHash, l));\n        const logs = [...blockLog.toJSON()];\n        if (block.header.baseFeePerGas) {\n            transaction.updateEffectiveGasPrice(block.header.baseFeePerGas);\n        }\n        const json = {\n            transactionHash,\n            transactionIndex,\n            blockNumber,\n            blockHash,\n            from: transaction.from,\n            to: contractAddress ? null : transaction.to,\n            cumulativeGasUsed: utils_1.Quantity.from(raw[1]),\n            gasUsed: utils_1.Quantity.from(__classPrivateFieldGet(this, _gasUsed)),\n            contractAddress,\n            logs,\n            logsBloom: utils_1.Data.from(raw[2], 256),\n            status: STATUSES[raw[0][0]],\n            effectiveGasPrice: transaction.effectiveGasPrice\n        };\n        if (transaction.type && common.isActivatedEIP(2718)) {\n            json.type = transaction.type;\n        }\n        return json;\n    }\n}\nexports.TransactionReceipt = TransactionReceipt;\n_gasUsed = new WeakMap(), _init = new WeakMap();\n//# sourceMappingURL=transaction-receipt.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=vm-transaction.js.map","\"use strict\";\n/*!\n * @ganache/ethereum-utils\n *\n * @author David Murdoch <david@trufflesuite.com> (https://davidmurdoch.com)\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbortError = void 0;\nclass AbortError extends Error {\n    constructor() {\n        super(\"The user aborted a request.\");\n    }\n}\nexports.AbortError = AbortError;\n//# sourceMappingURL=abort-error.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodedError = void 0;\nclass CodedError extends Error {\n    constructor(message, code) {\n        super(message);\n        CodedError.captureStackTraceExtended.bind(this, message);\n        this.code = code;\n    }\n    static from(error, code) {\n        const codedError = new CodedError(error.message, code);\n        codedError.stack = error.stack;\n        return codedError;\n    }\n    static nonEnumerableProperty(value) {\n        // The field `enumerable` is `false` by default.\n        return {\n            value: value,\n            writable: true,\n            configurable: true\n        };\n    }\n    static captureStackTraceExtended(message) {\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        else {\n            // Generic way to set the error stack trace.\n            Object.defineProperty(this, \"stack\", CodedError.nonEnumerableProperty(Error(message).stack));\n            // Use the `+` operator with an empty string to implicitly type cast the\n            // `message` argument into a string.\n            Object.defineProperty(this, \"message\", CodedError.nonEnumerableProperty(message !== void 0 ? \"\" + message : \"\"));\n        }\n    }\n}\nexports.CodedError = CodedError;\n//# sourceMappingURL=coded-error.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VM_EXCEPTIONS = exports.VM_EXCEPTION = exports.GAS_LIMIT = exports.INTRINSIC_GAS_TOO_LOW = exports.REPLACED = exports.UNDERPRICED = exports.NONCE_TOO_LOW = exports.INVALID_SENDER = void 0;\n/**\n * Returned if the transaction contains an invalid signature.\n */\nexports.INVALID_SENDER = \"invalid sender\";\n/**\n * Returned if the nonce of a transaction is lower than the one present in the local chain.\n */\nexports.NONCE_TOO_LOW = \"nonce too low\";\n/**\n * Returned if a transaction's gas price is below the minimum configured for the transaction pool.\n */\nexports.UNDERPRICED = \"transaction underpriced\";\n/**\n * Returned if a transaction's gas price is below the minimum configured for the transaction pool.\n */\nexports.REPLACED = \"transaction replaced by better transaction\";\n/**\n * Returned if the transaction is specified to use less gas than required to start the invocation.\n */\nexports.INTRINSIC_GAS_TOO_LOW = \"intrinsic gas too low\";\n/**\n * Returned if a transaction's requested gas limit exceeds the maximum allowance of the current block.\n */\nexports.GAS_LIMIT = \"exceeds block gas limit\";\n/**\n * Prefix for a single VM Exception occuring when running a transaction or block\n */\nexports.VM_EXCEPTION = \"VM Exception while processing transaction: \";\n/**\n * Prefix for multiple VM Exceptions occuring when running transactions or a block\n */\nexports.VM_EXCEPTIONS = \"Multiple VM Exceptions while processing transactions: : \\n\\n\";\n//# sourceMappingURL=errors.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RuntimeError = exports.RETURN_TYPES = void 0;\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereumjs_abi_1 = require(\"ethereumjs-abi\");\nconst coded_error_1 = require(\"./coded-error\");\nconst utils_2 = require(\"@ganache/utils\");\nconst REVERT_REASON = Buffer.from(\"08c379a0\", \"hex\"); // keccak(\"Error(string)\").slice(0, 4)\nvar RETURN_TYPES;\n(function (RETURN_TYPES) {\n    RETURN_TYPES[RETURN_TYPES[\"TRANSACTION_HASH\"] = 0] = \"TRANSACTION_HASH\";\n    RETURN_TYPES[RETURN_TYPES[\"RETURN_VALUE\"] = 1] = \"RETURN_VALUE\";\n})(RETURN_TYPES = exports.RETURN_TYPES || (exports.RETURN_TYPES = {}));\nclass RuntimeError extends coded_error_1.CodedError {\n    constructor(transactionHash, result, returnType) {\n        const execResult = result.execResult;\n        const error = execResult.exceptionError.error;\n        let message = errors_1.VM_EXCEPTION + error;\n        super(message, utils_2.JsonRpcErrorCode.INVALID_INPUT);\n        coded_error_1.CodedError.captureStackTraceExtended.bind(this, message);\n        this.name = this.constructor.name;\n        const returnValue = execResult.returnValue;\n        const hash = transactionHash.toString();\n        let reason;\n        if (returnValue.length > 4 &&\n            REVERT_REASON.compare(returnValue, 0, 4) === 0) {\n            try {\n                // it is possible for the `returnValue` to be gibberish that can't be\n                // decoded. See: https://github.com/trufflesuite/ganache/pull/452\n                reason = ethereumjs_abi_1.rawDecode([\"bytes\"], returnValue.slice(4))[0].toString();\n                message += \" \" + reason;\n            }\n            catch {\n                // ignore error since reason string recover is impossible\n                reason = null;\n            }\n        }\n        else {\n            reason = null;\n        }\n        this.message = message;\n        this.data = {\n            hash: hash,\n            programCounter: execResult.runState.programCounter,\n            result: returnType === RETURN_TYPES.TRANSACTION_HASH\n                ? hash\n                : utils_1.Data.from(returnValue || \"0x\").toString(),\n            reason: reason,\n            message: error\n        };\n    }\n}\nexports.RuntimeError = RuntimeError;\n//# sourceMappingURL=runtime-error.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./errors/coded-error\"), exports);\n__exportStar(require(\"./errors/errors\"), exports);\n__exportStar(require(\"./errors/runtime-error\"), exports);\n__exportStar(require(\"./errors/abort-error\"), exports);\n__exportStar(require(\"./things/account\"), exports);\n__exportStar(require(\"./things/blocklogs\"), exports);\n__exportStar(require(\"./things/tags\"), exports);\n__exportStar(require(\"./things/trace-data\"), exports);\n__exportStar(require(\"./things/trace-storage-map\"), exports);\n__exportStar(require(\"./types/debug-storage\"), exports);\n__exportStar(require(\"./types/extract-values-from-types\"), exports);\n__exportStar(require(\"./types/filters\"), exports);\n__exportStar(require(\"./types/hex-datatypes\"), exports);\n__exportStar(require(\"./types/shh\"), exports);\n__exportStar(require(\"./types/subscriptions\"), exports);\n__exportStar(require(\"./types/trace-transaction\"), exports);\n__exportStar(require(\"./types/tuple-from-union\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst utils_2 = require(\"@ganache/utils\");\nclass Account {\n    constructor(address) {\n        this.stateRoot = ethereumjs_util_1.KECCAK256_RLP;\n        this.codeHash = ethereumjs_util_1.KECCAK256_NULL;\n        this.address = address;\n        this.balance = utils_2.RPCQUANTITY_EMPTY;\n        this.nonce = utils_2.RPCQUANTITY_EMPTY;\n    }\n    static fromBuffer(buffer) {\n        const account = Object.create(Account.prototype);\n        const raw = rlp_1.decode(buffer);\n        account.nonce = utils_1.Quantity.from(raw[0]);\n        account.balance = utils_1.Quantity.from(raw[1]);\n        account.stateRoot = raw[2];\n        account.codeHash = raw[3];\n        return account;\n    }\n    serialize() {\n        return rlp_1.encode([\n            this.nonce.toBuffer(),\n            this.balance.toBuffer(),\n            this.stateRoot,\n            this.codeHash\n        ]);\n    }\n}\nexports.Account = Account;\n//# sourceMappingURL=account.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockLogs = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst utils_2 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst _raw = Symbol(\"raw\");\nconst _logs = Symbol(\"logs\");\nconst filterByTopic = (expectedTopics, logTopics) => {\n    // Exclude log if its number of topics is less than the number expected\n    if (expectedTopics.length > logTopics.length)\n        return false;\n    // for every expectedTopic, we must much the log topic in the same position\n    return expectedTopics.every((expectedTopic, logPosition) => {\n        // a `null` topic means \"anything\"\n        if (expectedTopic === null)\n            return true;\n        let expectedTopicSet;\n        if (!Array.isArray(expectedTopic)) {\n            return logTopics[logPosition].equals(utils_1.Data.from(expectedTopic).toBuffer());\n        }\n        // an empty rule set means \"anything\"\n        if (expectedTopic.length === 0)\n            return true;\n        expectedTopicSet = expectedTopic;\n        const logTopic = logTopics[logPosition];\n        // \"OR\" logic, e.g., [[A, B]] means log topic in the first position matching either \"A\" OR \"B\":\n        return expectedTopicSet.some(expectedTopic => logTopic.equals(utils_1.Data.from(expectedTopic).toBuffer()));\n    });\n};\nclass BlockLogs {\n    constructor(data) {\n        if (data) {\n            const decoded = rlp_1.decode(data);\n            this[_raw] = decoded;\n        }\n    }\n    /**\n     *\n     * @param blockHash Creates an BlogLogs entity with an empty internal logs\n     * array.\n     */\n    static create(blockHash) {\n        const blockLog = Object.create(BlockLogs.prototype);\n        blockLog[_raw] = [blockHash.toBuffer(), []];\n        return blockLog;\n    }\n    /**\n     * rlpEncode's the blockHash and logs array for db storage\n     */\n    serialize() {\n        return rlp_1.encode(this[_raw]);\n    }\n    /**\n     * Appends the data to the internal logs array\n     * @param transactionIndex\n     * @param transactionHash\n     * @param log\n     */\n    append(\n    /*removed: boolean, */ transactionIndex, transactionHash, log) {\n        this[_raw][1].push([\n            utils_2.BUFFER_ZERO,\n            transactionIndex.toBuffer(),\n            transactionHash.toBuffer(),\n            log[0],\n            log[1],\n            log[2] // `data`\n        ]);\n    }\n    /**\n     * Returns the number of logs in the internal logs array.\n     */\n    get length() {\n        return this[_raw][1].length;\n    }\n    static fromJSON(json) {\n        if (!json || json.length === 0) {\n            return null;\n        }\n        const blockHash = json[0].blockHash;\n        const blockNumber = json[0].blockNumber;\n        const blockLogs = BlockLogs.create(utils_1.Data.from(blockHash, 32));\n        blockLogs.blockNumber = utils_1.Quantity.from(blockNumber);\n        json.forEach(log => {\n            const address = ethereum_address_1.Address.from(log.address);\n            const blockNumber = log.blockNumber;\n            const data = Array.isArray(log.data)\n                ? log.data.map(d => utils_1.Data.from(d).toBuffer())\n                : utils_1.Data.from(log.data).toBuffer();\n            const logIndex = log.logIndex;\n            const removed = log.removed === false ? utils_2.BUFFER_ZERO : utils_2.RPCQUANTITY_ONE.toBuffer();\n            const topics = Array.isArray(log.topics)\n                ? log.topics.map(t => utils_1.Data.from(t, 32).toBuffer())\n                : utils_1.Data.from(log.topics, 32).toBuffer();\n            const transactionHash = utils_1.Data.from(log.transactionHash, 32);\n            const transactionIndex = utils_1.Quantity.from(log.transactionIndex);\n            blockLogs.append(transactionIndex, transactionHash, [\n                address.toBuffer(),\n                topics,\n                data\n            ]);\n        });\n        return blockLogs;\n    }\n    toJSON() {\n        return this[_logs]().toJSON();\n    }\n    [_logs]() {\n        const blockNumber = this.blockNumber;\n        const raw = this[_raw];\n        const logs = raw[1];\n        const l = this.length;\n        const blockHash = utils_1.Data.from(raw[0]);\n        return {\n            toJSON() {\n                return {\n                    *[Symbol.iterator]() {\n                        for (let i = 0; i < l; i++) {\n                            yield BlockLogs.logToJSON(logs[i], utils_1.Quantity.from(i), blockHash, blockNumber);\n                        }\n                    }\n                };\n            },\n            *[Symbol.iterator]() {\n                for (let i = 0; i < l; i++) {\n                    const log = logs[i];\n                    const address = log[3];\n                    const topics = log[4];\n                    yield {\n                        address,\n                        topics,\n                        toJSON: () => BlockLogs.logToJSON(log, utils_1.Quantity.from(i), blockHash, blockNumber)\n                    };\n                }\n            }\n        };\n    }\n    /**\n     *\n     * @param log\n     * @param logIndex The index this log appears in the block\n     * @param blockHash The hash of the block\n     * @param blockNumber The block number\n     */\n    static logToJSON(log, logIndex, blockHash, blockNumber) {\n        const topics = log[4];\n        const data = log[5];\n        return {\n            address: ethereum_address_1.Address.from(log[3]),\n            blockHash,\n            blockNumber,\n            data: Array.isArray(data)\n                ? data.map(d => utils_1.Data.from(d, d.length))\n                : utils_1.Data.from(data, data.length),\n            logIndex,\n            removed: log[0].equals(utils_2.BUFFER_ZERO) ? false : true,\n            topics: Array.isArray(topics)\n                ? topics.map(t => utils_1.Data.from(t, 32))\n                : utils_1.Data.from(topics, 32),\n            transactionHash: utils_1.Data.from(log[2], 32),\n            transactionIndex: utils_1.Quantity.from(log[1])\n        };\n    }\n    /**\n     * Note: you must set `this.blockNumber: Quantity` first!\n     *\n     * Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic\n     * filters:\n     *  ▸ [] \"anything\"\n     *  ▸ [A] \"A in first position (and anything after)\"\n     *  ▸ [null, B] \"anything in first position AND B in second position (and anything after)\"\n     *  ▸ [A, B] \"A\" in first position AND B in second position (and anything after)\"\n     *  ▸ [[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\"\n     * @param expectedAddresses\n     * @param expectedTopics\n     * @returns JSON representation of the filtered logs\n     */\n    *filter(expectedAddresses, expectedTopics) {\n        const logs = this[_logs]();\n        if (expectedAddresses.length !== 0) {\n            if (expectedTopics.length === 0) {\n                for (const log of logs) {\n                    if (expectedAddresses.some(address => address.equals(log.address)))\n                        yield log.toJSON();\n                }\n            }\n            else {\n                for (const log of logs) {\n                    if (!expectedAddresses.some(address => address.equals(log.address)))\n                        continue;\n                    if (filterByTopic(expectedTopics, log.topics))\n                        yield log.toJSON();\n                }\n            }\n        }\n        else if (expectedTopics.length !== 0) {\n            for (const log of logs) {\n                if (filterByTopic(expectedTopics, log.topics))\n                    yield log.toJSON();\n            }\n        }\n        else {\n            yield* logs.toJSON();\n        }\n    }\n}\nexports.BlockLogs = BlockLogs;\n//# sourceMappingURL=blocklogs.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tag = void 0;\nvar Tag;\n(function (Tag) {\n    Tag[\"EARLIEST\"] = \"earliest\";\n    Tag[\"LATEST\"] = \"latest\";\n    Tag[\"PENDING\"] = \"pending\";\n})(Tag = exports.Tag || (exports.Tag = {}));\nvar _Tag;\n(function (_Tag) {\n    _Tag[_Tag[\"earliest\"] = 0] = \"earliest\";\n    _Tag[_Tag[\"latest\"] = 1] = \"latest\";\n    _Tag[_Tag[\"pending\"] = 2] = \"pending\";\n})(_Tag || (_Tag = {}));\n(function (Tag) {\n    function normalize(tag) {\n        if (typeof tag === \"string\") {\n            return Tag[tag.toUpperCase()];\n        }\n        else {\n            switch (tag) {\n                case _Tag.earliest:\n                    return Tag.EARLIEST;\n                case _Tag.latest:\n                    return Tag.LATEST;\n                case _Tag.pending:\n                    return Tag.PENDING;\n            }\n        }\n    }\n    Tag.normalize = normalize;\n})(Tag = exports.Tag || (exports.Tag = {}));\n//# sourceMappingURL=tags.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceDataFactory = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst BYTE_LENGTH = 32;\n/**\n * Precomputed 32-byte prefixes to make stringification a faster\n */\nconst PREFIXES = [\n    \"\",\n    \"00\",\n    \"0000\",\n    \"000000\",\n    \"00000000\",\n    \"0000000000\",\n    \"000000000000\",\n    \"00000000000000\",\n    \"0000000000000000\",\n    \"000000000000000000\",\n    \"00000000000000000000\",\n    \"0000000000000000000000\",\n    \"000000000000000000000000\",\n    \"00000000000000000000000000\",\n    \"0000000000000000000000000000\",\n    \"000000000000000000000000000000\",\n    \"00000000000000000000000000000000\",\n    \"0000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000000000000000000000000000\"\n];\nconst TraceDataFactory = () => {\n    const traceDataLookup = new Map();\n    const TraceData = {\n        from: (value) => {\n            // Remove all leading zeroes from keys.\n            const key = utils_1.bufferToMinHexKey(value);\n            const existing = traceDataLookup.get(key);\n            if (existing) {\n                return existing;\n            }\n            let buffer;\n            let str;\n            const data = {\n                /**\n                 * Returns a 32-byte 0-padded Buffer\n                 */\n                toBuffer: () => {\n                    if (buffer) {\n                        return buffer;\n                    }\n                    const length = value.byteLength;\n                    if (length === BYTE_LENGTH) {\n                        buffer = value;\n                    }\n                    else {\n                        // convert the buffer into the appropriately sized buffer.\n                        const lengthDiff = BYTE_LENGTH - length;\n                        buffer = Buffer.allocUnsafe(BYTE_LENGTH).fill(0, 0, lengthDiff);\n                        value.copy(buffer, lengthDiff, 0, length);\n                    }\n                    return buffer;\n                },\n                /**\n                 * Returns a 32-byte hex-string representation\n                 */\n                toJSON: () => {\n                    if (str) {\n                        return str;\n                    }\n                    // convert a hex key like \"ab01\" into \"00...00ab01\"\n                    return (str = `${PREFIXES[BYTE_LENGTH - key.length / 2]}${key}`);\n                }\n            };\n            traceDataLookup.set(key, data);\n            return data;\n        }\n    };\n    return TraceData;\n};\nexports.TraceDataFactory = TraceDataFactory;\n//# sourceMappingURL=trace-data.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceStorageMap = void 0;\nclass TraceStorageMap extends Map {\n    toJSON() {\n        const obj = {};\n        for (const [key, value] of this) {\n            obj[key.toJSON()] = value;\n        }\n        return obj;\n    }\n}\nexports.TraceStorageMap = TraceStorageMap;\n//# sourceMappingURL=trace-storage-map.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=debug-storage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=extract-values-from-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilterTypes = void 0;\nvar FilterTypes;\n(function (FilterTypes) {\n    FilterTypes[FilterTypes[\"log\"] = 0] = \"log\";\n    FilterTypes[FilterTypes[\"block\"] = 1] = \"block\";\n    FilterTypes[FilterTypes[\"pendingTransaction\"] = 2] = \"pendingTransaction\";\n})(FilterTypes = exports.FilterTypes || (exports.FilterTypes = {}));\n//# sourceMappingURL=filters.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=hex-datatypes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=shh.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=subscriptions.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=trace-transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tuple-from-union.js.map","\"use strict\";\n/*!\n * @ganache/filecoin-options\n *\n * @author Tim Coulter\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilecoinDefaults = exports.FilecoinOptionsConfig = void 0;\nconst src_1 = require(\"./src\");\nvar src_2 = require(\"./src\");\nObject.defineProperty(exports, \"FilecoinOptionsConfig\", { enumerable: true, get: function () { return src_2.FilecoinOptionsConfig; } });\nObject.defineProperty(exports, \"FilecoinDefaults\", { enumerable: true, get: function () { return src_2.FilecoinDefaults; } });\nexports.default = {\n    FilecoinDefaults: src_1.FilecoinDefaults,\n    FilecoinOptionsConfig: src_1.FilecoinOptionsConfig\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChainOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nexports.ChainOptions = {\n    ipfsHost: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The IPFS simulator host name/address to listen on.\",\n        default: () => \"127.0.0.1\",\n        cliType: \"string\"\n    },\n    ipfsPort: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The IPFS simulator port.\",\n        default: () => 5001,\n        cliType: \"number\"\n    },\n    asyncRequestProcessing: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"When set to `false` only one request will be processed at a time.\",\n        default: () => true,\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=chain-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nexports.DatabaseOptions = {\n    db: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specify an alternative database instance, like MemDOWN\",\n        disableInCLI: true,\n        conflicts: [\"dbPath\"]\n    },\n    dbPath: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specify a path to a directory to save the chain database.\",\n        cliAliases: [\"db\"],\n        cliType: \"string\",\n        conflicts: [\"db\"]\n    }\n};\n//# sourceMappingURL=database-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalize = void 0;\nconst normalize = (rawInput) => rawInput;\nexports.normalize = normalize;\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilecoinOptionsConfig = exports.FilecoinDefaults = void 0;\nconst chain_options_1 = require(\"./chain-options\");\nconst database_options_1 = require(\"./database-options\");\nconst logging_options_1 = require(\"./logging-options\");\nconst miner_options_1 = require(\"./miner-options\");\nconst wallet_options_1 = require(\"./wallet-options\");\nconst options_1 = require(\"@ganache/options\");\nexports.FilecoinDefaults = {\n    chain: chain_options_1.ChainOptions,\n    database: database_options_1.DatabaseOptions,\n    logging: logging_options_1.LoggingOptions,\n    miner: miner_options_1.MinerOptions,\n    wallet: wallet_options_1.WalletOptions\n};\nexports.FilecoinOptionsConfig = new options_1.OptionsConfig(exports.FilecoinDefaults);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggingOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst logger = { log: console.log };\nexports.LoggingOptions = {\n    logger: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"An object, like `console`, that implements a `log` function.\",\n        disableInCLI: true,\n        default: () => logger\n    }\n};\n//# sourceMappingURL=logging-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinerOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nexports.MinerOptions = {\n    blockTime: {\n        normalize: value => Math.max(0, value),\n        cliDescription: 'Sets the `blockTime` in seconds for automatic mining. A `blockTime` of `0` or a negative number enables \"instamine mode\", where new executable transactions will be mined instantly.',\n        default: () => 0,\n        cliType: \"number\"\n    },\n    mine: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Enable mining. Set to `false` to pause the miner.\",\n        default: () => true,\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=miner-options.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst seedrandom_1 = __importDefault(require(\"seedrandom\"));\nconst options_1 = require(\"@ganache/options\");\nconst unseededRng = seedrandom_1.default();\nconst randomAlphaNumericString = (() => {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const alphabetLength = alphabet.length;\n    return (length, rng) => {\n        let text = \"\";\n        for (let i = 0; i < length; i++) {\n            text += alphabet[(rng() * alphabetLength) | 0];\n        }\n        return text;\n    };\n})();\nexports.WalletOptions = {\n    totalAccounts: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Number of accounts to generate at startup.\",\n        default: () => 10,\n        cliAliases: [\"a\"],\n        cliType: \"number\"\n    },\n    deterministic: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Use pre-defined, deterministic seed.\",\n        default: () => false,\n        cliAliases: [\"d\"],\n        cliType: \"boolean\",\n        conflicts: [\"seed\"]\n    },\n    seed: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Seed to use to generate a mnemonic.\",\n        // The order of the options matter here! `wallet.deterministic`\n        // needs to be prior to `wallet.seed` for `config.deterministic`\n        // below to be set correctly\n        default: config => config.deterministic === true\n            ? options_1.DeterministicSeedPhrase\n            : randomAlphaNumericString(10, unseededRng),\n        cliAliases: [\"s\"],\n        cliType: \"string\",\n        conflicts: [\"deterministic\"]\n    },\n    defaultBalance: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The default account balance, specified in FIL.\",\n        default: () => 100,\n        cliAliases: [\"b\"],\n        cliType: \"number\"\n    }\n};\n//# sourceMappingURL=wallet-options.js.map","\"use strict\";\n/*!\n * @ganache/colors\n *\n * @author David Murdoch\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/index\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TruffleColors = void 0;\nexports.TruffleColors = {\n    /**\n     * Ganache orange\n     */\n    porsche: \"#e4a663\",\n    /**\n     * truffle blue/turquoise\n     */\n    turquoise: \"#3fe0c5\"\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.provider = exports.server = exports._DefaultServerOptions = exports.ServerStatus = exports.Server = void 0;\nconst connector_loader_1 = __importDefault(require(\"./src/connector-loader\"));\nconst server_1 = __importDefault(require(\"./src/server\"));\nvar server_2 = require(\"./src/server\");\nObject.defineProperty(exports, \"Server\", { enumerable: true, get: function () { return server_2.Server; } });\nObject.defineProperty(exports, \"ServerStatus\", { enumerable: true, get: function () { return server_2.ServerStatus; } });\nObject.defineProperty(exports, \"_DefaultServerOptions\", { enumerable: true, get: function () { return server_2._DefaultServerOptions; } });\n/**\n * @public\n */\nconst Ganache = {\n    /**\n     * Creates a Ganache server instance that creates and\n     * serves an underlying Ganache provider. Initialization\n     * doesn't begin until `server.listen(...)` is called.\n     * `server.listen(...)` returns a promise that resolves\n     * when initialization is finished.\n     *\n     * @param options - Configuration options for the server;\n     * `options` includes provider based options as well.\n     * @returns A provider instance for the flavor\n     * `options.flavor` which defaults to `ethereum`.\n     */\n    server: (options) => new server_1.default(options),\n    /**\n     * Initializes a Web3 provider for a Ganache instance.\n     * This function starts an asynchronous task, but does not\n     * finish it by the time the function returns. Listen to\n     * `provider.on(\"connect\", () => {...})` or wait for\n     * `await provider.once(\"connect\")` for initialization to\n     * finish. You may start sending requests to the provider\n     * before initialization finishes however; these requests\n     * will start being consumed after initialization finishes.\n     *\n     * @param options - Configuration options for the provider.\n     * @returns A provider instance for the flavor\n     * `options.flavor` which defaults to `ethereum`.\n     */\n    provider: (options) => {\n        const loader = connector_loader_1.default.initialize(options);\n        return loader.connector.provider;\n    }\n};\nexports.server = Ganache.server;\nexports.provider = Ganache.provider;\n/**\n * @public\n */\nexports.default = Ganache;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@ganache/utils\");\nconst flavors_1 = require(\"@ganache/flavors\");\nconst flavors_2 = require(\"@ganache/flavors\");\nconst initialize = (options = {\n    flavor: flavors_1.DefaultFlavor,\n    chain: { asyncRequestProcessing: true }\n}) => {\n    const flavor = (options.flavor || flavors_1.DefaultFlavor);\n    // Set up our request coordinator to either use FIFO or or async request\n    // processing. The RequestCoordinator _can_ be used to coordinate the number\n    // of requests being processed, but we don't use it for that (yet), instead\n    // of \"all\" (0) or just 1 as we are doing here:\n    const asyncRequestProcessing = \"chain\" in options\n        ? options[\"chain\"].asyncRequestProcessing\n        : options[\"asyncRequestProcessing\"];\n    const requestCoordinator = new utils_1.RequestCoordinator(asyncRequestProcessing ? 0 : 1);\n    // The Executor is responsible for actually executing the method on the\n    // chain/API. It performs some safety checks to ensure \"safe\" method\n    //  execution before passing it to a RequestCoordinator.\n    const executor = new utils_1.Executor(requestCoordinator);\n    const connector = flavors_2.GetConnector(flavor, options, executor);\n    // Purposely not awaiting on this to prevent a breaking change\n    // to the `Ganache.provider()` method\n    // TODO: remove the `connector.connect ? ` check and just use\n    // `connector.connect()` after publishing the `@ganache/filecoin` with the\n    // connector.connect interface\n    const connectPromise = connector.connect\n        ? connector.connect()\n        : connector.initialize();\n    // The request coordinator is initialized in a \"paused\" state; when the\n    // provider is ready we unpause.. This lets us accept queue requests before\n    // we've even fully initialized.\n    return {\n        connector,\n        promise: connectPromise.then(requestCoordinator.resume)\n    };\n};\n/**\n * Loads the connector specified by the given `flavor`\n */\nexports.default = {\n    initialize\n};\n//# sourceMappingURL=connector-loader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serverOptionsConfig = exports.serverDefaults = void 0;\nconst server_options_1 = require(\"./server-options\");\nconst options_1 = require(\"@ganache/options\");\nexports.serverDefaults = {\n    server: server_options_1.ServerOptions\n};\nexports.serverOptionsConfig = new options_1.OptionsConfig(exports.serverDefaults);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerOptions = void 0;\nconst flavors_1 = require(\"@ganache/flavors\");\nconst normalize = (rawInput) => rawInput;\nexports.ServerOptions = {\n    ws: {\n        normalize,\n        cliDescription: \"Enable a websocket server.\",\n        default: () => true,\n        legacyName: \"ws\",\n        cliType: \"boolean\"\n    },\n    wsBinary: {\n        normalize,\n        cliDescription: \"Whether or not websockets should response with binary data (ArrayBuffers) or strings.\",\n        default: () => \"auto\",\n        cliChoices: [\"true\", \"false\", \"auto\"]\n    },\n    rpcEndpoint: {\n        normalize,\n        cliDescription: \"Defines the endpoint route the HTTP and WebSocket servers will listen on.\",\n        default: (config, flavor) => {\n            switch (flavor) {\n                case flavors_1.FilecoinFlavorName:\n                    return \"/rpc/v0\";\n                case flavors_1.DefaultFlavor:\n                default:\n                    return \"/\";\n            }\n        },\n        defaultDescription: '\"/\" (Ethereum), \"/rpc/v0\" (Filecoin)'\n    }\n};\n//# sourceMappingURL=server-options.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _options, _providerOptions, _status, _app_1, _httpServer, _listenSocket_1, _connector, _websocketServer, _initializer;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = exports._DefaultServerOptions = exports.ServerStatus = void 0;\nconst options_1 = require(\"./options\");\nconst promise_allsettled_1 = __importDefault(require(\"promise.allsettled\"));\n// This `shim()` is necessary for `Promise.allSettled` to be shimmed\n// in `node@10`. We cannot use `allSettled([...])` directly due to\n// https://github.com/es-shims/Promise.allSettled/issues/5 without\n// upgrading Typescript. TODO: if Typescript is upgraded to 4.2.3+\n// then this line could be removed and `Promise.allSettled` below\n// could replaced with `allSettled`.\npromise_allsettled_1.default.shim();\nconst aggregate_error_1 = __importDefault(require(\"aggregate-error\"));\nconst uws_js_unofficial_1 = require(\"@trufflesuite/uws-js-unofficial\");\n// Set the \"silent\" config option so we don't output the \"uwebsockets\" header\n// we check for truthiness because `uws` is omitted from the browser build\nuws_js_unofficial_1._cfg && uws_js_unofficial_1._cfg(new Uint8Array([115, 105, 108, 101, 110, 116]));\nconst flavors_1 = require(\"@ganache/flavors\");\nconst connector_loader_1 = __importDefault(require(\"./connector-loader\"));\nconst ws_server_1 = __importDefault(require(\"./servers/ws-server\"));\nconst http_server_1 = __importDefault(require(\"./servers/http-server\"));\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst DEFAULT_HOST = \"127.0.0.1\";\n/**\n * Server ready state constants.\n *\n * These are bit flags. This means that you can check if the status is:\n *  * ready: `status === Status.ready` or `status & Status.ready !== 0`\n *  * opening: `status === Status.opening` or `status & Status.opening !== 0`\n *  * open: `status === Status.open` or `status & Status.open !== 0`\n *  * opening || open: `status & Status.openingOrOpen !== 0` or `status & (Status.opening | Status.open) !== 0`\n *  * closing: `status === Status.closing` or `status & Status.closing !== 0`\n *  * closed: `status === Status.closed` or `status & Status.closed !== 0`\n *  * closing || closed: `status & Status.closingOrClosed !== 0` or `status & (Status.closing | Status.closed) !== 0`\n */\nvar ServerStatus;\n(function (ServerStatus) {\n    /**\n     * The Server is in an unknown state; perhaps construction didn't succeed\n     */\n    ServerStatus[ServerStatus[\"unknown\"] = 0] = \"unknown\";\n    /**\n     * The Server has been constructed and is ready to be opened.\n     */\n    ServerStatus[ServerStatus[\"ready\"] = 1] = \"ready\";\n    /**\n     * The Server has started to open, but has not yet finished initialization.\n     */\n    ServerStatus[ServerStatus[\"opening\"] = 2] = \"opening\";\n    /**\n     * The Server is open and ready for connection.\n     */\n    ServerStatus[ServerStatus[\"open\"] = 4] = \"open\";\n    /**\n     * The Server is either opening or is already open\n     */\n    ServerStatus[ServerStatus[\"openingOrOpen\"] = 6] = \"openingOrOpen\";\n    /**\n     * The Server is in the process of closing.\n     */\n    ServerStatus[ServerStatus[\"closing\"] = 8] = \"closing\";\n    /**\n     * The Server is closed and not accepting new connections.\n     */\n    ServerStatus[ServerStatus[\"closed\"] = 16] = \"closed\";\n    /**\n     * The Server is either opening or is already open\n     */\n    ServerStatus[ServerStatus[\"closingOrClosed\"] = 24] = \"closingOrClosed\";\n})(ServerStatus = exports.ServerStatus || (exports.ServerStatus = {}));\n/**\n * For private use. May change in the future.\n * I don't don't think these options should be held in this `core` package.\n * @ignore\n */\nexports._DefaultServerOptions = options_1.serverDefaults;\n/**\n * @public\n */\nclass Server extends emittery_1.default {\n    constructor(providerAndServerOptions = {\n        flavor: flavors_1.DefaultFlavor\n    }) {\n        super();\n        _options.set(this, void 0);\n        _providerOptions.set(this, void 0);\n        _status.set(this, ServerStatus.unknown);\n        _app_1.set(this, null);\n        _httpServer.set(this, null);\n        _listenSocket_1.set(this, null);\n        _connector.set(this, void 0);\n        _websocketServer.set(this, null);\n        _initializer.set(this, void 0);\n        __classPrivateFieldSet(this, _options, options_1.serverOptionsConfig.normalize(providerAndServerOptions));\n        __classPrivateFieldSet(this, _providerOptions, providerAndServerOptions);\n        __classPrivateFieldSet(this, _status, ServerStatus.ready);\n        // we need to start initializing now because `initialize` sets the\n        // `provider` property... and someone might want to do:\n        //   const server = Ganache.server();\n        //   const provider = server.provider;\n        //   await server.listen(8545)\n        const loader = connector_loader_1.default.initialize(__classPrivateFieldGet(this, _providerOptions));\n        const connector = (__classPrivateFieldSet(this, _connector, loader.connector));\n        // Since the ConnectorLoader starts an async promise that we intentionally\n        // don't await yet we keep the promise around for something else to handle\n        // later.\n        __classPrivateFieldSet(this, _initializer, Promise.all([\n            loader.promise,\n            this.initialize(connector)\n        ]));\n    }\n    get provider() {\n        return __classPrivateFieldGet(this, _connector).provider;\n    }\n    get status() {\n        return __classPrivateFieldGet(this, _status);\n    }\n    async initialize(connector) {\n        const _app = (__classPrivateFieldSet(this, _app_1, uws_js_unofficial_1.App()));\n        if (__classPrivateFieldGet(this, _options).server.ws) {\n            __classPrivateFieldSet(this, _websocketServer, new ws_server_1.default(_app, connector, __classPrivateFieldGet(this, _options).server));\n        }\n        __classPrivateFieldSet(this, _httpServer, new http_server_1.default(_app, connector, __classPrivateFieldGet(this, _options).server));\n        await connector.once(\"ready\");\n    }\n    listen(port, host, callback) {\n        let hostname = null;\n        if (typeof host === \"function\") {\n            callback = host;\n            hostname = null;\n        }\n        const callbackIsFunction = typeof callback === \"function\";\n        const status = __classPrivateFieldGet(this, _status);\n        if (status === ServerStatus.closing) {\n            // if closing\n            const err = new Error(`Cannot start server while it is closing.`);\n            return callbackIsFunction\n                ? process.nextTick(callback, err)\n                : Promise.reject(err);\n        }\n        else if ((status & ServerStatus.openingOrOpen) !== 0) {\n            // if opening or open\n            const err = new Error(`Server is already open, or is opening, on port: ${port}.`);\n            return callbackIsFunction\n                ? process.nextTick(callback, err)\n                : Promise.reject(err);\n        }\n        __classPrivateFieldSet(this, _status, ServerStatus.opening);\n        const promise = Promise.allSettled([\n            __classPrivateFieldGet(this, _initializer),\n            new Promise((resolve) => {\n                // Make sure we have *exclusive* use of this port.\n                // https://github.com/uNetworking/uSockets/commit/04295b9730a4d413895fa3b151a7337797dcb91f#diff-79a34a07b0945668e00f805838601c11R51\n                const LIBUS_LISTEN_EXCLUSIVE_PORT = 1;\n                hostname\n                    ? __classPrivateFieldGet(this, _app_1).listen(hostname, port, LIBUS_LISTEN_EXCLUSIVE_PORT, resolve)\n                    : __classPrivateFieldGet(this, _app_1).listen(port, LIBUS_LISTEN_EXCLUSIVE_PORT, resolve);\n            }).then(listenSocket => {\n                if (listenSocket) {\n                    __classPrivateFieldSet(this, _status, ServerStatus.open);\n                    __classPrivateFieldSet(this, _listenSocket_1, listenSocket);\n                }\n                else {\n                    __classPrivateFieldSet(this, _status, ServerStatus.closed);\n                    const err = new Error(`listen EADDRINUSE: address already in use ${hostname || DEFAULT_HOST}:${port}.`);\n                    throw err;\n                }\n            })\n        ]).then(async (promiseResults) => {\n            const errors = [];\n            if (promiseResults[0].status === \"rejected\") {\n                errors.push(promiseResults[0].reason);\n            }\n            if (promiseResults[1].status === \"rejected\") {\n                errors.push(promiseResults[1].reason);\n            }\n            if (errors.length === 0) {\n                this.emit(\"open\");\n            }\n            else {\n                __classPrivateFieldSet(this, _status, ServerStatus.unknown);\n                try {\n                    await this.close();\n                }\n                catch (e) {\n                    errors.push(e);\n                }\n                if (errors.length > 1) {\n                    throw new aggregate_error_1.default(errors);\n                }\n                else {\n                    throw errors[0];\n                }\n            }\n        });\n        if (callbackIsFunction) {\n            promise.then(() => callback(null)).catch(callback);\n        }\n        else {\n            return promise;\n        }\n    }\n    async close() {\n        if (__classPrivateFieldGet(this, _status) === ServerStatus.opening) {\n            // if opening\n            throw new Error(`Cannot close server while it is opening.`);\n        }\n        else if ((__classPrivateFieldGet(this, _status) & ServerStatus.closingOrClosed) !== 0) {\n            // if closing or closed\n            throw new Error(`Server is already closing or closed.`);\n        }\n        __classPrivateFieldSet(this, _status, ServerStatus.closing);\n        // clean up the websocket objects\n        const _listenSocket = __classPrivateFieldGet(this, _listenSocket_1);\n        __classPrivateFieldSet(this, _listenSocket_1, null);\n        // close the socket to prevent any more connections\n        if (_listenSocket !== null) {\n            uws_js_unofficial_1.us_listen_socket_close(_listenSocket);\n        }\n        // close all the connected websockets:\n        if (__classPrivateFieldGet(this, _websocketServer) !== null) {\n            __classPrivateFieldGet(this, _websocketServer).close();\n        }\n        // and do all http cleanup, if any\n        if (__classPrivateFieldGet(this, _httpServer) !== null) {\n            __classPrivateFieldGet(this, _httpServer).close();\n        }\n        // cleanup the connector, provider, etc.\n        if (__classPrivateFieldGet(this, _connector) !== null) {\n            await __classPrivateFieldGet(this, _connector).close();\n        }\n        __classPrivateFieldSet(this, _status, ServerStatus.closed);\n        __classPrivateFieldSet(this, _app_1, null);\n        await this.emit(\"close\");\n    }\n}\nexports.Server = Server;\n_options = new WeakMap(), _providerOptions = new WeakMap(), _status = new WeakMap(), _app_1 = new WeakMap(), _httpServer = new WeakMap(), _listenSocket_1 = new WeakMap(), _connector = new WeakMap(), _websocketServer = new WeakMap(), _initializer = new WeakMap();\nexports.default = Server;\n//# sourceMappingURL=server.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _connector, _handlePost, _handleOptions;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst content_types_1 = __importDefault(require(\"./utils/content-types\"));\nconst http_response_codes_1 = __importDefault(require(\"./utils/http-response-codes\"));\nconst util_1 = require(\"util\");\nconst noop = () => { };\n/**\n * uWS doesn't let us use the request after the request method has completed.\n * But we can't set headers until after the statusCode is set. But we don't\n * know the status code until the provider returns asynchronously.\n * So this does request-related work immediately and returns a function to do the\n * rest of the work later.\n * @param method\n * @param request\n */\nfunction prepareCORSResponseHeaders(method, request) {\n    // https://fetch.spec.whatwg.org/#http-requests\n    const origin = request.getHeader(\"origin\");\n    const acrh = request.getHeader(\"access-control-request-headers\");\n    return (response) => {\n        const isCORSRequest = origin !== \"\";\n        if (isCORSRequest) {\n            // OPTIONS preflight requests need a little extra treatment\n            if (method === \"OPTIONS\") {\n                // we only allow POST requests, so it doesn't matter which method the request is asking for\n                response.writeHeader(\"Access-Control-Allow-Methods\", \"POST\");\n                // echo all requested access-control-request-headers back to the response\n                if (acrh !== \"\") {\n                    response.writeHeader(\"Access-Control-Allow-Headers\", acrh);\n                }\n                // Make browsers and compliant clients cache the OPTIONS preflight response for 10\n                // minutes (this is the maximum time Chromium allows)\n                response.writeHeader(\"Access-Control-Max-Age\", \"600\"); // seconds\n            }\n            // From the spec: https://fetch.spec.whatwg.org/#http-responses\n            // \"For a CORS-preflight request, request’s credentials mode is always \"omit\",\n            // but for any subsequent CORS requests it might not be. Support therefore\n            // needs to be indicated as part of the HTTP response to the CORS-preflight request as well.\", so this\n            // header is added to all requests.\n            // Additionally, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials,\n            // states that there aren't any HTTP Request headers that indicate you whether or not Request.withCredentials\n            // is set. Because web3@1.0.0-beta.35-? always sets `request.withCredentials = true` while Safari requires it be\n            // returned even when no credentials are set in the browser this header must always be return on all requests.\n            // (I've found that Chrome and Firefox don't actually require the header when credentials aren't set)\n            //  Regression Commit: https://github.com/ethereum/web3.js/pull/1722\n            //  Open Web3 Issue: https://github.com/ethereum/web3.js/issues/1802\n            response.writeHeader(\"Access-Control-Allow-Credentials\", \"true\");\n            // From the spec: \"It cannot be reliably identified as participating in the CORS protocol\n            // as the `Origin` header is also included for all requests whose method is neither\n            // `GET` nor `HEAD`.\"\n            // Explicitly set the origin instead of using *, since credentials\n            // can't be used in conjunction with *. This will always be set\n            /// for valid preflight requests.\n            response.writeHeader(\"Access-Control-Allow-Origin\", origin);\n        }\n    };\n}\nfunction sendResponse(response, statusCode, contentType, data, writeHeaders = noop) {\n    response.cork(() => {\n        response.writeStatus(statusCode);\n        writeHeaders(response);\n        if (contentType != null) {\n            response.writeHeader(\"Content-Type\", contentType);\n        }\n        if (data != null) {\n            response.end(data);\n        }\n        else {\n            response.end();\n        }\n    });\n}\nclass HttpServer {\n    constructor(app, connector, options) {\n        _connector.set(this, void 0);\n        _handlePost.set(this, (response, request) => {\n            // handle JSONRPC post requests...\n            const writeHeaders = prepareCORSResponseHeaders(\"POST\", request);\n            // TODO(perf): pre-allocate the buffer if we know the Content-Length\n            let buffer;\n            let aborted = false;\n            response.onAborted(() => {\n                aborted = true;\n            });\n            response.onData((message, isLast) => {\n                const chunk = Buffer.from(message);\n                if (isLast) {\n                    // we have to use any here because typescript isn't smart enough\n                    // to understand the ambiguity of RequestFormat and ReturnType\n                    // on the Connector interface must match up appropriately\n                    const connector = __classPrivateFieldGet(this, _connector);\n                    let payload;\n                    try {\n                        const message = buffer\n                            ? Buffer.concat([buffer, chunk], buffer.length + chunk.length)\n                            : chunk;\n                        payload = connector.parse(message);\n                    }\n                    catch (e) {\n                        sendResponse(response, http_response_codes_1.default.BAD_REQUEST, content_types_1.default.PLAIN, \"400 Bad Request: \" + e.message, writeHeaders);\n                        return;\n                    }\n                    connector\n                        .handle(payload, request)\n                        .then(({ value }) => value)\n                        .then(result => {\n                        if (aborted) {\n                            // if the request has been aborted don't try sending (it'll\n                            // cause an `Unhandled promise rejection` if we try)\n                            return;\n                        }\n                        const data = connector.format(result, payload);\n                        if (util_1.types.isGeneratorObject(data)) {\n                            response.cork(() => {\n                                response.writeStatus(http_response_codes_1.default.OK);\n                                writeHeaders(response);\n                                response.writeHeader(\"Content-Type\", content_types_1.default.JSON);\n                                for (const datum of data) {\n                                    response.write(datum);\n                                }\n                                response.end();\n                            });\n                        }\n                        else {\n                            sendResponse(response, http_response_codes_1.default.OK, content_types_1.default.JSON, data, writeHeaders);\n                        }\n                    })\n                        .catch(error => {\n                        if (aborted) {\n                            // if the request has been aborted don't try sending (it'll\n                            // cause an `Unhandled promise rejection` if we try)\n                            return;\n                        }\n                        const data = connector.formatError(error, payload);\n                        sendResponse(response, http_response_codes_1.default.OK, content_types_1.default.JSON, data, writeHeaders);\n                    });\n                }\n                else {\n                    if (buffer) {\n                        buffer = Buffer.concat([buffer, chunk], buffer.length + chunk.length);\n                    }\n                    else {\n                        buffer = Buffer.concat([chunk], chunk.length);\n                    }\n                }\n            });\n        });\n        _handleOptions.set(this, (response, request) => {\n            // handle CORS preflight requests...\n            const writeHeaders = prepareCORSResponseHeaders(\"OPTIONS\", request);\n            // OPTIONS responses don't have a body, so respond with `204 No Content`...\n            sendResponse(response, http_response_codes_1.default.NO_CONTENT, null, null, writeHeaders);\n        });\n        __classPrivateFieldSet(this, _connector, connector);\n        // JSON-RPC routes...\n        app\n            .post(options.rpcEndpoint, __classPrivateFieldGet(this, _handlePost))\n            .options(options.rpcEndpoint, __classPrivateFieldGet(this, _handleOptions));\n        // because Easter Eggs are fun...\n        app.get(\"/418\", response => {\n            sendResponse(response, http_response_codes_1.default.IM_A_TEAPOT, content_types_1.default.PLAIN, \"418 I'm a teapot\");\n        });\n        // fallback routes...\n        app.any(\"/*\", (response, request) => {\n            const connectionHeader = request.getHeader(\"connection\");\n            if (connectionHeader && connectionHeader.toLowerCase() === \"upgrade\") {\n                // if we got here it means the websocket server wasn't enabled but\n                // a client tried to connect via websocket. This is a Bad Request.\n                sendResponse(response, http_response_codes_1.default.BAD_REQUEST, content_types_1.default.PLAIN, \"400 Bad Request\");\n            }\n            else {\n                // all other requests don't mean anything to us, so respond with `404 Not Found`...\n                sendResponse(response, http_response_codes_1.default.NOT_FOUND, content_types_1.default.PLAIN, \"404 Not Found\");\n            }\n        });\n    }\n    close() {\n        // currently a no op.\n    }\n}\nexports.default = HttpServer;\n_connector = new WeakMap(), _handlePost = new WeakMap(), _handleOptions = new WeakMap();\n//# sourceMappingURL=http-server.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ContentTypes;\n(function (ContentTypes) {\n    ContentTypes[\"PLAIN\"] = \"text/plain\";\n    ContentTypes[\"JSON\"] = \"application/json\";\n})(ContentTypes || (ContentTypes = {}));\nexports.default = ContentTypes;\n//# sourceMappingURL=content-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HttpResponseCodes;\n(function (HttpResponseCodes) {\n    HttpResponseCodes[\"OK\"] = \"200\";\n    HttpResponseCodes[\"NO_CONTENT\"] = \"204\";\n    HttpResponseCodes[\"BAD_REQUEST\"] = \"400\";\n    HttpResponseCodes[\"NOT_FOUND\"] = \"404\";\n    HttpResponseCodes[\"METHOD_NOT_ALLOWED\"] = \"405\";\n    HttpResponseCodes[\"IM_A_TEAPOT\"] = \"418\";\n})(HttpResponseCodes || (HttpResponseCodes = {}));\nexports.default = HttpResponseCodes;\n//# sourceMappingURL=http-response-codes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar WebSocketCloseCodes;\n(function (WebSocketCloseCodes) {\n    /**\n     * Normal closure; the connection successfully completed whatever purpose for\n     * which it was created.\n     */\n    WebSocketCloseCodes[WebSocketCloseCodes[\"CLOSE_NORMAL\"] = 1000] = \"CLOSE_NORMAL\";\n    /**\n     * Indicates that an endpoint is \"going away\", such as a server going down or\n     * a browser having navigated away from a page.\n     */\n    // CLOSE_GOING_AWAY = 1001\n    // CLOSE_PROTOCOL_ERROR = 1002,\n    // CLOSE_ABNORMAL = 1006\n})(WebSocketCloseCodes || (WebSocketCloseCodes = {}));\nexports.default = WebSocketCloseCodes;\n//# sourceMappingURL=websocket-close-codes.js.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _connections;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MAX_PAYLOAD_SIZE = void 0;\nconst websocket_close_codes_1 = __importDefault(require(\"./utils/websocket-close-codes\"));\nconst util_1 = require(\"util\");\n// matches geth's limit of 15 MebiBytes: https://github.com/ethereum/go-ethereum/blob/3526f690478482a02a152988f4d31074c176b136/rpc/websocket.go#L40\nexports.MAX_PAYLOAD_SIZE = 15 * 1024 * 1024;\nclass WebsocketServer {\n    constructor(app, connector, options) {\n        _connections.set(this, new Map());\n        const connections = __classPrivateFieldGet(this, _connections);\n        const wsBinary = options.wsBinary;\n        const autoBinary = wsBinary === \"auto\";\n        app.ws(options.rpcEndpoint, {\n            /* WS Options */\n            maxPayloadLength: exports.MAX_PAYLOAD_SIZE,\n            idleTimeout: 120,\n            // Note that compression is disabled (the default option)\n            // due to not being able to link against electron@12\n            // with compression included\n            /* Handlers */\n            open: (ws) => {\n                ws.closed = false;\n                connections.set(ws, new Set());\n            },\n            message: async (ws, message, isBinary) => {\n                // We have to use type any instead of ReturnType<typeof connector.parse>\n                // on `payload` because Typescript isn't smart enough to understand the\n                // ambiguity doesn't actually exist\n                let payload;\n                const useBinary = autoBinary ? isBinary : wsBinary;\n                try {\n                    payload = connector.parse(Buffer.from(message));\n                }\n                catch (err) {\n                    const response = connector.formatError(err, payload);\n                    ws.send(response, useBinary);\n                    return;\n                }\n                let data;\n                try {\n                    const { value } = await connector.handle(payload, ws);\n                    // The socket may have closed while we were waiting for the response\n                    // Don't bother trying to send to it if it was.\n                    if (ws.closed)\n                        return;\n                    const resultEmitter = value;\n                    const result = await resultEmitter;\n                    if (ws.closed)\n                        return;\n                    data = connector.format(result, payload);\n                    // if the result is an emitter listen to its `\"message\"` event\n                    // We check if `on` is a function rather than check if\n                    // `resultEmitter instanceof PromiEvent` because `@ganache/filecoin`\n                    // and `ganache` webpack `@ganache/utils` separately. This causes\n                    // instanceof to fail here. Since we know `resultEmitter` is MergePromiseT\n                    // we can safely assume that if `on` is a function, then we have a PromiEvent\n                    if (typeof resultEmitter[\"on\"] === \"function\") {\n                        const resultEmitterPromiEvent = resultEmitter;\n                        resultEmitterPromiEvent.on(\"message\", (result) => {\n                            // note: we _don't_ need to check if `ws.closed` here because when\n                            // `ws.closed` is set we remove this event handler anyway.\n                            const message = JSON.stringify({\n                                jsonrpc: \"2.0\",\n                                method: result.type,\n                                params: result.data\n                            });\n                            ws.send(message, isBinary);\n                        });\n                        // keep track of listeners to dispose off when the ws disconnects\n                        connections.get(ws).add(resultEmitterPromiEvent.dispose);\n                    }\n                }\n                catch (err) {\n                    // ensure the connector's `handle` fn doesn't throw outside of a Promise\n                    if (ws.closed)\n                        return;\n                    data = connector.formatError(err, payload);\n                }\n                if (util_1.types.isGeneratorObject(data)) {\n                    const localData = data;\n                    ws.cork(() => {\n                        const { value: first } = localData.next();\n                        // get the second fragment, if there is one\n                        // Note: we lag behind by one fragment because the last fragment\n                        // needs to be sent via the `sendLastFragment` method.\n                        // This value acts as a lookahead so we know if we are at the last\n                        // value or not.\n                        let { value: next, done } = localData.next();\n                        // if there wasn't a second fragment, just send it the usual way.\n                        if (done) {\n                            ws.send(first, useBinary);\n                        }\n                        else {\n                            // fragment send: https://github.com/uNetworking/uWebSockets.js/issues/635\n                            const shouldCompress = false;\n                            // send the first fragment\n                            ws.sendFirstFragment(first, useBinary, shouldCompress);\n                            // Now send the rest of the data piece by piece.\n                            let prev = next;\n                            for (next of localData) {\n                                ws.sendFragment(prev, shouldCompress);\n                                prev = next;\n                            }\n                            // finally, send the last fragment\n                            ws.sendLastFragment(next, shouldCompress);\n                        }\n                    });\n                }\n                else {\n                    ws.send(data, useBinary);\n                }\n            },\n            drain: (ws) => {\n                // This is there so tests can detect if a small amount of backpressure\n                // is happening and that things will still work if it does. We actually\n                // don't do anything to manage excessive backpressure.\n                // TODO: handle back pressure for real!\n                // options.logger.log(\"WebSocket backpressure: \" + ws.getBufferedAmount());\n            },\n            close: (ws) => {\n                ws.closed = true;\n                connections.get(ws).forEach(dispose => dispose());\n                connections.delete(ws);\n            }\n        });\n    }\n    close() {\n        __classPrivateFieldGet(this, _connections).forEach((_, ws) => ws.end(websocket_close_codes_1.default.CLOSE_NORMAL, \"Server closed by client\"));\n    }\n}\nexports.default = WebsocketServer;\n_connections = new WeakMap();\n//# sourceMappingURL=ws-server.js.map","var map = {\n\t\"./uws_darwin_arm64_102.node\": 607,\n\t\"./uws_darwin_arm64_72.node\": 608,\n\t\"./uws_darwin_arm64_79.node\": 609,\n\t\"./uws_darwin_arm64_83.node\": 610,\n\t\"./uws_darwin_arm64_88.node\": 611,\n\t\"./uws_darwin_arm64_93.node\": 612,\n\t\"./uws_darwin_x64_102.node\": 613,\n\t\"./uws_darwin_x64_72.node\": 614,\n\t\"./uws_darwin_x64_79.node\": 615,\n\t\"./uws_darwin_x64_83.node\": 616,\n\t\"./uws_darwin_x64_88.node\": 617,\n\t\"./uws_darwin_x64_93.node\": 618,\n\t\"./uws_linux_x64_102.node\": 619,\n\t\"./uws_linux_x64_72.node\": 620,\n\t\"./uws_linux_x64_79.node\": 621,\n\t\"./uws_linux_x64_83.node\": 622,\n\t\"./uws_linux_x64_88.node\": 623,\n\t\"./uws_linux_x64_93.node\": 624,\n\t\"./uws_win32_x64_102.node\": 625,\n\t\"./uws_win32_x64_83.node\": 626,\n\t\"./uws_win32_x64_88.node\": 627,\n\t\"./uws_win32_x64_93.node\": 628\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 859;","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetConnector = exports.DefaultOptionsByName = exports.DefaultFlavor = exports.FilecoinFlavorName = exports.EthereumFlavorName = void 0;\nconst ethereum_1 = require(\"@ganache/ethereum\");\nconst ethereum_options_1 = require(\"@ganache/ethereum-options\");\nconst filecoin_options_1 = require(\"@ganache/filecoin-options\");\nconst colors_1 = require(\"@ganache/colors\");\nconst chalk_1 = __importDefault(require(\"chalk\"));\n// we need \"@ganache/options\" in order for TS to properly infer types for `DefaultOptionsByName`\nrequire(\"@ganache/options\");\nconst NEED_HELP = \"Need help? Reach out to the Truffle community at\";\nconst COMMUNITY_LINK = \"https://trfl.io/support\";\nexports.EthereumFlavorName = \"ethereum\";\nexports.FilecoinFlavorName = \"filecoin\";\nexports.DefaultFlavor = exports.EthereumFlavorName;\nexports.DefaultOptionsByName = {\n    [exports.EthereumFlavorName]: ethereum_options_1.EthereumDefaults,\n    [exports.FilecoinFlavorName]: filecoin_options_1.FilecoinDefaults\n};\nfunction GetConnector(flavor, providerOptions, executor) {\n    if (flavor === exports.DefaultFlavor) {\n        return new ethereum_1.Connector(providerOptions, executor);\n    }\n    try {\n        switch (flavor) {\n            case exports.FilecoinFlavorName: {\n                flavor = \"@ganache/filecoin\";\n                // TODO: remove the `typeof f.default != \"undefined\" ? ` check once the\n                // published filecoin plugin is updated to\n                const f = eval(\"require\")(flavor);\n                const Connector = typeof f.default != \"undefined\" ? f.default.Connector : f.Connector;\n                // @ts-ignore\n                return new Connector(providerOptions, executor);\n            }\n            default: {\n                // for future plugin compat\n                const { Connector } = require(flavor);\n                return new Connector(providerOptions, executor);\n            }\n        }\n    }\n    catch (e) {\n        if (e.message.includes(`Cannot find module '${flavor}'`)) {\n            // we print and exit rather than throw to prevent webpack output from being\n            // spat out for the line number\n            console.warn(chalk_1.default `\\n\\n{red.bold ERROR:} Could not find Ganache flavor \"{bold filecoin}\" (${flavor}); ` +\n                `it probably\\nneeds to be installed.\\n` +\n                ` ▸ if you're using Ganache as a library run: \\n` +\n                chalk_1.default `   {blue.bold $ npm install ${flavor}}\\n` +\n                ` ▸ if you're using Ganache as a CLI run: \\n` +\n                chalk_1.default `   {blue.bold $ npm install --global ${flavor}}\\n\\n` +\n                chalk_1.default `{hex(\"${colors_1.TruffleColors.porsche}\").bold ${NEED_HELP}}\\n` +\n                chalk_1.default `{hex(\"${colors_1.TruffleColors.turquoise}\") ${COMMUNITY_LINK}}\\n\\n`);\n            process.exit(1);\n        }\n        else {\n            throw e;\n        }\n    }\n}\nexports.GetConnector = GetConnector;\n//# sourceMappingURL=index.js.map","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 850;\nmodule.exports = webpackEmptyContext;","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/base\"), exports);\n__exportStar(require(\"./src/exclusive\"), exports);\n__exportStar(require(\"./src/definition\"), exports);\n__exportStar(require(\"./src/create\"), exports);\n__exportStar(require(\"./src/constants\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=base.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeterministicSeedPhrase = void 0;\n// Don't change! We need maintain original determinism since the beginning\nexports.DeterministicSeedPhrase = \"TestRPC is awesome!\";\n//# sourceMappingURL=constants.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _defaults, _namespaces;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OptionsConfig = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst checkForConflicts = (name, namespace, suppliedOptions, conflicts) => {\n    if (!conflicts)\n        return;\n    for (const conflict of conflicts) {\n        if (suppliedOptions.has(conflict)) {\n            throw new Error(`Values for both \"${namespace}.${name}\" and ` +\n                `\"${namespace}.${conflict}\" cannot ` +\n                `be specified; they are mutually exclusive.`);\n        }\n    }\n};\nfunction fill(defaults, options, target, namespace) {\n    const def = defaults[namespace];\n    const config = (target[namespace] = target[namespace] || {});\n    const flavor = options.flavor;\n    const suppliedOptions = new Set();\n    const keys = Object.keys(def);\n    if (utils_1.hasOwn(options, namespace)) {\n        const namespaceOptions = options[namespace];\n        for (let i = 0, l = keys.length; i < l; i++) {\n            const key = keys[i];\n            const propDefinition = def[key];\n            let value = namespaceOptions[key];\n            if (value !== undefined) {\n                checkForConflicts(key, namespace, suppliedOptions, propDefinition.conflicts);\n                const normalized = propDefinition.normalize(namespaceOptions[key]);\n                config[key] = normalized;\n                suppliedOptions.add(key);\n            }\n            else {\n                const legacyName = propDefinition.legacyName || key;\n                value = options[legacyName];\n                if (value !== undefined) {\n                    checkForConflicts(key, namespace, suppliedOptions, propDefinition.conflicts);\n                    const normalized = propDefinition.normalize(value);\n                    config[key] = normalized;\n                    suppliedOptions.add(key);\n                }\n                else if (utils_1.hasOwn(propDefinition, \"default\")) {\n                    config[key] = propDefinition.default(config, flavor);\n                }\n            }\n        }\n    }\n    else {\n        for (let i = 0, l = keys.length; i < l; i++) {\n            const key = keys[i];\n            const propDefinition = def[key];\n            const legacyName = propDefinition.legacyName || key;\n            const value = options[legacyName];\n            if (value !== undefined) {\n                checkForConflicts(key, namespace, suppliedOptions, propDefinition.conflicts);\n                const normalized = propDefinition.normalize(value);\n                config[key] = normalized;\n                suppliedOptions.add(key);\n            }\n            else if (utils_1.hasOwn(propDefinition, \"default\")) {\n                config[key] = propDefinition.default(config, flavor);\n            }\n        }\n    }\n}\nclass OptionsConfig {\n    constructor(defaults) {\n        _defaults.set(this, void 0);\n        _namespaces.set(this, void 0);\n        __classPrivateFieldSet(this, _defaults, defaults);\n        __classPrivateFieldSet(this, _namespaces, Object.keys(defaults));\n    }\n    normalize(options) {\n        const defaults = __classPrivateFieldGet(this, _defaults);\n        const out = {};\n        __classPrivateFieldGet(this, _namespaces).forEach(namespace => {\n            fill(defaults, options, out, namespace);\n        });\n        return out;\n    }\n}\nexports.OptionsConfig = OptionsConfig;\n_defaults = new WeakMap(), _namespaces = new WeakMap();\n//# sourceMappingURL=create.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//#endregion Definition helpers\n//# sourceMappingURL=definition.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//#endregion\n//# sourceMappingURL=exclusive.js.map","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _queue, _tryResolve, _tryResolveChain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst entry_1 = __importDefault(require(\"./src/entry\"));\nconst emitteryMethods = [\"emit\", \"once\"];\n/**\n * Creates a FIFO queue that ensures promises are _resolved_ in the order\n * they were added.\n *\n * This is different than a FIFO queue that _executes_ functions that\n * return promises; this queue is for the promises themselves.\n *\n * @example\n * ```javascript\n * const queue = new PromiseQueue();\n *\n * const slow = new Promise(resolve => setTimeout(resolve, 1000, \"slow\"));\n * const fast = Promise.resolve(\"fast\");\n *\n * await Promise.race([\n *   queue.add(slow),\n *   queue.add(fast)\n * ]); // returns \"slow\"\n *\n * // Additionally, the queued promise chain can be cleared via `queue.clear(value)`.\n * // This will cause the chain of promises to all resolve immediately with the\n * // given value. *\n * //\n * // * note: whatever the promise starting doing when it was created will still\n * // happen, no promises are aborted; rather, the return value is ignored.\n * ```\n */\nlet PromiseQueue = class PromiseQueue {\n    constructor() {\n        // TODO(perf): a singly linked list is probably a better option here\n        _queue.set(this, []);\n        _tryResolve.set(this, (queue, entry) => {\n            // if this is now the highest priority entry, resolve the outer\n            // Promise\n            if (entry === queue[0]) {\n                queue.shift();\n                entry.resolve(entry.value);\n                // then try resolving the rest\n                __classPrivateFieldGet(this, _tryResolveChain).call(this, queue);\n            }\n            else {\n                entry.resolved = true;\n            }\n        });\n        /**\n         * Removes all _resolved_ promises from the front of the chain of promises.\n         */\n        _tryResolveChain.set(this, (queue) => {\n            let first = queue[0];\n            while (first && first.resolved) {\n                queue.shift();\n                first.resolve(first.value);\n                first = queue[0];\n            }\n            // if there is nothing left to do emit `\"idle\"`\n            if (queue.length === 0) {\n                this.emit(\"idle\");\n            }\n        });\n    }\n    /**\n     * Returns true if there are promises pending in the queue\n     */\n    isBusy() {\n        return __classPrivateFieldGet(this, _queue).length !== 0;\n    }\n    /**\n     * Adds the promise to the end of the queue.\n     * @param promise\n     * @returns a promise that resolves with the given promise's result. If the\n     * queue was `clear`ed before the promise could be shifted off the return\n     * value will be the `value` passed to `clear`.\n     */\n    add(promise) {\n        const queue = __classPrivateFieldGet(this, _queue);\n        const entry = new entry_1.default(promise, queue, __classPrivateFieldGet(this, _tryResolve));\n        queue.push(entry);\n        return entry.promise;\n    }\n    /**\n     * Clears all promises from the queue and sets their resolved values to the\n     * given value.\n     */\n    clear(value) {\n        // remove all entrys from the queue and mark them.\n        const cancelledQueue = __classPrivateFieldGet(this, _queue).splice(0);\n        cancelledQueue.forEach(entry => {\n            entry.queue = cancelledQueue;\n            entry.value = value;\n        });\n    }\n};\n_queue = new WeakMap(), _tryResolve = new WeakMap(), _tryResolveChain = new WeakMap();\nPromiseQueue = __decorate([\n    emittery_1.default.mixin(Symbol.for(\"emittery\"), emitteryMethods)\n], PromiseQueue);\nexports.default = PromiseQueue;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Entry {\n    constructor(promise, queue, onSetteled) {\n        this.resolved = false;\n        this.value = promise;\n        this.queue = queue;\n        this.onSetteled = onSetteled;\n        const _onSetteled = () => this.onSetteled(this.queue, this);\n        promise.then(_onSetteled, _onSetteled);\n        this.promise = new Promise(resolve => {\n            this.resolve = resolve;\n        });\n    }\n}\nexports.default = Entry;\n//# sourceMappingURL=entry.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encodeLength = exports.encode = exports.digest = exports.encodeRange = exports.getLength = void 0;\nconst rlp_1 = require(\"rlp\");\nObject.defineProperty(exports, \"getLength\", { enumerable: true, get: function () { return rlp_1.getLength; } });\nconst utils_1 = require(\"@ganache/utils\");\n/**\n * Begin RLP encoding of `items`, from `start` until `length`. Call `RLP.digest` to\n * finish encoding.\n *\n * @param input\n **/\nfunction encodeRange(items, start, length) {\n    let count = 0;\n    const end = start + length;\n    const output = [];\n    for (var i = start; i < end; i++) {\n        const item = items[i];\n        const encoded = encode(item);\n        count += encoded.length;\n        output.push(encoded);\n    }\n    return { length: count, output };\n}\nexports.encodeRange = encodeRange;\n/**\n * Finishes encoding started by `encodeRange`.\n *\n * @param ranges\n * @returns returns a Buffer of encoded data\n */\nfunction digest(ranges, length) {\n    const encodedLength = encodeLength(length, 192);\n    const lengthEncodedLength = encodedLength.length;\n    const buf = Buffer.allocUnsafe(lengthEncodedLength + length);\n    encodedLength.copy(buf, 0, 0, lengthEncodedLength);\n    let offset = lengthEncodedLength;\n    for (let i = 0, l = ranges.length; i < l; i++) {\n        const range = ranges[i];\n        for (let j = 0, m = range.length; j < m; j++) {\n            const entry = range[j];\n            const size = entry.length;\n            entry.copy(buf, offset, 0, size);\n            offset += size;\n        }\n    }\n    return buf;\n}\nexports.digest = digest;\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * @param input\n * @returns returns a Buffer of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        let length = 0;\n        const output = [];\n        for (let i = 0, l = input.length; i < l; i++) {\n            const enc = encode(input[i]);\n            length += enc.length;\n            output.push(enc);\n        }\n        const buf = Buffer.concat(output, length);\n        const encodedLength = encodeLength(length, 192);\n        return Buffer.concat([encodedLength, buf], encodedLength.length + length);\n    }\n    else {\n        if (input == null) {\n            const buf = Buffer.allocUnsafe(1);\n            buf[0] = 128;\n            return buf;\n        }\n        else {\n            const length = input.length;\n            if (length === 1 && input[0] < 128) {\n                return input;\n            }\n            else {\n                const encLength = encodeLength(length, 128);\n                return Buffer.concat([encLength, input], encLength.length + length);\n            }\n        }\n    }\n}\nexports.encode = encode;\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        const buf = Buffer.allocUnsafe(1);\n        buf[0] = len + offset;\n        return buf;\n    }\n    else {\n        const hexLength = utils_1.uintToBuffer(len);\n        const lLength = hexLength.length;\n        const firstByte = utils_1.uintToBuffer(offset + 55 + lLength);\n        return Buffer.concat([firstByte, hexLength], firstByte.length + lLength);\n    }\n}\nexports.encodeLength = encodeLength;\nfunction decode(input) {\n    return rlp_1.decode(input);\n}\nexports.decode = decode;\n//# sourceMappingURL=index.js.map","\"use strict\";\n/*!\n * @ganache/secp256k1\n *\n * @author David Murdoch\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = require(\"path\");\nlet secp256k1;\ntry {\n    // TODO: find a better way :-)\n    // use `eval` to make `ganache`'s webpack ignore this\n    const nodeRequire = eval(\"require\");\n    const path = nodeRequire.resolve(\"secp256k1/package.json\");\n    const dir = path_1.dirname(path);\n    const nodeGypBuild = require(\"node-gyp-build\");\n    // load native secp256k1\n    const { Secp256k1 } = nodeGypBuild(dir);\n    secp256k1 = new Secp256k1();\n}\ncatch {\n    // on error use the JS fallback\n    secp256k1 = require(\"secp256k1/lib/elliptic\");\n}\nexports.default = secp256k1;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromiEvent = exports.JsonRpcErrorCode = exports.makeResponse = exports.makeRequest = exports.makeError = void 0;\n__exportStar(require(\"./src/types\"), exports);\n__exportStar(require(\"./src/utils\"), exports);\n__exportStar(require(\"./src/things/subscription\"), exports);\n__exportStar(require(\"./src/things/json-rpc/json-rpc-quantity\"), exports);\n__exportStar(require(\"./src/things/json-rpc/json-rpc-data\"), exports);\nvar jsonrpc_1 = require(\"./src/things/jsonrpc\");\nObject.defineProperty(exports, \"makeError\", { enumerable: true, get: function () { return jsonrpc_1.makeError; } });\nObject.defineProperty(exports, \"makeRequest\", { enumerable: true, get: function () { return jsonrpc_1.makeRequest; } });\nObject.defineProperty(exports, \"makeResponse\", { enumerable: true, get: function () { return jsonrpc_1.makeResponse; } });\nObject.defineProperty(exports, \"JsonRpcErrorCode\", { enumerable: true, get: function () { return jsonrpc_1.JsonRpcErrorCode; } });\nvar promievent_1 = require(\"./src/things/promievent\");\nObject.defineProperty(exports, \"PromiEvent\", { enumerable: true, get: function () { return __importDefault(promievent_1).default; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toBigIntBE = exports.toBufferBE = void 0;\nvar bigint_buffer_1 = require(\"@trufflesuite/bigint-buffer\");\nObject.defineProperty(exports, \"toBufferBE\", { enumerable: true, get: function () { return bigint_buffer_1.toBufferBE; } });\nObject.defineProperty(exports, \"toBigIntBE\", { enumerable: true, get: function () { return bigint_buffer_1.toBigIntBE; } });\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseJsonRpcType = exports.toBuffers = exports.toStrings = exports.bufCache = exports.strCache = void 0;\nconst utils_1 = require(\"../../utils\");\nconst utils_2 = require(\"../../utils\");\nconst constants_1 = require(\"../../utils/constants\");\nexports.strCache = new WeakMap();\nexports.bufCache = new WeakMap();\nexports.toStrings = new WeakMap();\nexports.toBuffers = new WeakMap();\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\nclass BaseJsonRpcType {\n    constructor(value) {\n        const self = this;\n        if (Buffer.isBuffer(value)) {\n            exports.toStrings.set(this, () => value.toString(\"hex\"));\n            exports.bufCache.set(this, value);\n            self[Symbol.toStringTag] = \"Buffer\";\n        }\n        else {\n            const type = typeof value;\n            switch (type) {\n                case \"number\":\n                    if (value % 1 !== 0) {\n                        throw new Error(\"`Cannot wrap a decimal value as a json-rpc type`\");\n                    }\n                    exports.toStrings.set(this, () => value.toString(16));\n                    exports.toBuffers.set(this, () => value === 0 ? constants_1.BUFFER_EMPTY : utils_2.uintToBuffer(value));\n                    break;\n                case \"bigint\":\n                    exports.toStrings.set(this, () => value.toString(16));\n                    exports.toBuffers.set(this, () => value === 0n ? constants_1.BUFFER_EMPTY : utils_1.bigIntToBuffer(value));\n                    break;\n                case \"string\": {\n                    // handle hex-encoded string\n                    if (value.indexOf(\"0x\") === 0) {\n                        exports.strCache.set(this, value.toLowerCase());\n                        exports.toBuffers.set(this, () => {\n                            let fixedValue = value.slice(2);\n                            if (fixedValue.length % 2 === 1) {\n                                fixedValue = \"0\" + fixedValue;\n                            }\n                            return Buffer.from(fixedValue, \"hex\");\n                        });\n                    }\n                    else {\n                        throw new Error(`cannot convert string value \"${value}\" into type \\`${this.constructor.name}\\`; strings must be hex-encoded and prefixed with \"0x\".`);\n                    }\n                    break;\n                }\n                default:\n                    // handle undefined/null\n                    if (value == null) {\n                        // This is a weird thing that returns undefined/null for a call\n                        // to toString().\n                        this.toString = () => value;\n                        exports.bufCache.set(this, constants_1.BUFFER_EMPTY);\n                        break;\n                    }\n                    throw new Error(`Cannot wrap a \"${type}\" as a json-rpc type`);\n            }\n            self[Symbol.toStringTag] = type;\n        }\n        this.value = value;\n    }\n    // used to make console.log debugging a little easier\n    [inspect](_depth, _options) {\n        return this.value;\n    }\n    toString() {\n        let str = exports.strCache.get(this);\n        if (str === void 0) {\n            str = \"0x\" + exports.toStrings.get(this)();\n            exports.strCache.set(this, str);\n        }\n        return str;\n    }\n    toBuffer() {\n        let buf = exports.bufCache.get(this);\n        if (buf === void 0) {\n            buf = exports.toBuffers.get(this)();\n            exports.bufCache.set(this, buf);\n        }\n        return buf;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    isNull() {\n        return this.value == null;\n    }\n}\nexports.BaseJsonRpcType = BaseJsonRpcType;\n//# sourceMappingURL=json-rpc-base-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Data = void 0;\nconst json_rpc_base_types_1 = require(\"./json-rpc-base-types\");\nconst json_rpc_base_types_2 = require(\"./json-rpc-base-types\");\nfunction validateByteLength(byteLength) {\n    if (typeof byteLength !== \"number\" || byteLength < 0) {\n        throw new Error(`byteLength must be a number greater than 0`);\n    }\n}\nconst byteLengths = new WeakMap();\nclass Data extends json_rpc_base_types_1.BaseJsonRpcType {\n    constructor(value, byteLength) {\n        if (typeof value === \"bigint\") {\n            throw new Error(`Cannot create a ${typeof value} as a Data`);\n        }\n        super(value);\n        if (byteLength !== void 0) {\n            validateByteLength(byteLength);\n            byteLengths.set(this, byteLength | 0);\n        }\n    }\n    toString(byteLength) {\n        const str = json_rpc_base_types_2.strCache.get(this);\n        if (str !== void 0) {\n            return str;\n        }\n        else {\n            let str = json_rpc_base_types_2.toStrings.get(this)();\n            let length = str.length;\n            if (length % 2 === 1) {\n                length++;\n                str = `0${str}`;\n            }\n            if (byteLength !== void 0) {\n                validateByteLength(byteLength);\n            }\n            else {\n                byteLength = byteLengths.get(this);\n            }\n            if (byteLength !== void 0) {\n                const strLength = byteLength * 2;\n                const padBy = strLength - length;\n                if (padBy < 0) {\n                    // if our hex-encoded data is longer than it should be, truncate it:\n                    str = str.slice(0, strLength);\n                }\n                else if (padBy > 0) {\n                    // if our hex-encoded data is shorter than it should be, pad it:\n                    str = \"0\".repeat(padBy) + str;\n                }\n            }\n            return `0x${str}`;\n        }\n    }\n    static from(value, byteLength) {\n        return new Data(value, byteLength);\n    }\n}\nexports.Data = Data;\n//# sourceMappingURL=json-rpc-data.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quantity = void 0;\nconst utils_1 = require(\"../../utils\");\nconst json_rpc_base_types_1 = require(\"./json-rpc-base-types\");\n// TODO(perf): rewrite this stuff since it isn't really caching anything\nclass Quantity extends json_rpc_base_types_1.BaseJsonRpcType {\n    constructor() {\n        super(...arguments);\n        this._nullable = false;\n    }\n    static from(value, nullable = false) {\n        if (value instanceof Quantity)\n            return value;\n        const q = new Quantity(value);\n        q._nullable = nullable;\n        return q;\n    }\n    toString() {\n        // TODO(perf): memoize this stuff\n        if (Buffer.isBuffer(this.value)) {\n            let val = this.value.toString(\"hex\").replace(/^(?:0+(.+?))?$/, \"$1\");\n            if (val === \"\") {\n                if (this._nullable) {\n                    return null;\n                }\n                // RPC Quantities must represent `0` as `0x0`\n                return \"0x0\";\n            }\n            return `0x${val}`;\n        }\n        else if (this.value == null) {\n            return \"0x\";\n        }\n        else {\n            return super.toString();\n        }\n    }\n    toBuffer() {\n        // 0x0, 0x00, 0x000, etc should return BUFFER_EMPTY\n        if (Buffer.isBuffer(this.value)) {\n            // trim zeros from start\n            let best = 0;\n            for (best = 0; best < this.value.length; best++) {\n                if (this.value[best] !== 0)\n                    break;\n            }\n            if (best > 0) {\n                return this.value.slice(best);\n            }\n            else {\n                return this.value;\n            }\n        }\n        else if (typeof this.value === \"string\") {\n            let val = this.value.slice(2).replace(/^(?:0+(.+?))?$/, \"$1\");\n            if (val === \"\" || val === \"0\") {\n                return utils_1.BUFFER_EMPTY;\n            }\n        }\n        else if (this.value === 0 || this.value === 0n) {\n            return utils_1.BUFFER_EMPTY;\n        }\n        return super.toBuffer();\n    }\n    toBigInt() {\n        const value = this.value;\n        // TODO(perf): memoize this stuff\n        if (Buffer.isBuffer(value)) {\n            const bigInt = utils_1.bufferToBigInt(value);\n            return bigInt == null ? (this._nullable ? null : 0n) : bigInt;\n        }\n        else {\n            return value == null ? (this._nullable ? null : 0n) : BigInt(value);\n        }\n    }\n    toNumber() {\n        // TODO(perf): memoize this stuff\n        return typeof this.value === \"number\"\n            ? this.value\n            : Number(this.toBigInt());\n    }\n    valueOf() {\n        const value = this.value;\n        if (value === null) {\n            return value;\n        }\n        else if (value === undefined) {\n            return value;\n        }\n        else {\n            return this.toBigInt();\n        }\n    }\n}\nexports.Quantity = Quantity;\nexports.default = Quantity;\n//# sourceMappingURL=json-rpc-quantity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcErrorCode = exports.makeError = exports.makeResponse = exports.makeRequest = void 0;\nconst jsonrpc = \"2.0\";\nconst makeRequest = (json) => {\n    return {\n        id: json.id,\n        jsonrpc,\n        method: json.method,\n        params: json.params\n    };\n};\nexports.makeRequest = makeRequest;\nconst makeResponse = (id, result) => {\n    return {\n        id,\n        jsonrpc,\n        result\n    };\n};\nexports.makeResponse = makeResponse;\nconst makeError = (id, error, result) => {\n    // Error objects are weird, `message` isn't included in the property names,\n    // so it is pulled out separately.\n    const details = { message: error.message };\n    Object.getOwnPropertyNames(error).forEach(name => {\n        if (typeof name === \"string\") {\n            details[name] = error[name];\n        }\n    });\n    if (typeof details.code !== \"number\") {\n        details.code = -32700; // JSON-RPC Parse error\n    }\n    if (result !== undefined) {\n        return {\n            id,\n            jsonrpc,\n            error: details,\n            result\n        };\n    }\n    else {\n        return {\n            id,\n            jsonrpc,\n            error: details\n        };\n    }\n};\nexports.makeError = makeError;\nvar JsonRpcErrorCode;\n(function (JsonRpcErrorCode) {\n    /**\n     * Invalid JSON was received by the server.\n     * An error occurred on the server while parsing the JSON text.\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"PARSE_ERROR\"] = -32700] = \"PARSE_ERROR\";\n    /**\n     * The JSON sent is not a valid Request object.\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"INVALID_REQUEST\"] = -32600] = \"INVALID_REQUEST\";\n    /**\n     * The method does not exist / is not available.\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"METHOD_NOT_FOUND\"] = -32601] = \"METHOD_NOT_FOUND\";\n    /**\n     * Invalid method parameter(s).\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"INVALID_PARAMS\"] = -32602] = \"INVALID_PARAMS\";\n    /**\n     * Internal JSON-RPC error.\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"INTERNAL_ERROR\"] = -32603] = \"INTERNAL_ERROR\";\n    /**\n     * Missing or invalid parameters\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"INVALID_INPUT\"] = -32000] = \"INVALID_INPUT\";\n    /**\n     * Transaction creation failed\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"TRANSACTION_REJECTED\"] = -32003] = \"TRANSACTION_REJECTED\";\n    /**\n     * \tMethod is not implemented\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"METHOD_NOT_SUPPORTED\"] = -32004] = \"METHOD_NOT_SUPPORTED\";\n    /**\n     * \tRequest exceeds defined limit\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"LIMIT_EXCEEDED\"] = -32005] = \"LIMIT_EXCEEDED\";\n    /**\n     * Version of JSON-RPC protocol is not supported\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"JSON_RPC_VERSION_NOT_SUPPORTED\"] = -32006] = \"JSON_RPC_VERSION_NOT_SUPPORTED\";\n})(JsonRpcErrorCode = exports.JsonRpcErrorCode || (exports.JsonRpcErrorCode = {}));\n//# sourceMappingURL=jsonrpc.js.map","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar PromiEvent_1;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst emitteryMethods = [\n    \"clearListeners\",\n    \"once\",\n    \"on\",\n    \"emit\",\n    \"onAny\"\n];\nlet PromiEvent = PromiEvent_1 = class PromiEvent extends Promise {\n    constructor(executor) {\n        super(executor);\n        /**\n         * Used to immediately clear all event listeners on the instance and prevent\n         * any additional binding or emission from the Emitter.\n         *\n         * Once disposed no listeners can be bound to this emitter.\n         *\n         * Note: `dispose` is pre-bound to the `this`, making it possible to pass the\n         * method around detached from it's context.\n         */\n        this.dispose = () => {\n            if (!this.clearListeners)\n                throw new Error(\"PromiEvent already disposed\");\n            this.clearListeners();\n            // Ensure that once disposed no listeners can be bound to this emitter.\n            const fn = () => {\n                throw new Error(\"PromiEvent bound after dispose\");\n            };\n            emitteryMethods\n                .filter(m => m !== \"emit\")\n                .forEach(methodName => {\n                Object.defineProperty(this, methodName, {\n                    enumerable: false,\n                    value: fn\n                });\n            });\n        };\n    }\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A PromiEvent for the completion of the callback.\n     */\n    catch(onrejected) {\n        const prom = new PromiEvent_1((resolve, reject) => {\n            this.onAny((eventName, eventData) => {\n                return prom.emit(eventName, eventData);\n            });\n            const p = super.catch(onrejected);\n            p.then(resolve, reject);\n        });\n        return prom;\n    }\n    static resolve(value) {\n        return new PromiEvent_1(resolve => {\n            resolve(value);\n        });\n    }\n};\nPromiEvent = PromiEvent_1 = __decorate([\n    emittery_1.default.mixin(Symbol.for(\"emittery\"), emitteryMethods)\n], PromiEvent);\nexports.default = PromiEvent;\n//# sourceMappingURL=promievent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=subscription.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Base implementation for an API.\n * All properties must be `async` callable or return a `Promise`\n */\nclass ApiBase {\n}\n//# sourceMappingURL=api.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=connector.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./connector\"), exports);\n__exportStar(require(\"./provider\"), exports);\n__exportStar(require(\"./api\"), exports);\nfunction b() { }\nfunction g(t) {\n    return 123;\n}\ng({});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=provider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bigIntToBuffer = void 0;\nconst common_1 = require(\"../common\");\nconst uint_to_buffer_1 = require(\"./uint-to-buffer\");\nconst allocUnsafe = Buffer.allocUnsafe;\nlet _bigIntToBuffer;\n/**\n * Returns the number of bytes contained in this given `value`.\n * @param value\n */\nfunction bigIntByteLength(value) {\n    let length = 1;\n    while ((value >>= 8n))\n        length++;\n    return length;\n}\nconst MAX_SAFE_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);\ntry {\n    // force fallback if only `toBufferBE` is missing (this can happen if toBufferBE isn't polyfilled for the browser,\n    // which, at the time of this writing... it isn't)\n    if (!common_1.toBufferBE)\n        throw new Error(\"Missing function `toBufferBE`!\");\n    _bigIntToBuffer = (value) => {\n        if (value <= MAX_SAFE_INTEGER) {\n            return uint_to_buffer_1.uintToBuffer(Number(value));\n        }\n        else {\n            const size = bigIntByteLength(value);\n            return common_1.toBufferBE(value, size);\n        }\n    };\n}\ncatch (e) {\n    _bigIntToBuffer = (value) => {\n        if (value <= MAX_SAFE_INTEGER) {\n            // if this value can be handled as a JS number safely, convert it that way\n            return uint_to_buffer_1.uintToBuffer(Number(value));\n        }\n        else {\n            let length = bigIntByteLength(value);\n            const buf = allocUnsafe(length);\n            // process 1 byte at a time\n            do {\n                // truncate to right-most 32 bits and assign to buffer position `length`\n                buf[--length] = Number(value & 0xffffffffn);\n                // shift right-most byte off since we've used it\n                value >>= 8n;\n            } while (length);\n            return buf;\n        }\n    };\n}\n/**\n * Converts a bigint to a Buffer (Big Endian)\n */\nexports.bigIntToBuffer = _bigIntToBuffer;\n//# sourceMappingURL=bigint-to-buffer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bufferToBigInt = void 0;\nconst bigint_buffer_1 = require(\"@trufflesuite/bigint-buffer\");\n/**\n * note: this doesn't handle negative values\n * @param value Buffer representation of a bigint, most-significant bit first (Big-endian)\n */\nfunction bufferToBigInt(value) {\n    // Parsed as BE.\n    // This doesn't handle negative values. We may need to add logic to handle\n    // it because it is possible values returned from the VM could be negative\n    // and stored in a buffer.\n    const length = value.byteLength;\n    if (length === 0) {\n        return null;\n    }\n    // Buffers that are 6 bytes or less can be converted with built-in methods\n    if (length <= 6) {\n        return BigInt(value.readUIntBE(0, length));\n    }\n    let view;\n    // Buffers that are 7 bytes need to be padded to 8 bytes\n    if (length === 7) {\n        const padded = new Uint8Array(8);\n        // set byte 0 to 0, and bytes 1-8 to the value's 7 bytes:\n        padded.set(value, 1);\n        view = new DataView(padded.buffer);\n    }\n    else if (length === 8) {\n        view = new DataView(value.buffer, value.byteOffset, length);\n    }\n    else {\n        // TODO: toBigIntBE is a native lib with no pure JS fallback yet.\n        return bigint_buffer_1.toBigIntBE(value);\n    }\n    return view.getBigUint64(0);\n}\nexports.bufferToBigInt = bufferToBigInt;\n//# sourceMappingURL=buffer-to-bigint.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bufferToMinHexKey = void 0;\nlet stringify;\nif (typeof Buffer.prototype.latin1Slice === \"function\") {\n    stringify = (buffer, start, end) => {\n        // this is just `buffer.toString(\"hex\")`, but it skips a bunch of checks\n        // that don't apply because our `start` and `end` just can't be out of\n        // bounds.\n        return buffer.hexSlice(start, end);\n    };\n}\nelse {\n    stringify = (buffer, start, end) => {\n        return buffer.slice(start, end).toString(\"hex\");\n    };\n}\n/**\n * Trims leading 0s from a buffer and returns a key representing the buffer's\n * trimmed value (`Buffer.from([0, 0, 12, 0])` => `1200`).\n *\n * @param buffer\n */\nfunction bufferToMinHexKey(buffer) {\n    for (let i = 0, length = buffer.byteLength; i < length; i++) {\n        const value = buffer[i];\n        // once we find a non-zero value take the rest of the buffer as the key\n        if (value !== 0) {\n            if (i + 1 === length) {\n                // use a lookup table for single character lookups\n                return HEX_MAP[value];\n            }\n            else {\n                return stringify(buffer, i, length);\n            }\n        }\n    }\n    return \"\";\n}\nexports.bufferToMinHexKey = bufferToMinHexKey;\nconst HEX_MAP = [\n    \"00\",\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"0a\",\n    \"0b\",\n    \"0c\",\n    \"0d\",\n    \"0e\",\n    \"0f\",\n    \"10\",\n    \"11\",\n    \"12\",\n    \"13\",\n    \"14\",\n    \"15\",\n    \"16\",\n    \"17\",\n    \"18\",\n    \"19\",\n    \"1a\",\n    \"1b\",\n    \"1c\",\n    \"1d\",\n    \"1e\",\n    \"1f\",\n    \"20\",\n    \"21\",\n    \"22\",\n    \"23\",\n    \"24\",\n    \"25\",\n    \"26\",\n    \"27\",\n    \"28\",\n    \"29\",\n    \"2a\",\n    \"2b\",\n    \"2c\",\n    \"2d\",\n    \"2e\",\n    \"2f\",\n    \"30\",\n    \"31\",\n    \"32\",\n    \"33\",\n    \"34\",\n    \"35\",\n    \"36\",\n    \"37\",\n    \"38\",\n    \"39\",\n    \"3a\",\n    \"3b\",\n    \"3c\",\n    \"3d\",\n    \"3e\",\n    \"3f\",\n    \"40\",\n    \"41\",\n    \"42\",\n    \"43\",\n    \"44\",\n    \"45\",\n    \"46\",\n    \"47\",\n    \"48\",\n    \"49\",\n    \"4a\",\n    \"4b\",\n    \"4c\",\n    \"4d\",\n    \"4e\",\n    \"4f\",\n    \"50\",\n    \"51\",\n    \"52\",\n    \"53\",\n    \"54\",\n    \"55\",\n    \"56\",\n    \"57\",\n    \"58\",\n    \"59\",\n    \"5a\",\n    \"5b\",\n    \"5c\",\n    \"5d\",\n    \"5e\",\n    \"5f\",\n    \"60\",\n    \"61\",\n    \"62\",\n    \"63\",\n    \"64\",\n    \"65\",\n    \"66\",\n    \"67\",\n    \"68\",\n    \"69\",\n    \"6a\",\n    \"6b\",\n    \"6c\",\n    \"6d\",\n    \"6e\",\n    \"6f\",\n    \"70\",\n    \"71\",\n    \"72\",\n    \"73\",\n    \"74\",\n    \"75\",\n    \"76\",\n    \"77\",\n    \"78\",\n    \"79\",\n    \"7a\",\n    \"7b\",\n    \"7c\",\n    \"7d\",\n    \"7e\",\n    \"7f\",\n    \"80\",\n    \"81\",\n    \"82\",\n    \"83\",\n    \"84\",\n    \"85\",\n    \"86\",\n    \"87\",\n    \"88\",\n    \"89\",\n    \"8a\",\n    \"8b\",\n    \"8c\",\n    \"8d\",\n    \"8e\",\n    \"8f\",\n    \"90\",\n    \"91\",\n    \"92\",\n    \"93\",\n    \"94\",\n    \"95\",\n    \"96\",\n    \"97\",\n    \"98\",\n    \"99\",\n    \"9a\",\n    \"9b\",\n    \"9c\",\n    \"9d\",\n    \"9e\",\n    \"9f\",\n    \"a0\",\n    \"a1\",\n    \"a2\",\n    \"a3\",\n    \"a4\",\n    \"a5\",\n    \"a6\",\n    \"a7\",\n    \"a8\",\n    \"a9\",\n    \"aa\",\n    \"ab\",\n    \"ac\",\n    \"ad\",\n    \"ae\",\n    \"af\",\n    \"b0\",\n    \"b1\",\n    \"b2\",\n    \"b3\",\n    \"b4\",\n    \"b5\",\n    \"b6\",\n    \"b7\",\n    \"b8\",\n    \"b9\",\n    \"ba\",\n    \"bb\",\n    \"bc\",\n    \"bd\",\n    \"be\",\n    \"bf\",\n    \"c0\",\n    \"c1\",\n    \"c2\",\n    \"c3\",\n    \"c4\",\n    \"c5\",\n    \"c6\",\n    \"c7\",\n    \"c8\",\n    \"c9\",\n    \"ca\",\n    \"cb\",\n    \"cc\",\n    \"cd\",\n    \"ce\",\n    \"cf\",\n    \"d0\",\n    \"d1\",\n    \"d2\",\n    \"d3\",\n    \"d4\",\n    \"d5\",\n    \"d6\",\n    \"d7\",\n    \"d8\",\n    \"d9\",\n    \"da\",\n    \"db\",\n    \"dc\",\n    \"dd\",\n    \"de\",\n    \"df\",\n    \"e0\",\n    \"e1\",\n    \"e2\",\n    \"e3\",\n    \"e4\",\n    \"e5\",\n    \"e6\",\n    \"e7\",\n    \"e8\",\n    \"e9\",\n    \"ea\",\n    \"eb\",\n    \"ec\",\n    \"ed\",\n    \"ee\",\n    \"ef\",\n    \"f0\",\n    \"f1\",\n    \"f2\",\n    \"f3\",\n    \"f4\",\n    \"f5\",\n    \"f6\",\n    \"f7\",\n    \"f8\",\n    \"f9\",\n    \"fa\",\n    \"fb\",\n    \"fc\",\n    \"fd\",\n    \"fe\",\n    \"ff\"\n];\n//# sourceMappingURL=buffer-to-key.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KNOWN_CHAINIDS = exports.WEI = exports.RPCQUANTITY_ONE = exports.RPCQUANTITY_ZERO = exports.RPCQUANTITY_EMPTY = exports.DATA_EMPTY = exports.BUFFER_8_ZERO = exports.BUFFER_32_ZERO = exports.BUFFER_ZERO = exports.BUFFER_EMPTY = exports.ACCOUNT_ZERO = exports.BUFFER_256_ZERO = void 0;\nconst json_rpc_data_1 = require(\"../things/json-rpc/json-rpc-data\");\nconst json_rpc_quantity_1 = require(\"../things/json-rpc/json-rpc-quantity\");\nexports.BUFFER_256_ZERO = Buffer.allocUnsafe(256).fill(0);\nexports.ACCOUNT_ZERO = exports.BUFFER_256_ZERO.slice(0, 20);\nexports.BUFFER_EMPTY = Buffer.allocUnsafe(0);\nexports.BUFFER_ZERO = exports.BUFFER_256_ZERO.slice(0, 1);\nexports.BUFFER_32_ZERO = exports.BUFFER_256_ZERO.slice(0, 32);\nexports.BUFFER_8_ZERO = exports.BUFFER_256_ZERO.slice(0, 8);\nexports.DATA_EMPTY = json_rpc_data_1.Data.from(exports.BUFFER_EMPTY);\nexports.RPCQUANTITY_EMPTY = json_rpc_quantity_1.Quantity.from(exports.BUFFER_EMPTY, true);\nexports.RPCQUANTITY_ZERO = json_rpc_quantity_1.Quantity.from(exports.BUFFER_ZERO);\nexports.RPCQUANTITY_ONE = json_rpc_quantity_1.Quantity.from(1n);\nexports.WEI = 1000000000000000000n;\nexports.KNOWN_CHAINIDS = new Set([1, 3, 4, 5, 42]);\n//# sourceMappingURL=constants.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _requestCoordinator;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Executor = void 0;\nconst has_own_1 = require(\"./has-own\");\nclass Executor {\n    /**\n     * The Executor handles execution of methods on the given API\n     */\n    constructor(requestCoordinator) {\n        _requestCoordinator.set(this, void 0);\n        __classPrivateFieldSet(this, _requestCoordinator, requestCoordinator);\n    }\n    /**\n     * Executes the method with the given methodName on the API\n     * @param methodName The name of the JSON-RPC method to execute.\n     * @param params The params to pass to the JSON-RPC method.\n     */\n    execute(api, methodName, params) {\n        // The methodName is user-entered data and can be all sorts of weird hackery\n        // Make sure we only accept what we expect to avoid headache and heartache\n        if (typeof methodName === \"string\") {\n            // Only allow executing our *own* methods. We allow:\n            //  * functions added to the Instance by the class, e.g.,\n            //      class SomeClass {\n            //        method = () => {} // api.hasOwnProperty(\"method\") === true\n            //      }\n            //  * Or by the class' prototype:\n            //      class SomeClass {\n            //        method(){} // api.__proto__.hasOwnProperty(\"method\") === true\n            //      }\n            if ((has_own_1.hasOwn(api.__proto__, methodName) && methodName !== \"constructor\") ||\n                has_own_1.hasOwn(api, methodName)) {\n                // cast methodName from `KnownKeys<T> & string` back to KnownKeys<T> so our return type isn't weird.\n                const fn = api[methodName];\n                // just double check, in case a API breaks the rules and adds non-fns\n                // to their API interface.\n                if (typeof fn === \"function\") {\n                    // queue up this method for actual execution:\n                    return __classPrivateFieldGet(this, _requestCoordinator).queue(fn, api, params);\n                }\n            }\n        }\n        throw new Error(`The method ${methodName} does not exist/is not available`);\n    }\n}\nexports.Executor = Executor;\n_requestCoordinator = new WeakMap();\n//# sourceMappingURL=executor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findInsertPosition = void 0;\n/**\n * AKA `upper_bound`\n *\n * The elements are compared using `comp`. The elements in the range must\n * already be sorted according to this same criterion (`comp`), or at least\n * partitioned with respect to val.\n *\n * The function optimizes the number of comparisons performed by comparing\n * non-consecutive elements of the sorted range.\n *\n * The index into the `array` returned by this function will always be greater than\n * the index of the last-occurrence of `val`.\n *\n * On average, logarithmic in the distance of the length of the array: Performs\n * approximately `log2(N)+1` element comparisons (where `N` is this length).\n *\n * @param array\n * @param val Value of the upper bound to search for in the range.\n * @param comp A function that accepts two arguments (the first is always\n * `val`, and the second from the given `array`) and returns bool. The value\n * returned indicates whether the first argument is considered to go before the\n * second.\n *\n * @returns The index to the upper bound position for `val` in the range. If no\n * element in the range compares greater than `val`, the function returns\n * `array.length`.\n */\nfunction findInsertPosition(array, val, comp) {\n    // `count` tracks the number of elements that remain to be searched\n    let count = array.length;\n    // `insertPosition` tracks the best insert position for the element we know\n    // about _so far_\n    let insertPosition = 0;\n    // `offset` tracks the start position of the elements that remain to be\n    // searched\n    let offset = 0;\n    while (count > 0) {\n        // find the middle element between `offset` and `count`\n        const step = (count / 2) | 0; // ()`| 0` rounds towards 0)\n        offset += step;\n        // compare our val to the \"middle element\" (`array[offset]`)\n        if (!comp(val, array[offset])) {\n            // `val` should come _after_ the element at `array[offset]`.\n            //  * update our `insertPosition` to the index immediately after\n            //    `array[offset]`\n            //  * shrink our search range\n            // This narrows our search the elements to the right of `array[offset]`.\n            insertPosition = ++offset;\n            count -= step + 1;\n        }\n        else {\n            // `val` should come before the element at `array[offset]`:\n            // This narrows the search the elements to the left of `array[offset]`.\n            count = step;\n            offset = insertPosition;\n        }\n    }\n    return insertPosition;\n}\nexports.findInsertPosition = findInsertPosition;\n//# sourceMappingURL=find-insert-position.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasOwn = void 0;\nconst _hasOwn = {}.hasOwnProperty.call.bind({}.hasOwnProperty);\n/**\n * /**\n * Determines whether an object has a property with the specified name.\n *\n * Safe for use on user-supplied data.\n *\n * @param obj The object that will be checked.\n * @param v A property name.\n * @returns `true` if the object has a property with the specified name,\n * otherwise false.\n */\nconst hasOwn = (obj, prop) => {\n    return obj != null && _hasOwn(obj, prop);\n};\nexports.hasOwn = hasOwn;\n//# sourceMappingURL=has-own.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Heap = void 0;\nclass Heap {\n    /**\n     * Creates a priority-queue heap where the highest priority element,\n     * as determined by the `less` function, is at the tip/root of the heap.\n     * To read the highest priority element without removing it call peek(). To\n     * read and remove the element call `shift()`\n     * @param less the comparator function\n     * @param refresher the refresher function\n     */\n    constructor(less, refresher) {\n        this.length = 0;\n        this.array = [];\n        this.less = less;\n        this.refresher = refresher;\n    }\n    init(array) {\n        this.array = array;\n        const length = (this.length = array.length);\n        for (let i = ((length / 2) | 0) - 1; i >= 0;) {\n            this.down(i--, length);\n        }\n    }\n    /**\n     * Updates all entries by calling the Heap's `refresher` function for each\n     * item in the heap and then re-sorting.\n     * @param context\n     */\n    /**\n     * Updates all entries by calling the Heap's `refresher` function for each\n     * item in the heap and then re-sorting.\n     * @param context\n     */\n    refresh(context) {\n        const length = this.length;\n        const mid = (length / 2) | 0;\n        for (let i = mid; i < length; i++) {\n            this.refresher(this.array[i], context);\n        }\n        for (let i = mid - 1; i >= 0;) {\n            this.refresher(this.array[i], context);\n            this.down(i--, length);\n        }\n    }\n    /**\n     * Pushes a new element onto the heap\n     * @param value\n     */\n    push(value) {\n        const i = this.length++;\n        this.array[i] = value;\n        this.up(i);\n    }\n    size() {\n        return this.length;\n    }\n    /**\n     * Return the current best element. Does not remove it\n     */\n    peek() {\n        return this.array[0];\n    }\n    clear() {\n        this.length = this.array.length = 0;\n    }\n    /**\n     * Removes and returns the element with the highest priority from the heap.\n     * The complexity is O(log n) where n = this.size().\n     * @returns the element with the highest priority. returns `undefined` if\n     * there are no more elements in the heap.\n     */\n    shift() {\n        const length = this.length;\n        // if we are empty or about to be empty...\n        if (length <= 1) {\n            if (length === 0)\n                return;\n            const element = this.array[0];\n            // finally, clear the array\n            this.clear();\n            return element;\n        }\n        // otherwise...\n        // remember the best element\n        const array = this.array;\n        const best = array[0];\n        const newLength = (this.length = length - 1);\n        // put our last element at the start of the heap\n        array[0] = array[newLength];\n        // then sort from the new first element to the second to last element\n        this.down(0, newLength);\n        return best;\n    }\n    /**\n     * Removes the highest priority element from the queue, replacing it with\n     * the new element. This is equivalent to, but faster than, calling\n     * `replace(0, newValue);`.\n     * If you call this on an empty heap (`this.size() === 0`) you may find\n     * unexpected behavior.\n     * @param newValue\n     */\n    replaceBest(newValue) {\n        this.array[0] = newValue;\n        this.down(0, this.length);\n    }\n    /**\n     * Replaces the element at position `i` with the `newValue`. If the element at\n     * position `i` doesn't exist, or if `i < 0` or `i > this.size()` you may\n     * find unexpected behavior.\n     * @param i\n     * @param newValue\n     */\n    replace(i, newValue) {\n        this.array[i] = newValue;\n        this.fix(i);\n    }\n    /**\n     * Removes the element at position `i`.\n     * The complexity is O(log n) where n = this.size().\n     * @param i the element to remove\n     */\n    remove(i) {\n        const newLength = --this.length;\n        if (newLength !== i) {\n            this.swap(i, newLength);\n            if (!this.down(i, newLength)) {\n                this.up(i);\n            }\n        }\n    }\n    /**\n     * Removes the element with the highest priority from the heap\n     * The complexity is O(log n) where n = this.size().\n     * @returns `true` when there are more elements in the queue, `false` when the\n     * last element was just removed. Calling `removeBest` when there are no more\n     * elements in the queue will return `true`. So don't do that.\n     */\n    removeBest() {\n        const array = this.array;\n        const length = this.length;\n        if (length === 1) {\n            // finally, clear the array\n            this.length = array.length = 0;\n            return false;\n        }\n        const newLength = --this.length;\n        // put our last element at the start of the heap\n        array[0] = array[newLength];\n        // then sort from the new first element to the second to last element\n        this.down(0, newLength);\n        return true;\n    }\n    /**\n     * Re-establishes the heap ordering after the element at index `i` changes\n     * its value. Changing the value of the element at index `i` and then\n     * calling fix is equivalent to, but faster than, calling\n     * `remove(i); push(newValue);`.\n     * The complexity is O(log n) where n = this.size().\n     * @param i\n     */\n    fix(i) {\n        if (!this.down(i, this.length)) {\n            this.up(i);\n        }\n    }\n    up(j) {\n        const less = this.less.bind(null, this.array);\n        for (let i; (i = ((j - 1) / 2) | 0), i !== j && less(j, i); j = i) {\n            this.swap(i, j);\n        }\n    }\n    down(i0, l) {\n        const less = this.less.bind(null, this.array);\n        let i = i0;\n        for (let j1; (j1 = 2 * i + 1) < l;) {\n            let j = j1; // left child\n            let j2 = j1 + 1;\n            if (j2 < l && less(j2, j1)) {\n                j = j2; // = 2 * i + 2  // right child\n            }\n            if (!less(j, i)) {\n                break;\n            }\n            this.swap(i, j);\n            i = j;\n        }\n        return i > i0;\n    }\n    /**\n     * Swaps the elements in the heap\n     * @param i The first element\n     * @param j The second element\n     */\n    swap(i, j) {\n        const array = this.array;\n        const first = array[i];\n        array[i] = array[j];\n        array[j] = first;\n    }\n    /**\n     * Heap initialization helper for when you only know of a single item for the\n     * heap.\n     * @param item\n     * @param less\n     * @param refresher\n     */\n    static from(item, less, refresher) {\n        const heap = new Heap(less, refresher);\n        heap.array = [item];\n        heap.length = 1;\n        return heap;\n    }\n}\nexports.Heap = Heap;\n//# sourceMappingURL=heap.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./bigint-to-buffer\"), exports);\n__exportStar(require(\"./buffer-to-bigint\"), exports);\n__exportStar(require(\"./executor\"), exports);\n__exportStar(require(\"./heap\"), exports);\n__exportStar(require(\"./request-coordinator\"), exports);\n__exportStar(require(\"./unref\"), exports);\n__exportStar(require(\"./has-own\"), exports);\n__exportStar(require(\"./uint-to-buffer\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./buffer-to-key\"), exports);\n__exportStar(require(\"./keccak\"), exports);\n__exportStar(require(\"./find-insert-position\"), exports);\n__exportStar(require(\"./random-number-generator\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keccak = void 0;\nconst keccak_1 = __importDefault(require(\"keccak\"));\nconst RATE = 1088;\nconst CAPACITY = 512;\nconst instance = keccak_1.default(\"keccak256\");\n/**\n * keccak256, but faster if you use it a lot.\n * @param buffer\n */\nfunction keccak(buffer) {\n    instance._state.absorb(buffer);\n    const digest = instance._state.squeeze(32);\n    // reset and remove result from memory\n    instance._state.initialize(RATE, CAPACITY);\n    // make this re-usable\n    instance._finalized = false;\n    return digest;\n}\nexports.keccak = keccak;\n//# sourceMappingURL=keccak.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RandomNumberGenerator = void 0;\nconst seedrandom_1 = __importDefault(require(\"seedrandom\"));\nclass RandomNumberGenerator {\n    // I was planning on using `state` here to restore the RNG\n    // from a saved state (via the db on run or upon a revert),\n    // but this functionality was postponed. I'm keeping the arg\n    // here as it still applies and is valid code.\n    // https://github.com/trufflesuite/ganache/issues/756\n    constructor(seed, state) {\n        if (typeof seed === \"string\" && typeof state === \"undefined\") {\n            this.rng = seedrandom_1.default.alea(seed, { state: true });\n        }\n        else if (typeof state === \"object\") {\n            // We can ignore seed even if it was provided.\n            // The user is reseeding the rng from a prior state,\n            // so let's initialize accordingly\n            this.rng = seedrandom_1.default.alea(\"\", { state });\n        }\n        else {\n            const entropy = Math.random() * Date.now();\n            this.rng = seedrandom_1.default.alea(`${entropy}`, { state: true });\n        }\n    }\n    getNumber(upperExclusiveBound = 1) {\n        // I believe this check may be a tiny bit faster than\n        // always multiplying by 1\n        if (upperExclusiveBound !== 1) {\n            return this.rng() * upperExclusiveBound;\n        }\n        else {\n            return this.rng();\n        }\n    }\n    getNumbers(length, upperExclusiveBound = 1) {\n        const numbers = [];\n        for (let i = 0; i < length; i++) {\n            numbers.push(this.getNumber(upperExclusiveBound));\n        }\n        return numbers;\n    }\n    getBuffer(length) {\n        return Buffer.from(this.getNumbers(length, 256));\n    }\n    state() {\n        return this.rng.state();\n    }\n}\nexports.RandomNumberGenerator = RandomNumberGenerator;\n//# sourceMappingURL=random-number-generator.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _paused, _process;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestCoordinator = void 0;\nconst noop = () => { };\n/**\n * Responsible for managing global concurrent requests.\n */\nclass RequestCoordinator {\n    /**\n     * Promise-based FIFO queue.\n     * @param limit The number of requests that can be processed at a time.\n     * Default value is is no limit (`0`).\n     */\n    constructor(limit) {\n        /**\n         * The pending requests. You can't do anything with this array.\n         */\n        this.pending = [];\n        /**\n         * The number of tasks currently being processed.\n         */\n        this.runningTasks = 0;\n        _paused.set(this, true);\n        /**\n         * Pause processing. This will *not* cancel any promises that are currently\n         * running.\n         */\n        this.pause = () => {\n            __classPrivateFieldSet(this, _paused, true);\n        };\n        /**\n         * Resume processing.\n         */\n        this.resume = () => {\n            __classPrivateFieldSet(this, _paused, false);\n            __classPrivateFieldGet(this, _process).call(this);\n        };\n        _process.set(this, () => {\n            // if we aren't paused and the number of things we're processing is under\n            // our limit and we have things to process: do it!\n            while (!this.paused &&\n                this.pending.length > 0 &&\n                (!this.limit || this.runningTasks < this.limit)) {\n                const current = this.pending.shift();\n                this.runningTasks++;\n                current()\n                    // By now, we've resolved the fn's `value` by sending it to the parent scope.\n                    // But over here, we're also waiting for this fn's _value_ to settle _itself_ (it might be a promise) before\n                    // continuing through the `pending` queue. Because we wait for it again here, it could potentially throw here,\n                    // in which case we just need to catch it and throw the result away. We could probably use\n                    // `Promise.allSettled([current()]).finally` to do this instead of the `current().catch(noop).finally`. /shrug\n                    .catch(noop)\n                    .finally(() => {\n                    this.runningTasks--;\n                    __classPrivateFieldGet(this, _process).call(this);\n                });\n            }\n        });\n        /**\n         * Insert a new function into the queue.\n         */\n        this.queue = (fn, thisArgument, argumentsList) => {\n            return new Promise((resolve, reject) => {\n                // const executor is `async` to force the return value into a Promise.\n                const executor = async () => {\n                    try {\n                        const value = Reflect.apply(fn, thisArgument, argumentsList || []);\n                        resolve({ value });\n                        return value;\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                };\n                this.pending.push(executor);\n                __classPrivateFieldGet(this, _process).call(this);\n            });\n        };\n        this.limit = limit;\n    }\n    get paused() {\n        return __classPrivateFieldGet(this, _paused);\n    }\n}\nexports.RequestCoordinator = RequestCoordinator;\n_paused = new WeakMap(), _process = new WeakMap();\n//# sourceMappingURL=request-coordinator.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uintToBuffer = void 0;\nconst MAX_UINT32 = 0xffffffff;\n/**\n * This is just Node's `Buffer.allocUnsafe`. I'm documenting it extra here to\n * draw attention to it. It is much faster the `Buffer.alloc(size)` because it\n * doesn't initialize its memory first. It's safe for us to use below because we\n * guarantee that we will fill every octet ourselves.\n *\n * Allocates a new buffer of {size} octets, leaving memory not initialized, so\n * the contents of the newly created Buffer are unknown and may contain\n * sensitive data.\n *\n * @param {number} size count of octets to allocate\n */\nconst allocUnsafe = Buffer.allocUnsafe;\n/**\n * Converts positive whole numbers that are 32 bits of fewer to a Buffer. Any\n * more bits and who knows what will happen!?!1?!\n *\n * @param num A positive whole number less than 33 bits wide, i.e. a uint32.\n * @returns an optimally sized buffer holding `num` in big-endian order (LSB is\n * the _last_ value in the Buffer)\n */\nfunction uint32ToBuf(num) {\n    let buf;\n    /** `lsb` holds the Least Significant *byte* of `num`. It *technically* holds\n     * all of `num`'s bytes but because of how UInt8Arrays (and thus Buffers)\n     * work, only the least significant byte of each value gets used. */\n    const lsb = num;\n    // shift the first 8 least signficant bits off current num, if it's non-zero\n    // our value contains at least 2 bytes!\n    if ((num >>>= 8)) {\n        /** `second` now holds the second most least significant byte in its\n         * \"first\" (right most) 8 bits */\n        const second = num;\n        // shift the next 8 least signficant bits off current num, if it's non-zero\n        // our value contains at least 3 bytes!\n        if ((num >>>= 8)) {\n            /** `third` now holds the third most least significant byte in its\n             * \"first\" (right most) 8 bits */\n            const third = num;\n            if ((num >>>= 8)) {\n                // since we have all 4 bytes, create a 4 byte Buffer and fill it with\n                // our values!\n                buf = allocUnsafe(4);\n                // `num` here is just what is left after shifting off the 3 other bytes\n                // like we did above\n                buf[0] = num;\n                buf[1] = third;\n                buf[2] = second;\n                buf[3] = lsb;\n            }\n            else {\n                // since we only have 3 bytes, create a 3 byte Buffer and fill it with\n                // our values!\n                buf = allocUnsafe(3);\n                buf[0] = third;\n                buf[1] = second;\n                buf[2] = lsb;\n            }\n        }\n        else {\n            // since we only have 2 bytes, create a 2 byte Buffer and fill it with\n            // our values!\n            buf = allocUnsafe(2);\n            buf[0] = second;\n            buf[1] = lsb;\n        }\n    }\n    else {\n        // We only have 1 byte, create a 1 byte Buffer and fill it with our only\n        // value, lsb!\n        buf = allocUnsafe(1);\n        buf[0] = lsb;\n    }\n    // finally, return our optimally-sized Buffer!\n    return buf;\n}\n/**\n * Converts positive whole numbers less than or equal to\n * `Number.MAX_SAFE_INTEGER` to a Buffer. If your value is less than 2**32 you\n * should use `uint32ToBuf` instead.\n *\n * @param num A positive whole number <= `Number.MAX_SAFE_INTEGER`\n * @returns an optimally sized buffer holding `num` in big-endian order (LSB is\n * the _last_ value in the Buffer)\n */\nfunction uintWideToBuf(num) {\n    // This function is similar to `uint32ToBuf`, but splits the number into its\n    // 32 lowest bits and its 32 highest bits. We have to do this because numeric\n    // Bitwise operations can only operate on 32 bit-wide values.\n    // There are some differences, but if you first grasp `uint32ToBuf`, you can\n    // handle this just fine.\n    let buf;\n    /** If we are in this function we are probably > 32 bits wide, so we need to\n     * first convert this value to BigInt in order to shift off those high bits.\n     * Now that I'm documenting this, we could probably just subtract `2**32` from\n     * `num` to avoid the conversion overhead (BigInts are slower than numbers) */\n    let hi = Number(BigInt(num) >> 32n);\n    const hiLsb = hi;\n    let offset = 0;\n    // the high bits determine the size of the Buffer, so we compute the high bits\n    // first\n    if ((hi >>>= 8)) {\n        const six = hi;\n        if ((hi >>>= 8)) {\n            const five = hi;\n            if ((hi >>>= 8)) {\n                buf = allocUnsafe(8);\n                buf[0] = hi; // msb\n                buf[1] = five;\n                buf[2] = six;\n                buf[3] = hiLsb;\n                offset = 7;\n            }\n            else {\n                buf = allocUnsafe(7);\n                buf[0] = five; // msb\n                buf[1] = six;\n                buf[2] = hiLsb;\n                offset = 6;\n            }\n        }\n        else {\n            buf = allocUnsafe(6);\n            buf[0] = six; // msb\n            buf[1] = hiLsb;\n            offset = 5;\n        }\n    }\n    else {\n        buf = allocUnsafe(5);\n        buf[0] = hiLsb; // msb\n        offset = 4;\n    }\n    // set the low bytes:\n    let lo = num & MAX_UINT32;\n    const lsb = lo;\n    if ((lo >>>= 8)) {\n        const two = lo;\n        if ((lo >>>= 8)) {\n            const one = lo;\n            buf[offset - 3] = lo >>>= 8;\n            buf[offset - 2] = one;\n            buf[offset - 1] = two;\n            buf[offset] = lsb;\n        }\n        else {\n            buf[offset - 3] = 0;\n            buf[offset - 2] = 0;\n            buf[offset - 1] = two;\n            buf[offset] = lsb;\n        }\n    }\n    else {\n        buf[offset - 3] = 0;\n        buf[offset - 2] = 0;\n        buf[offset - 1] = 0;\n        buf[offset] = lsb;\n    }\n    return buf;\n}\n/**\n * Converts a JavaScript number, treated as a Whole Number (0, 1, 2, 3, 4, ...)\n * less than 64 bits wide, to a Buffer.\n *\n * Numbers that are negative, fractional, or greater than 64 bits wide will\n * return very unexpected results. Numbers that are greater than\n * `Number.MAX_SAFE_INTEGER` will return unexpected results.\n *\n * @param num A positive whole number <= `Number.MAX_SAFE_INTEGER`\n */\nfunction uintToBuffer(num) {\n    return num > MAX_UINT32 ? uintWideToBuf(num) : uint32ToBuf(num);\n}\nexports.uintToBuffer = uintToBuffer;\n//# sourceMappingURL=uint-to-buffer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unref = void 0;\n/**\n * In node, calling `unref(timer)` on a running timer ensures that the timer\n * does not require that the Node.js event remain active. If there is no other\n * activity keeping the event loop running, the process may exit before the\n * timer's callback is invoked.\n * @param timer\n * @returns `true` if the timer could be `unref`ed, otherwise returns `false`\n */\nfunction unref(timer) {\n    if (typeof timer === \"object\" && typeof timer.unref === \"function\") {\n        timer.unref();\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexports.unref = unref;\n//# sourceMappingURL=unref.js.map"],"sourceRoot":""}