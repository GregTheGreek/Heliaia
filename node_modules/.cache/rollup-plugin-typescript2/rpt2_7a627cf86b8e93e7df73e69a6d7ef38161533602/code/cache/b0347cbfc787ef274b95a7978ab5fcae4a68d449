{"code":"import { Command } from 'commander';\r\nimport ethers from 'ethers';\r\nimport express from 'express';\r\nimport { Proxy } from \"./proxy\";\r\n// CLI\r\nconst program = new Command();\r\nprogram\r\n    .option('-r --rpc <url>', 'RPC URL to proxy to', 'http://localhost:8545/')\r\n    .option('-p --port <number>', 'Port number to listen on', '9545');\r\nprogram.parse(process.argv);\r\nconst options = program.opts();\r\n// Proxy Setup\r\nconst provider = new ethers.providers.JsonRpcProvider({ url: options.rpc });\r\nconst proxy = new Proxy(provider);\r\n// Proxy server Logic\r\nconst app = express();\r\napp.use(express.json());\r\napp.post('/', async (req, res) => {\r\n    const { id, method, params } = req.body;\r\n    try {\r\n        const result = await proxy.rpcHandler(method, params);\r\n        res.json({\r\n            jsonrpc: \"2.0\",\r\n            id,\r\n            result\r\n        });\r\n    }\r\n    catch (e) {\r\n        if (e?.body !== undefined) {\r\n            const { error } = JSON.parse(e.body);\r\n            res.json({\r\n                jsonrpc: \"2.0\",\r\n                id,\r\n                error\r\n            });\r\n        }\r\n        else {\r\n            console.log(e);\r\n        }\r\n    }\r\n});\r\napp.listen(parseInt(options.port), () => {\r\n    console.log(`Listening on port ${options.port}`);\r\n});\r\n//# sourceMappingURL=index.js.map","references":["/Users/gregmarkou/code/github.com/GregTheGreek/Heliaia/node_modules/commander/typings/index.d.ts","/Users/gregmarkou/code/github.com/GregTheGreek/Heliaia/node_modules/ethers/lib/index.d.ts","/Users/gregmarkou/code/github.com/GregTheGreek/Heliaia/node_modules/@types/express/ts4.0/index.d.ts","/Users/gregmarkou/code/github.com/GregTheGreek/Heliaia/src/proxy.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,OAAO,MAAM,SAAS,CAAC;AAE9B,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAE9B,MAAM;AACN,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;AAC9B,OAAO;KACJ,MAAM,CAAC,gBAAgB,EAAE,qBAAqB,EAAE,wBAAwB,CAAC;KACzE,MAAM,CAAC,oBAAoB,EAAE,0BAA0B,EAAE,MAAM,CAAC,CAAC;AAEpE,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC5B,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;AAE/B,cAAc;AACd,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5E,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;AAElC,qBAAqB;AACrB,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AAExB,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC/B,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IACxC,IAAI;QACF,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACtD,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,KAAK;YACd,EAAE;YACF,MAAM;SACP,CAAC,CAAC;KACJ;IAAC,OAAM,CAAC,EAAE;QACT,IAAI,CAAS,EAAE,IAAI,KAAK,SAAS,EAAE;YACjC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAE,CAAS,CAAC,IAAI,CAAC,CAAC;YAC9C,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,KAAK;gBACd,EAAE;gBACF,KAAK;aACN,CAAC,CAAC;SACJ;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAChB;KACF;AACH,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE;IACtC,OAAO,CAAC,GAAG,CAAC,qBAAqB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC\"}","dts":{"name":"/Users/gregmarkou/code/github.com/GregTheGreek/Heliaia/index.d.ts","writeByteOrderMark":false,"text":"export {};\r\n"}}
